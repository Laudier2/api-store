
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  phone: string
  email: string
  password: string
  image: string | null
  age: string
  access: string
  created_at: Date
  update_at: Date
}

/**
 * Model Adress
 * 
 */
export type Adress = {
  id: string
  street: string
  city: string
  state: string
  cep: string
  number: string
  district: string
  apartment_or_house: string
  created_at: Date
  update_at: Date
}

/**
 * Model RelationsAdress
 * 
 */
export type RelationsAdress = {
  id: string
  id_user: string
  id_adress: string
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: string
  image: string
  name: string
}

/**
 * Model Product
 * 
 */
export type Product = {
  id: string
  name: string
  bar_code: string[]
  price: string
  image: string[]
  size: string[]
  color: string[]
  slug: string[]
  description: string
  quantity: string
  url_product: string
  created_at: Date
}

/**
 * Model Product_Category
 * 
 */
export type Product_Category = {
  id: string
  id_product: string
  id_category: string
}

/**
 * Model Compra
 * 
 */
export type Compra = {
  id: string
  name: string
  phone: string
  email: string
  street: string
  city: string
  state: string
  cep: string
  number: string
  district: string
  apartment_or_house: string
  created_at: Date
  update_at: Date
  code_compra: string
  productName: string
  productPrice: string
  productImage: string
  productSize: string
  productClolor: string
  productQuantity: string
  productUrl: string
}

/**
 * Model Compra1
 * 
 */
export type Compra1 = {
  id: string
  name: string
  phone: string
  email: string
  street: string
  city: string
  state: string
  cep: string
  number: string
  district: string
  apartment_or_house: string
  created_at: Date
  update_at: Date
  code_compra: string
  productName: string
  productPrice: string
  productImage: string
  productSize: string
  productClolor: string
  productQuantity: string
  productUrl: string
}

/**
 * Model Compra2
 * 
 */
export type Compra2 = {
  id: string
  name: string
  phone: string
  email: string
  street: string
  city: string
  state: string
  cep: string
  number: string
  district: string
  apartment_or_house: string
  created_at: Date
  update_at: Date
  code_compra: string
  productName: string
  productPrice: string
  productImage: string
  productSize: string
  productClolor: string
  productQuantity: string
  productUrl: string
}

/**
 * Model Compra3
 * 
 */
export type Compra3 = {
  id: string
  name: string
  phone: string
  email: string
  street: string
  city: string
  state: string
  cep: string
  number: string
  district: string
  apartment_or_house: string
  created_at: Date
  update_at: Date
  code_compra: string
  productName: string
  productPrice: string
  productImage: string
  productSize: string
  productClolor: string
  productQuantity: string
  productUrl: string
}

/**
 * Model Compra4
 * 
 */
export type Compra4 = {
  id: string
  name: string
  phone: string
  email: string
  street: string
  city: string
  state: string
  cep: string
  number: string
  district: string
  apartment_or_house: string
  created_at: Date
  update_at: Date
  code_compra: string
  productName: string
  productPrice: string
  productImage: string
  productSize: string
  productClolor: string
  productQuantity: string
  productUrl: string
}

/**
 * Model CompraRealations
 * 
 */
export type CompraRealations = {
  id: string
  id_products: string
  id_compra: string
}

/**
 * Model Promocao
 * 
 */
export type Promocao = {
  id: string
  promocao: string[]
  created_at: Date
  update_at: Date
}

/**
 * Model Ofertas
 * 
 */
export type Ofertas = {
  id: string
  ofertas: string[]
  created_at: Date
  update_at: Date
}

/**
 * Model Slids
 * 
 */
export type Slids = {
  id: string
  slids: string[]
  created_at: Date
  update_at: Date
}

/**
 * Model Bannes
 * 
 */
export type Bannes = {
  id: string
  bannes: string[]
  created_at: Date
  update_at: Date
}

/**
 * Model Comentarios
 * 
 */
export type Comentarios = {
  id: string
  imgName: string
  image: string[]
  name: string
  message: string
  estrela: string
  created_at: Date
  update_at: Date
}

/**
 * Model ComentarioRealations
 * 
 */
export type ComentarioRealations = {
  id: string
  id_product: string
  id_comentario: string
}

/**
 * Model Favorito
 * 
 */
export type Favorito = {
  id: string
  name: string
  bar_code: string[]
  price: string
  image: string[]
  size: string[]
  color: string[]
  slug: string[]
  description: string
  quantity: string
  url_product: string
  created_at: Date
  update_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.adress`: Exposes CRUD operations for the **Adress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adresses
    * const adresses = await prisma.adress.findMany()
    * ```
    */
  get adress(): Prisma.AdressDelegate<GlobalReject>;

  /**
   * `prisma.relationsAdress`: Exposes CRUD operations for the **RelationsAdress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RelationsAdresses
    * const relationsAdresses = await prisma.relationsAdress.findMany()
    * ```
    */
  get relationsAdress(): Prisma.RelationsAdressDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.product_Category`: Exposes CRUD operations for the **Product_Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_Categories
    * const product_Categories = await prisma.product_Category.findMany()
    * ```
    */
  get product_Category(): Prisma.Product_CategoryDelegate<GlobalReject>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **Compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.CompraDelegate<GlobalReject>;

  /**
   * `prisma.compra1`: Exposes CRUD operations for the **Compra1** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compra1s
    * const compra1s = await prisma.compra1.findMany()
    * ```
    */
  get compra1(): Prisma.Compra1Delegate<GlobalReject>;

  /**
   * `prisma.compra2`: Exposes CRUD operations for the **Compra2** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compra2s
    * const compra2s = await prisma.compra2.findMany()
    * ```
    */
  get compra2(): Prisma.Compra2Delegate<GlobalReject>;

  /**
   * `prisma.compra3`: Exposes CRUD operations for the **Compra3** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compra3s
    * const compra3s = await prisma.compra3.findMany()
    * ```
    */
  get compra3(): Prisma.Compra3Delegate<GlobalReject>;

  /**
   * `prisma.compra4`: Exposes CRUD operations for the **Compra4** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compra4s
    * const compra4s = await prisma.compra4.findMany()
    * ```
    */
  get compra4(): Prisma.Compra4Delegate<GlobalReject>;

  /**
   * `prisma.compraRealations`: Exposes CRUD operations for the **CompraRealations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompraRealations
    * const compraRealations = await prisma.compraRealations.findMany()
    * ```
    */
  get compraRealations(): Prisma.CompraRealationsDelegate<GlobalReject>;

  /**
   * `prisma.promocao`: Exposes CRUD operations for the **Promocao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promocaos
    * const promocaos = await prisma.promocao.findMany()
    * ```
    */
  get promocao(): Prisma.PromocaoDelegate<GlobalReject>;

  /**
   * `prisma.ofertas`: Exposes CRUD operations for the **Ofertas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ofertas
    * const ofertas = await prisma.ofertas.findMany()
    * ```
    */
  get ofertas(): Prisma.OfertasDelegate<GlobalReject>;

  /**
   * `prisma.slids`: Exposes CRUD operations for the **Slids** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Slids
    * const slids = await prisma.slids.findMany()
    * ```
    */
  get slids(): Prisma.SlidsDelegate<GlobalReject>;

  /**
   * `prisma.bannes`: Exposes CRUD operations for the **Bannes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bannes
    * const bannes = await prisma.bannes.findMany()
    * ```
    */
  get bannes(): Prisma.BannesDelegate<GlobalReject>;

  /**
   * `prisma.comentarios`: Exposes CRUD operations for the **Comentarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comentarios
    * const comentarios = await prisma.comentarios.findMany()
    * ```
    */
  get comentarios(): Prisma.ComentariosDelegate<GlobalReject>;

  /**
   * `prisma.comentarioRealations`: Exposes CRUD operations for the **ComentarioRealations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComentarioRealations
    * const comentarioRealations = await prisma.comentarioRealations.findMany()
    * ```
    */
  get comentarioRealations(): Prisma.ComentarioRealationsDelegate<GlobalReject>;

  /**
   * `prisma.favorito`: Exposes CRUD operations for the **Favorito** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favoritos
    * const favoritos = await prisma.favorito.findMany()
    * ```
    */
  get favorito(): Prisma.FavoritoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Adress: 'Adress',
    RelationsAdress: 'RelationsAdress',
    Category: 'Category',
    Product: 'Product',
    Product_Category: 'Product_Category',
    Compra: 'Compra',
    Compra1: 'Compra1',
    Compra2: 'Compra2',
    Compra3: 'Compra3',
    Compra4: 'Compra4',
    CompraRealations: 'CompraRealations',
    Promocao: 'Promocao',
    Ofertas: 'Ofertas',
    Slids: 'Slids',
    Bannes: 'Bannes',
    Comentarios: 'Comentarios',
    ComentarioRealations: 'ComentarioRealations',
    Favorito: 'Favorito'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    RelationsAdress: number
  }

  export type UserCountOutputTypeSelect = {
    RelationsAdress?: boolean | UserCountOutputTypeCountRelationsAdressArgs
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRelationsAdressArgs = {
    where?: RelationsAdressWhereInput
  }



  /**
   * Count Type AdressCountOutputType
   */


  export type AdressCountOutputType = {
    RelationsAdress: number
  }

  export type AdressCountOutputTypeSelect = {
    RelationsAdress?: boolean | AdressCountOutputTypeCountRelationsAdressArgs
  }

  export type AdressCountOutputTypeGetPayload<S extends boolean | null | undefined | AdressCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AdressCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AdressCountOutputTypeArgs)
    ? AdressCountOutputType 
    : S extends { select: any } & (AdressCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AdressCountOutputType ? AdressCountOutputType[P] : never
  } 
      : AdressCountOutputType




  // Custom InputTypes

  /**
   * AdressCountOutputType without action
   */
  export type AdressCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AdressCountOutputType
     */
    select?: AdressCountOutputTypeSelect | null
  }


  /**
   * AdressCountOutputType without action
   */
  export type AdressCountOutputTypeCountRelationsAdressArgs = {
    where?: RelationsAdressWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    products_categories: number
  }

  export type CategoryCountOutputTypeSelect = {
    products_categories?: boolean | CategoryCountOutputTypeCountProducts_categoriesArgs
  }

  export type CategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoryCountOutputTypeArgs)
    ? CategoryCountOutputType 
    : S extends { select: any } & (CategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
      : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProducts_categoriesArgs = {
    where?: Product_CategoryWhereInput
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    comprarealations: number
    products_categories: number
    comentariorealations: number
  }

  export type ProductCountOutputTypeSelect = {
    comprarealations?: boolean | ProductCountOutputTypeCountComprarealationsArgs
    products_categories?: boolean | ProductCountOutputTypeCountProducts_categoriesArgs
    comentariorealations?: boolean | ProductCountOutputTypeCountComentariorealationsArgs
  }

  export type ProductCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductCountOutputTypeArgs)
    ? ProductCountOutputType 
    : S extends { select: any } & (ProductCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductCountOutputType ? ProductCountOutputType[P] : never
  } 
      : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect | null
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountComprarealationsArgs = {
    where?: CompraRealationsWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProducts_categoriesArgs = {
    where?: Product_CategoryWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountComentariorealationsArgs = {
    where?: ComentarioRealationsWhereInput
  }



  /**
   * Count Type CompraCountOutputType
   */


  export type CompraCountOutputType = {
    comprarealations: number
  }

  export type CompraCountOutputTypeSelect = {
    comprarealations?: boolean | CompraCountOutputTypeCountComprarealationsArgs
  }

  export type CompraCountOutputTypeGetPayload<S extends boolean | null | undefined | CompraCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompraCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompraCountOutputTypeArgs)
    ? CompraCountOutputType 
    : S extends { select: any } & (CompraCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompraCountOutputType ? CompraCountOutputType[P] : never
  } 
      : CompraCountOutputType




  // Custom InputTypes

  /**
   * CompraCountOutputType without action
   */
  export type CompraCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompraCountOutputType
     */
    select?: CompraCountOutputTypeSelect | null
  }


  /**
   * CompraCountOutputType without action
   */
  export type CompraCountOutputTypeCountComprarealationsArgs = {
    where?: CompraRealationsWhereInput
  }



  /**
   * Count Type ComentariosCountOutputType
   */


  export type ComentariosCountOutputType = {
    comentariorealations: number
  }

  export type ComentariosCountOutputTypeSelect = {
    comentariorealations?: boolean | ComentariosCountOutputTypeCountComentariorealationsArgs
  }

  export type ComentariosCountOutputTypeGetPayload<S extends boolean | null | undefined | ComentariosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ComentariosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ComentariosCountOutputTypeArgs)
    ? ComentariosCountOutputType 
    : S extends { select: any } & (ComentariosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ComentariosCountOutputType ? ComentariosCountOutputType[P] : never
  } 
      : ComentariosCountOutputType




  // Custom InputTypes

  /**
   * ComentariosCountOutputType without action
   */
  export type ComentariosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ComentariosCountOutputType
     */
    select?: ComentariosCountOutputTypeSelect | null
  }


  /**
   * ComentariosCountOutputType without action
   */
  export type ComentariosCountOutputTypeCountComentariorealationsArgs = {
    where?: ComentarioRealationsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    password: string | null
    image: string | null
    age: string | null
    access: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    password: string | null
    image: string | null
    age: string | null
    access: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    password: number
    image: number
    age: number
    access: number
    created_at: number
    update_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    password?: true
    image?: true
    age?: true
    access?: true
    created_at?: true
    update_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    password?: true
    image?: true
    age?: true
    access?: true
    created_at?: true
    update_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    password?: true
    image?: true
    age?: true
    access?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    phone: string
    email: string
    password: string
    image: string | null
    age: string
    access: string
    created_at: Date
    update_at: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    password?: boolean
    image?: boolean
    age?: boolean
    access?: boolean
    created_at?: boolean
    update_at?: boolean
    RelationsAdress?: boolean | User$RelationsAdressArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    RelationsAdress?: boolean | User$RelationsAdressArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'RelationsAdress' ? Array < RelationsAdressGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'RelationsAdress' ? Array < RelationsAdressGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    RelationsAdress<T extends User$RelationsAdressArgs= {}>(args?: Subset<T, User$RelationsAdressArgs>): PrismaPromise<Array<RelationsAdressGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.RelationsAdress
   */
  export type User$RelationsAdressArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    where?: RelationsAdressWhereInput
    orderBy?: Enumerable<RelationsAdressOrderByWithRelationInput>
    cursor?: RelationsAdressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RelationsAdressScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Adress
   */


  export type AggregateAdress = {
    _count: AdressCountAggregateOutputType | null
    _min: AdressMinAggregateOutputType | null
    _max: AdressMaxAggregateOutputType | null
  }

  export type AdressMinAggregateOutputType = {
    id: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type AdressMaxAggregateOutputType = {
    id: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type AdressCountAggregateOutputType = {
    id: number
    street: number
    city: number
    state: number
    cep: number
    number: number
    district: number
    apartment_or_house: number
    created_at: number
    update_at: number
    _all: number
  }


  export type AdressMinAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
  }

  export type AdressMaxAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
  }

  export type AdressCountAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type AdressAggregateArgs = {
    /**
     * Filter which Adress to aggregate.
     */
    where?: AdressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adresses to fetch.
     */
    orderBy?: Enumerable<AdressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Adresses
    **/
    _count?: true | AdressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdressMaxAggregateInputType
  }

  export type GetAdressAggregateType<T extends AdressAggregateArgs> = {
        [P in keyof T & keyof AggregateAdress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdress[P]>
      : GetScalarType<T[P], AggregateAdress[P]>
  }




  export type AdressGroupByArgs = {
    where?: AdressWhereInput
    orderBy?: Enumerable<AdressOrderByWithAggregationInput>
    by: AdressScalarFieldEnum[]
    having?: AdressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdressCountAggregateInputType | true
    _min?: AdressMinAggregateInputType
    _max?: AdressMaxAggregateInputType
  }


  export type AdressGroupByOutputType = {
    id: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at: Date
    update_at: Date
    _count: AdressCountAggregateOutputType | null
    _min: AdressMinAggregateOutputType | null
    _max: AdressMaxAggregateOutputType | null
  }

  type GetAdressGroupByPayload<T extends AdressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AdressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdressGroupByOutputType[P]>
            : GetScalarType<T[P], AdressGroupByOutputType[P]>
        }
      >
    >


  export type AdressSelect = {
    id?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    cep?: boolean
    number?: boolean
    district?: boolean
    apartment_or_house?: boolean
    created_at?: boolean
    update_at?: boolean
    RelationsAdress?: boolean | Adress$RelationsAdressArgs
    _count?: boolean | AdressCountOutputTypeArgs
  }


  export type AdressInclude = {
    RelationsAdress?: boolean | Adress$RelationsAdressArgs
    _count?: boolean | AdressCountOutputTypeArgs
  }

  export type AdressGetPayload<S extends boolean | null | undefined | AdressArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Adress :
    S extends undefined ? never :
    S extends { include: any } & (AdressArgs | AdressFindManyArgs)
    ? Adress  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'RelationsAdress' ? Array < RelationsAdressGetPayload<S['include'][P]>>  :
        P extends '_count' ? AdressCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AdressArgs | AdressFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'RelationsAdress' ? Array < RelationsAdressGetPayload<S['select'][P]>>  :
        P extends '_count' ? AdressCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Adress ? Adress[P] : never
  } 
      : Adress


  type AdressCountArgs = 
    Omit<AdressFindManyArgs, 'select' | 'include'> & {
      select?: AdressCountAggregateInputType | true
    }

  export interface AdressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Adress that matches the filter.
     * @param {AdressFindUniqueArgs} args - Arguments to find a Adress
     * @example
     * // Get one Adress
     * const adress = await prisma.adress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Adress'> extends True ? Prisma__AdressClient<AdressGetPayload<T>> : Prisma__AdressClient<AdressGetPayload<T> | null, null>

    /**
     * Find one Adress that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdressFindUniqueOrThrowArgs} args - Arguments to find a Adress
     * @example
     * // Get one Adress
     * const adress = await prisma.adress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdressFindUniqueOrThrowArgs>
    ): Prisma__AdressClient<AdressGetPayload<T>>

    /**
     * Find the first Adress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdressFindFirstArgs} args - Arguments to find a Adress
     * @example
     * // Get one Adress
     * const adress = await prisma.adress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Adress'> extends True ? Prisma__AdressClient<AdressGetPayload<T>> : Prisma__AdressClient<AdressGetPayload<T> | null, null>

    /**
     * Find the first Adress that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdressFindFirstOrThrowArgs} args - Arguments to find a Adress
     * @example
     * // Get one Adress
     * const adress = await prisma.adress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdressFindFirstOrThrowArgs>
    ): Prisma__AdressClient<AdressGetPayload<T>>

    /**
     * Find zero or more Adresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adresses
     * const adresses = await prisma.adress.findMany()
     * 
     * // Get first 10 Adresses
     * const adresses = await prisma.adress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adressWithIdOnly = await prisma.adress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdressFindManyArgs>(
      args?: SelectSubset<T, AdressFindManyArgs>
    ): PrismaPromise<Array<AdressGetPayload<T>>>

    /**
     * Create a Adress.
     * @param {AdressCreateArgs} args - Arguments to create a Adress.
     * @example
     * // Create one Adress
     * const Adress = await prisma.adress.create({
     *   data: {
     *     // ... data to create a Adress
     *   }
     * })
     * 
    **/
    create<T extends AdressCreateArgs>(
      args: SelectSubset<T, AdressCreateArgs>
    ): Prisma__AdressClient<AdressGetPayload<T>>

    /**
     * Create many Adresses.
     *     @param {AdressCreateManyArgs} args - Arguments to create many Adresses.
     *     @example
     *     // Create many Adresses
     *     const adress = await prisma.adress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdressCreateManyArgs>(
      args?: SelectSubset<T, AdressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Adress.
     * @param {AdressDeleteArgs} args - Arguments to delete one Adress.
     * @example
     * // Delete one Adress
     * const Adress = await prisma.adress.delete({
     *   where: {
     *     // ... filter to delete one Adress
     *   }
     * })
     * 
    **/
    delete<T extends AdressDeleteArgs>(
      args: SelectSubset<T, AdressDeleteArgs>
    ): Prisma__AdressClient<AdressGetPayload<T>>

    /**
     * Update one Adress.
     * @param {AdressUpdateArgs} args - Arguments to update one Adress.
     * @example
     * // Update one Adress
     * const adress = await prisma.adress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdressUpdateArgs>(
      args: SelectSubset<T, AdressUpdateArgs>
    ): Prisma__AdressClient<AdressGetPayload<T>>

    /**
     * Delete zero or more Adresses.
     * @param {AdressDeleteManyArgs} args - Arguments to filter Adresses to delete.
     * @example
     * // Delete a few Adresses
     * const { count } = await prisma.adress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdressDeleteManyArgs>(
      args?: SelectSubset<T, AdressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adresses
     * const adress = await prisma.adress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdressUpdateManyArgs>(
      args: SelectSubset<T, AdressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Adress.
     * @param {AdressUpsertArgs} args - Arguments to update or create a Adress.
     * @example
     * // Update or create a Adress
     * const adress = await prisma.adress.upsert({
     *   create: {
     *     // ... data to create a Adress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adress we want to update
     *   }
     * })
    **/
    upsert<T extends AdressUpsertArgs>(
      args: SelectSubset<T, AdressUpsertArgs>
    ): Prisma__AdressClient<AdressGetPayload<T>>

    /**
     * Count the number of Adresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdressCountArgs} args - Arguments to filter Adresses to count.
     * @example
     * // Count the number of Adresses
     * const count = await prisma.adress.count({
     *   where: {
     *     // ... the filter for the Adresses we want to count
     *   }
     * })
    **/
    count<T extends AdressCountArgs>(
      args?: Subset<T, AdressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdressAggregateArgs>(args: Subset<T, AdressAggregateArgs>): PrismaPromise<GetAdressAggregateType<T>>

    /**
     * Group by Adress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdressGroupByArgs['orderBy'] }
        : { orderBy?: AdressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdressGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Adress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdressClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    RelationsAdress<T extends Adress$RelationsAdressArgs= {}>(args?: Subset<T, Adress$RelationsAdressArgs>): PrismaPromise<Array<RelationsAdressGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Adress base type for findUnique actions
   */
  export type AdressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * Filter, which Adress to fetch.
     */
    where: AdressWhereUniqueInput
  }

  /**
   * Adress findUnique
   */
  export interface AdressFindUniqueArgs extends AdressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Adress findUniqueOrThrow
   */
  export type AdressFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * Filter, which Adress to fetch.
     */
    where: AdressWhereUniqueInput
  }


  /**
   * Adress base type for findFirst actions
   */
  export type AdressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * Filter, which Adress to fetch.
     */
    where?: AdressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adresses to fetch.
     */
    orderBy?: Enumerable<AdressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adresses.
     */
    cursor?: AdressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adresses.
     */
    distinct?: Enumerable<AdressScalarFieldEnum>
  }

  /**
   * Adress findFirst
   */
  export interface AdressFindFirstArgs extends AdressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Adress findFirstOrThrow
   */
  export type AdressFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * Filter, which Adress to fetch.
     */
    where?: AdressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adresses to fetch.
     */
    orderBy?: Enumerable<AdressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adresses.
     */
    cursor?: AdressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adresses.
     */
    distinct?: Enumerable<AdressScalarFieldEnum>
  }


  /**
   * Adress findMany
   */
  export type AdressFindManyArgs = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * Filter, which Adresses to fetch.
     */
    where?: AdressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adresses to fetch.
     */
    orderBy?: Enumerable<AdressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Adresses.
     */
    cursor?: AdressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adresses.
     */
    skip?: number
    distinct?: Enumerable<AdressScalarFieldEnum>
  }


  /**
   * Adress create
   */
  export type AdressCreateArgs = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * The data needed to create a Adress.
     */
    data: XOR<AdressCreateInput, AdressUncheckedCreateInput>
  }


  /**
   * Adress createMany
   */
  export type AdressCreateManyArgs = {
    /**
     * The data used to create many Adresses.
     */
    data: Enumerable<AdressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Adress update
   */
  export type AdressUpdateArgs = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * The data needed to update a Adress.
     */
    data: XOR<AdressUpdateInput, AdressUncheckedUpdateInput>
    /**
     * Choose, which Adress to update.
     */
    where: AdressWhereUniqueInput
  }


  /**
   * Adress updateMany
   */
  export type AdressUpdateManyArgs = {
    /**
     * The data used to update Adresses.
     */
    data: XOR<AdressUpdateManyMutationInput, AdressUncheckedUpdateManyInput>
    /**
     * Filter which Adresses to update
     */
    where?: AdressWhereInput
  }


  /**
   * Adress upsert
   */
  export type AdressUpsertArgs = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * The filter to search for the Adress to update in case it exists.
     */
    where: AdressWhereUniqueInput
    /**
     * In case the Adress found by the `where` argument doesn't exist, create a new Adress with this data.
     */
    create: XOR<AdressCreateInput, AdressUncheckedCreateInput>
    /**
     * In case the Adress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdressUpdateInput, AdressUncheckedUpdateInput>
  }


  /**
   * Adress delete
   */
  export type AdressDeleteArgs = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
    /**
     * Filter which Adress to delete.
     */
    where: AdressWhereUniqueInput
  }


  /**
   * Adress deleteMany
   */
  export type AdressDeleteManyArgs = {
    /**
     * Filter which Adresses to delete
     */
    where?: AdressWhereInput
  }


  /**
   * Adress.RelationsAdress
   */
  export type Adress$RelationsAdressArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    where?: RelationsAdressWhereInput
    orderBy?: Enumerable<RelationsAdressOrderByWithRelationInput>
    cursor?: RelationsAdressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RelationsAdressScalarFieldEnum>
  }


  /**
   * Adress without action
   */
  export type AdressArgs = {
    /**
     * Select specific fields to fetch from the Adress
     */
    select?: AdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdressInclude | null
  }



  /**
   * Model RelationsAdress
   */


  export type AggregateRelationsAdress = {
    _count: RelationsAdressCountAggregateOutputType | null
    _min: RelationsAdressMinAggregateOutputType | null
    _max: RelationsAdressMaxAggregateOutputType | null
  }

  export type RelationsAdressMinAggregateOutputType = {
    id: string | null
    id_user: string | null
    id_adress: string | null
  }

  export type RelationsAdressMaxAggregateOutputType = {
    id: string | null
    id_user: string | null
    id_adress: string | null
  }

  export type RelationsAdressCountAggregateOutputType = {
    id: number
    id_user: number
    id_adress: number
    _all: number
  }


  export type RelationsAdressMinAggregateInputType = {
    id?: true
    id_user?: true
    id_adress?: true
  }

  export type RelationsAdressMaxAggregateInputType = {
    id?: true
    id_user?: true
    id_adress?: true
  }

  export type RelationsAdressCountAggregateInputType = {
    id?: true
    id_user?: true
    id_adress?: true
    _all?: true
  }

  export type RelationsAdressAggregateArgs = {
    /**
     * Filter which RelationsAdress to aggregate.
     */
    where?: RelationsAdressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationsAdresses to fetch.
     */
    orderBy?: Enumerable<RelationsAdressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelationsAdressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationsAdresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationsAdresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RelationsAdresses
    **/
    _count?: true | RelationsAdressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelationsAdressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelationsAdressMaxAggregateInputType
  }

  export type GetRelationsAdressAggregateType<T extends RelationsAdressAggregateArgs> = {
        [P in keyof T & keyof AggregateRelationsAdress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelationsAdress[P]>
      : GetScalarType<T[P], AggregateRelationsAdress[P]>
  }




  export type RelationsAdressGroupByArgs = {
    where?: RelationsAdressWhereInput
    orderBy?: Enumerable<RelationsAdressOrderByWithAggregationInput>
    by: RelationsAdressScalarFieldEnum[]
    having?: RelationsAdressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelationsAdressCountAggregateInputType | true
    _min?: RelationsAdressMinAggregateInputType
    _max?: RelationsAdressMaxAggregateInputType
  }


  export type RelationsAdressGroupByOutputType = {
    id: string
    id_user: string
    id_adress: string
    _count: RelationsAdressCountAggregateOutputType | null
    _min: RelationsAdressMinAggregateOutputType | null
    _max: RelationsAdressMaxAggregateOutputType | null
  }

  type GetRelationsAdressGroupByPayload<T extends RelationsAdressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RelationsAdressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelationsAdressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelationsAdressGroupByOutputType[P]>
            : GetScalarType<T[P], RelationsAdressGroupByOutputType[P]>
        }
      >
    >


  export type RelationsAdressSelect = {
    id?: boolean
    id_user?: boolean
    id_adress?: boolean
    adress2?: boolean | AdressArgs
    user?: boolean | UserArgs
  }


  export type RelationsAdressInclude = {
    adress2?: boolean | AdressArgs
    user?: boolean | UserArgs
  }

  export type RelationsAdressGetPayload<S extends boolean | null | undefined | RelationsAdressArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RelationsAdress :
    S extends undefined ? never :
    S extends { include: any } & (RelationsAdressArgs | RelationsAdressFindManyArgs)
    ? RelationsAdress  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'adress2' ? AdressGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RelationsAdressArgs | RelationsAdressFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'adress2' ? AdressGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof RelationsAdress ? RelationsAdress[P] : never
  } 
      : RelationsAdress


  type RelationsAdressCountArgs = 
    Omit<RelationsAdressFindManyArgs, 'select' | 'include'> & {
      select?: RelationsAdressCountAggregateInputType | true
    }

  export interface RelationsAdressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one RelationsAdress that matches the filter.
     * @param {RelationsAdressFindUniqueArgs} args - Arguments to find a RelationsAdress
     * @example
     * // Get one RelationsAdress
     * const relationsAdress = await prisma.relationsAdress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RelationsAdressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RelationsAdressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RelationsAdress'> extends True ? Prisma__RelationsAdressClient<RelationsAdressGetPayload<T>> : Prisma__RelationsAdressClient<RelationsAdressGetPayload<T> | null, null>

    /**
     * Find one RelationsAdress that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RelationsAdressFindUniqueOrThrowArgs} args - Arguments to find a RelationsAdress
     * @example
     * // Get one RelationsAdress
     * const relationsAdress = await prisma.relationsAdress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RelationsAdressFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RelationsAdressFindUniqueOrThrowArgs>
    ): Prisma__RelationsAdressClient<RelationsAdressGetPayload<T>>

    /**
     * Find the first RelationsAdress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationsAdressFindFirstArgs} args - Arguments to find a RelationsAdress
     * @example
     * // Get one RelationsAdress
     * const relationsAdress = await prisma.relationsAdress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RelationsAdressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RelationsAdressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RelationsAdress'> extends True ? Prisma__RelationsAdressClient<RelationsAdressGetPayload<T>> : Prisma__RelationsAdressClient<RelationsAdressGetPayload<T> | null, null>

    /**
     * Find the first RelationsAdress that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationsAdressFindFirstOrThrowArgs} args - Arguments to find a RelationsAdress
     * @example
     * // Get one RelationsAdress
     * const relationsAdress = await prisma.relationsAdress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RelationsAdressFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RelationsAdressFindFirstOrThrowArgs>
    ): Prisma__RelationsAdressClient<RelationsAdressGetPayload<T>>

    /**
     * Find zero or more RelationsAdresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationsAdressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RelationsAdresses
     * const relationsAdresses = await prisma.relationsAdress.findMany()
     * 
     * // Get first 10 RelationsAdresses
     * const relationsAdresses = await prisma.relationsAdress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relationsAdressWithIdOnly = await prisma.relationsAdress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RelationsAdressFindManyArgs>(
      args?: SelectSubset<T, RelationsAdressFindManyArgs>
    ): PrismaPromise<Array<RelationsAdressGetPayload<T>>>

    /**
     * Create a RelationsAdress.
     * @param {RelationsAdressCreateArgs} args - Arguments to create a RelationsAdress.
     * @example
     * // Create one RelationsAdress
     * const RelationsAdress = await prisma.relationsAdress.create({
     *   data: {
     *     // ... data to create a RelationsAdress
     *   }
     * })
     * 
    **/
    create<T extends RelationsAdressCreateArgs>(
      args: SelectSubset<T, RelationsAdressCreateArgs>
    ): Prisma__RelationsAdressClient<RelationsAdressGetPayload<T>>

    /**
     * Create many RelationsAdresses.
     *     @param {RelationsAdressCreateManyArgs} args - Arguments to create many RelationsAdresses.
     *     @example
     *     // Create many RelationsAdresses
     *     const relationsAdress = await prisma.relationsAdress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RelationsAdressCreateManyArgs>(
      args?: SelectSubset<T, RelationsAdressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a RelationsAdress.
     * @param {RelationsAdressDeleteArgs} args - Arguments to delete one RelationsAdress.
     * @example
     * // Delete one RelationsAdress
     * const RelationsAdress = await prisma.relationsAdress.delete({
     *   where: {
     *     // ... filter to delete one RelationsAdress
     *   }
     * })
     * 
    **/
    delete<T extends RelationsAdressDeleteArgs>(
      args: SelectSubset<T, RelationsAdressDeleteArgs>
    ): Prisma__RelationsAdressClient<RelationsAdressGetPayload<T>>

    /**
     * Update one RelationsAdress.
     * @param {RelationsAdressUpdateArgs} args - Arguments to update one RelationsAdress.
     * @example
     * // Update one RelationsAdress
     * const relationsAdress = await prisma.relationsAdress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RelationsAdressUpdateArgs>(
      args: SelectSubset<T, RelationsAdressUpdateArgs>
    ): Prisma__RelationsAdressClient<RelationsAdressGetPayload<T>>

    /**
     * Delete zero or more RelationsAdresses.
     * @param {RelationsAdressDeleteManyArgs} args - Arguments to filter RelationsAdresses to delete.
     * @example
     * // Delete a few RelationsAdresses
     * const { count } = await prisma.relationsAdress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RelationsAdressDeleteManyArgs>(
      args?: SelectSubset<T, RelationsAdressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelationsAdresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationsAdressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RelationsAdresses
     * const relationsAdress = await prisma.relationsAdress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RelationsAdressUpdateManyArgs>(
      args: SelectSubset<T, RelationsAdressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RelationsAdress.
     * @param {RelationsAdressUpsertArgs} args - Arguments to update or create a RelationsAdress.
     * @example
     * // Update or create a RelationsAdress
     * const relationsAdress = await prisma.relationsAdress.upsert({
     *   create: {
     *     // ... data to create a RelationsAdress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RelationsAdress we want to update
     *   }
     * })
    **/
    upsert<T extends RelationsAdressUpsertArgs>(
      args: SelectSubset<T, RelationsAdressUpsertArgs>
    ): Prisma__RelationsAdressClient<RelationsAdressGetPayload<T>>

    /**
     * Count the number of RelationsAdresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationsAdressCountArgs} args - Arguments to filter RelationsAdresses to count.
     * @example
     * // Count the number of RelationsAdresses
     * const count = await prisma.relationsAdress.count({
     *   where: {
     *     // ... the filter for the RelationsAdresses we want to count
     *   }
     * })
    **/
    count<T extends RelationsAdressCountArgs>(
      args?: Subset<T, RelationsAdressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelationsAdressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RelationsAdress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationsAdressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelationsAdressAggregateArgs>(args: Subset<T, RelationsAdressAggregateArgs>): PrismaPromise<GetRelationsAdressAggregateType<T>>

    /**
     * Group by RelationsAdress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationsAdressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelationsAdressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelationsAdressGroupByArgs['orderBy'] }
        : { orderBy?: RelationsAdressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelationsAdressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelationsAdressGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for RelationsAdress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RelationsAdressClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    adress2<T extends AdressArgs= {}>(args?: Subset<T, AdressArgs>): Prisma__AdressClient<AdressGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * RelationsAdress base type for findUnique actions
   */
  export type RelationsAdressFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * Filter, which RelationsAdress to fetch.
     */
    where: RelationsAdressWhereUniqueInput
  }

  /**
   * RelationsAdress findUnique
   */
  export interface RelationsAdressFindUniqueArgs extends RelationsAdressFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RelationsAdress findUniqueOrThrow
   */
  export type RelationsAdressFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * Filter, which RelationsAdress to fetch.
     */
    where: RelationsAdressWhereUniqueInput
  }


  /**
   * RelationsAdress base type for findFirst actions
   */
  export type RelationsAdressFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * Filter, which RelationsAdress to fetch.
     */
    where?: RelationsAdressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationsAdresses to fetch.
     */
    orderBy?: Enumerable<RelationsAdressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelationsAdresses.
     */
    cursor?: RelationsAdressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationsAdresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationsAdresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelationsAdresses.
     */
    distinct?: Enumerable<RelationsAdressScalarFieldEnum>
  }

  /**
   * RelationsAdress findFirst
   */
  export interface RelationsAdressFindFirstArgs extends RelationsAdressFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RelationsAdress findFirstOrThrow
   */
  export type RelationsAdressFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * Filter, which RelationsAdress to fetch.
     */
    where?: RelationsAdressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationsAdresses to fetch.
     */
    orderBy?: Enumerable<RelationsAdressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelationsAdresses.
     */
    cursor?: RelationsAdressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationsAdresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationsAdresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelationsAdresses.
     */
    distinct?: Enumerable<RelationsAdressScalarFieldEnum>
  }


  /**
   * RelationsAdress findMany
   */
  export type RelationsAdressFindManyArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * Filter, which RelationsAdresses to fetch.
     */
    where?: RelationsAdressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelationsAdresses to fetch.
     */
    orderBy?: Enumerable<RelationsAdressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RelationsAdresses.
     */
    cursor?: RelationsAdressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelationsAdresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelationsAdresses.
     */
    skip?: number
    distinct?: Enumerable<RelationsAdressScalarFieldEnum>
  }


  /**
   * RelationsAdress create
   */
  export type RelationsAdressCreateArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * The data needed to create a RelationsAdress.
     */
    data: XOR<RelationsAdressCreateInput, RelationsAdressUncheckedCreateInput>
  }


  /**
   * RelationsAdress createMany
   */
  export type RelationsAdressCreateManyArgs = {
    /**
     * The data used to create many RelationsAdresses.
     */
    data: Enumerable<RelationsAdressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RelationsAdress update
   */
  export type RelationsAdressUpdateArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * The data needed to update a RelationsAdress.
     */
    data: XOR<RelationsAdressUpdateInput, RelationsAdressUncheckedUpdateInput>
    /**
     * Choose, which RelationsAdress to update.
     */
    where: RelationsAdressWhereUniqueInput
  }


  /**
   * RelationsAdress updateMany
   */
  export type RelationsAdressUpdateManyArgs = {
    /**
     * The data used to update RelationsAdresses.
     */
    data: XOR<RelationsAdressUpdateManyMutationInput, RelationsAdressUncheckedUpdateManyInput>
    /**
     * Filter which RelationsAdresses to update
     */
    where?: RelationsAdressWhereInput
  }


  /**
   * RelationsAdress upsert
   */
  export type RelationsAdressUpsertArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * The filter to search for the RelationsAdress to update in case it exists.
     */
    where: RelationsAdressWhereUniqueInput
    /**
     * In case the RelationsAdress found by the `where` argument doesn't exist, create a new RelationsAdress with this data.
     */
    create: XOR<RelationsAdressCreateInput, RelationsAdressUncheckedCreateInput>
    /**
     * In case the RelationsAdress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelationsAdressUpdateInput, RelationsAdressUncheckedUpdateInput>
  }


  /**
   * RelationsAdress delete
   */
  export type RelationsAdressDeleteArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
    /**
     * Filter which RelationsAdress to delete.
     */
    where: RelationsAdressWhereUniqueInput
  }


  /**
   * RelationsAdress deleteMany
   */
  export type RelationsAdressDeleteManyArgs = {
    /**
     * Filter which RelationsAdresses to delete
     */
    where?: RelationsAdressWhereInput
  }


  /**
   * RelationsAdress without action
   */
  export type RelationsAdressArgs = {
    /**
     * Select specific fields to fetch from the RelationsAdress
     */
    select?: RelationsAdressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RelationsAdressInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    image: string | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    image: string | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    image: number
    name: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    image?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    image?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    image?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: CategoryScalarFieldEnum[]
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: string
    image: string
    name: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    image?: boolean
    name?: boolean
    products_categories?: boolean | Category$products_categoriesArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }


  export type CategoryInclude = {
    products_categories?: boolean | Category$products_categoriesArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<S extends boolean | null | undefined | CategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Category :
    S extends undefined ? never :
    S extends { include: any } & (CategoryArgs | CategoryFindManyArgs)
    ? Category  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'products_categories' ? Array < Product_CategoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CategoryArgs | CategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'products_categories' ? Array < Product_CategoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
      : Category


  type CategoryCountArgs = 
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): PrismaPromise<Array<CategoryGetPayload<T>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products_categories<T extends Category$products_categoriesArgs= {}>(args?: Subset<T, Category$products_categoriesArgs>): PrismaPromise<Array<Product_CategoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     */
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category.products_categories
   */
  export type Category$products_categoriesArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    where?: Product_CategoryWhereInput
    orderBy?: Enumerable<Product_CategoryOrderByWithRelationInput>
    cursor?: Product_CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Product_CategoryScalarFieldEnum>
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: string | null
    description: string | null
    quantity: string | null
    url_product: string | null
    created_at: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: string | null
    description: string | null
    quantity: string | null
    url_product: string | null
    created_at: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    bar_code: number
    price: number
    image: number
    size: number
    color: number
    slug: number
    description: number
    quantity: number
    url_product: number
    created_at: number
    _all: number
  }


  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
    quantity?: true
    url_product?: true
    created_at?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
    quantity?: true
    url_product?: true
    created_at?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    bar_code?: true
    price?: true
    image?: true
    size?: true
    color?: true
    slug?: true
    description?: true
    quantity?: true
    url_product?: true
    created_at?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: ProductScalarFieldEnum[]
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: string
    name: string
    bar_code: string[]
    price: string
    image: string[]
    size: string[]
    color: string[]
    slug: string[]
    description: string
    quantity: string
    url_product: string
    created_at: Date
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect = {
    id?: boolean
    name?: boolean
    bar_code?: boolean
    price?: boolean
    image?: boolean
    size?: boolean
    color?: boolean
    slug?: boolean
    description?: boolean
    quantity?: boolean
    url_product?: boolean
    created_at?: boolean
    comprarealations?: boolean | Product$comprarealationsArgs
    products_categories?: boolean | Product$products_categoriesArgs
    comentariorealations?: boolean | Product$comentariorealationsArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }


  export type ProductInclude = {
    comprarealations?: boolean | Product$comprarealationsArgs
    products_categories?: boolean | Product$products_categoriesArgs
    comentariorealations?: boolean | Product$comentariorealationsArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type ProductGetPayload<S extends boolean | null | undefined | ProductArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Product :
    S extends undefined ? never :
    S extends { include: any } & (ProductArgs | ProductFindManyArgs)
    ? Product  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comprarealations' ? Array < CompraRealationsGetPayload<S['include'][P]>>  :
        P extends 'products_categories' ? Array < Product_CategoryGetPayload<S['include'][P]>>  :
        P extends 'comentariorealations' ? Array < ComentarioRealationsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProductArgs | ProductFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comprarealations' ? Array < CompraRealationsGetPayload<S['select'][P]>>  :
        P extends 'products_categories' ? Array < Product_CategoryGetPayload<S['select'][P]>>  :
        P extends 'comentariorealations' ? Array < ComentarioRealationsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Product ? Product[P] : never
  } 
      : Product


  type ProductCountArgs = 
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? Prisma__ProductClient<ProductGetPayload<T>> : Prisma__ProductClient<ProductGetPayload<T> | null, null>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? Prisma__ProductClient<ProductGetPayload<T>> : Prisma__ProductClient<ProductGetPayload<T> | null, null>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): PrismaPromise<Array<ProductGetPayload<T>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comprarealations<T extends Product$comprarealationsArgs= {}>(args?: Subset<T, Product$comprarealationsArgs>): PrismaPromise<Array<CompraRealationsGetPayload<T>>| Null>;

    products_categories<T extends Product$products_categoriesArgs= {}>(args?: Subset<T, Product$products_categoriesArgs>): PrismaPromise<Array<Product_CategoryGetPayload<T>>| Null>;

    comentariorealations<T extends Product$comentariorealationsArgs= {}>(args?: Subset<T, Product$comentariorealationsArgs>): PrismaPromise<Array<ComentarioRealationsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Product base type for findUnique actions
   */
  export type ProductFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUnique
   */
  export interface ProductFindUniqueArgs extends ProductFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product base type for findFirst actions
   */
  export type ProductFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * Product findFirst
   */
  export interface ProductFindFirstArgs extends ProductFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     */
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.comprarealations
   */
  export type Product$comprarealationsArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    where?: CompraRealationsWhereInput
    orderBy?: Enumerable<CompraRealationsOrderByWithRelationInput>
    cursor?: CompraRealationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraRealationsScalarFieldEnum>
  }


  /**
   * Product.products_categories
   */
  export type Product$products_categoriesArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    where?: Product_CategoryWhereInput
    orderBy?: Enumerable<Product_CategoryOrderByWithRelationInput>
    cursor?: Product_CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Product_CategoryScalarFieldEnum>
  }


  /**
   * Product.comentariorealations
   */
  export type Product$comentariorealationsArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    where?: ComentarioRealationsWhereInput
    orderBy?: Enumerable<ComentarioRealationsOrderByWithRelationInput>
    cursor?: ComentarioRealationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ComentarioRealationsScalarFieldEnum>
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude | null
  }



  /**
   * Model Product_Category
   */


  export type AggregateProduct_Category = {
    _count: Product_CategoryCountAggregateOutputType | null
    _min: Product_CategoryMinAggregateOutputType | null
    _max: Product_CategoryMaxAggregateOutputType | null
  }

  export type Product_CategoryMinAggregateOutputType = {
    id: string | null
    id_product: string | null
    id_category: string | null
  }

  export type Product_CategoryMaxAggregateOutputType = {
    id: string | null
    id_product: string | null
    id_category: string | null
  }

  export type Product_CategoryCountAggregateOutputType = {
    id: number
    id_product: number
    id_category: number
    _all: number
  }


  export type Product_CategoryMinAggregateInputType = {
    id?: true
    id_product?: true
    id_category?: true
  }

  export type Product_CategoryMaxAggregateInputType = {
    id?: true
    id_product?: true
    id_category?: true
  }

  export type Product_CategoryCountAggregateInputType = {
    id?: true
    id_product?: true
    id_category?: true
    _all?: true
  }

  export type Product_CategoryAggregateArgs = {
    /**
     * Filter which Product_Category to aggregate.
     */
    where?: Product_CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_Categories to fetch.
     */
    orderBy?: Enumerable<Product_CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Product_CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Product_Categories
    **/
    _count?: true | Product_CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_CategoryMaxAggregateInputType
  }

  export type GetProduct_CategoryAggregateType<T extends Product_CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_Category]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_Category[P]>
      : GetScalarType<T[P], AggregateProduct_Category[P]>
  }




  export type Product_CategoryGroupByArgs = {
    where?: Product_CategoryWhereInput
    orderBy?: Enumerable<Product_CategoryOrderByWithAggregationInput>
    by: Product_CategoryScalarFieldEnum[]
    having?: Product_CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_CategoryCountAggregateInputType | true
    _min?: Product_CategoryMinAggregateInputType
    _max?: Product_CategoryMaxAggregateInputType
  }


  export type Product_CategoryGroupByOutputType = {
    id: string
    id_product: string
    id_category: string
    _count: Product_CategoryCountAggregateOutputType | null
    _min: Product_CategoryMinAggregateOutputType | null
    _max: Product_CategoryMaxAggregateOutputType | null
  }

  type GetProduct_CategoryGroupByPayload<T extends Product_CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Product_CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], Product_CategoryGroupByOutputType[P]>
        }
      >
    >


  export type Product_CategorySelect = {
    id?: boolean
    id_product?: boolean
    id_category?: boolean
    categories?: boolean | CategoryArgs
    products?: boolean | ProductArgs
  }


  export type Product_CategoryInclude = {
    categories?: boolean | CategoryArgs
    products?: boolean | ProductArgs
  }

  export type Product_CategoryGetPayload<S extends boolean | null | undefined | Product_CategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Product_Category :
    S extends undefined ? never :
    S extends { include: any } & (Product_CategoryArgs | Product_CategoryFindManyArgs)
    ? Product_Category  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'categories' ? CategoryGetPayload<S['include'][P]> :
        P extends 'products' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Product_CategoryArgs | Product_CategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'categories' ? CategoryGetPayload<S['select'][P]> :
        P extends 'products' ? ProductGetPayload<S['select'][P]> :  P extends keyof Product_Category ? Product_Category[P] : never
  } 
      : Product_Category


  type Product_CategoryCountArgs = 
    Omit<Product_CategoryFindManyArgs, 'select' | 'include'> & {
      select?: Product_CategoryCountAggregateInputType | true
    }

  export interface Product_CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product_Category that matches the filter.
     * @param {Product_CategoryFindUniqueArgs} args - Arguments to find a Product_Category
     * @example
     * // Get one Product_Category
     * const product_Category = await prisma.product_Category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Product_CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Product_CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product_Category'> extends True ? Prisma__Product_CategoryClient<Product_CategoryGetPayload<T>> : Prisma__Product_CategoryClient<Product_CategoryGetPayload<T> | null, null>

    /**
     * Find one Product_Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Product_CategoryFindUniqueOrThrowArgs} args - Arguments to find a Product_Category
     * @example
     * // Get one Product_Category
     * const product_Category = await prisma.product_Category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Product_CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Product_CategoryFindUniqueOrThrowArgs>
    ): Prisma__Product_CategoryClient<Product_CategoryGetPayload<T>>

    /**
     * Find the first Product_Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_CategoryFindFirstArgs} args - Arguments to find a Product_Category
     * @example
     * // Get one Product_Category
     * const product_Category = await prisma.product_Category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Product_CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Product_CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product_Category'> extends True ? Prisma__Product_CategoryClient<Product_CategoryGetPayload<T>> : Prisma__Product_CategoryClient<Product_CategoryGetPayload<T> | null, null>

    /**
     * Find the first Product_Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_CategoryFindFirstOrThrowArgs} args - Arguments to find a Product_Category
     * @example
     * // Get one Product_Category
     * const product_Category = await prisma.product_Category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Product_CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Product_CategoryFindFirstOrThrowArgs>
    ): Prisma__Product_CategoryClient<Product_CategoryGetPayload<T>>

    /**
     * Find zero or more Product_Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_Categories
     * const product_Categories = await prisma.product_Category.findMany()
     * 
     * // Get first 10 Product_Categories
     * const product_Categories = await prisma.product_Category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_CategoryWithIdOnly = await prisma.product_Category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Product_CategoryFindManyArgs>(
      args?: SelectSubset<T, Product_CategoryFindManyArgs>
    ): PrismaPromise<Array<Product_CategoryGetPayload<T>>>

    /**
     * Create a Product_Category.
     * @param {Product_CategoryCreateArgs} args - Arguments to create a Product_Category.
     * @example
     * // Create one Product_Category
     * const Product_Category = await prisma.product_Category.create({
     *   data: {
     *     // ... data to create a Product_Category
     *   }
     * })
     * 
    **/
    create<T extends Product_CategoryCreateArgs>(
      args: SelectSubset<T, Product_CategoryCreateArgs>
    ): Prisma__Product_CategoryClient<Product_CategoryGetPayload<T>>

    /**
     * Create many Product_Categories.
     *     @param {Product_CategoryCreateManyArgs} args - Arguments to create many Product_Categories.
     *     @example
     *     // Create many Product_Categories
     *     const product_Category = await prisma.product_Category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Product_CategoryCreateManyArgs>(
      args?: SelectSubset<T, Product_CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product_Category.
     * @param {Product_CategoryDeleteArgs} args - Arguments to delete one Product_Category.
     * @example
     * // Delete one Product_Category
     * const Product_Category = await prisma.product_Category.delete({
     *   where: {
     *     // ... filter to delete one Product_Category
     *   }
     * })
     * 
    **/
    delete<T extends Product_CategoryDeleteArgs>(
      args: SelectSubset<T, Product_CategoryDeleteArgs>
    ): Prisma__Product_CategoryClient<Product_CategoryGetPayload<T>>

    /**
     * Update one Product_Category.
     * @param {Product_CategoryUpdateArgs} args - Arguments to update one Product_Category.
     * @example
     * // Update one Product_Category
     * const product_Category = await prisma.product_Category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Product_CategoryUpdateArgs>(
      args: SelectSubset<T, Product_CategoryUpdateArgs>
    ): Prisma__Product_CategoryClient<Product_CategoryGetPayload<T>>

    /**
     * Delete zero or more Product_Categories.
     * @param {Product_CategoryDeleteManyArgs} args - Arguments to filter Product_Categories to delete.
     * @example
     * // Delete a few Product_Categories
     * const { count } = await prisma.product_Category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Product_CategoryDeleteManyArgs>(
      args?: SelectSubset<T, Product_CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_Categories
     * const product_Category = await prisma.product_Category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Product_CategoryUpdateManyArgs>(
      args: SelectSubset<T, Product_CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_Category.
     * @param {Product_CategoryUpsertArgs} args - Arguments to update or create a Product_Category.
     * @example
     * // Update or create a Product_Category
     * const product_Category = await prisma.product_Category.upsert({
     *   create: {
     *     // ... data to create a Product_Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_Category we want to update
     *   }
     * })
    **/
    upsert<T extends Product_CategoryUpsertArgs>(
      args: SelectSubset<T, Product_CategoryUpsertArgs>
    ): Prisma__Product_CategoryClient<Product_CategoryGetPayload<T>>

    /**
     * Count the number of Product_Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_CategoryCountArgs} args - Arguments to filter Product_Categories to count.
     * @example
     * // Count the number of Product_Categories
     * const count = await prisma.product_Category.count({
     *   where: {
     *     // ... the filter for the Product_Categories we want to count
     *   }
     * })
    **/
    count<T extends Product_CategoryCountArgs>(
      args?: Subset<T, Product_CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_CategoryAggregateArgs>(args: Subset<T, Product_CategoryAggregateArgs>): PrismaPromise<GetProduct_CategoryAggregateType<T>>

    /**
     * Group by Product_Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_CategoryGroupByArgs['orderBy'] }
        : { orderBy?: Product_CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_CategoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Product_Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Product_CategoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categories<T extends CategoryArgs= {}>(args?: Subset<T, CategoryArgs>): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    products<T extends ProductArgs= {}>(args?: Subset<T, ProductArgs>): Prisma__ProductClient<ProductGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Product_Category base type for findUnique actions
   */
  export type Product_CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * Filter, which Product_Category to fetch.
     */
    where: Product_CategoryWhereUniqueInput
  }

  /**
   * Product_Category findUnique
   */
  export interface Product_CategoryFindUniqueArgs extends Product_CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product_Category findUniqueOrThrow
   */
  export type Product_CategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * Filter, which Product_Category to fetch.
     */
    where: Product_CategoryWhereUniqueInput
  }


  /**
   * Product_Category base type for findFirst actions
   */
  export type Product_CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * Filter, which Product_Category to fetch.
     */
    where?: Product_CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_Categories to fetch.
     */
    orderBy?: Enumerable<Product_CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Product_Categories.
     */
    cursor?: Product_CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Product_Categories.
     */
    distinct?: Enumerable<Product_CategoryScalarFieldEnum>
  }

  /**
   * Product_Category findFirst
   */
  export interface Product_CategoryFindFirstArgs extends Product_CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product_Category findFirstOrThrow
   */
  export type Product_CategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * Filter, which Product_Category to fetch.
     */
    where?: Product_CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_Categories to fetch.
     */
    orderBy?: Enumerable<Product_CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Product_Categories.
     */
    cursor?: Product_CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Product_Categories.
     */
    distinct?: Enumerable<Product_CategoryScalarFieldEnum>
  }


  /**
   * Product_Category findMany
   */
  export type Product_CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * Filter, which Product_Categories to fetch.
     */
    where?: Product_CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_Categories to fetch.
     */
    orderBy?: Enumerable<Product_CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Product_Categories.
     */
    cursor?: Product_CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_Categories.
     */
    skip?: number
    distinct?: Enumerable<Product_CategoryScalarFieldEnum>
  }


  /**
   * Product_Category create
   */
  export type Product_CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * The data needed to create a Product_Category.
     */
    data: XOR<Product_CategoryCreateInput, Product_CategoryUncheckedCreateInput>
  }


  /**
   * Product_Category createMany
   */
  export type Product_CategoryCreateManyArgs = {
    /**
     * The data used to create many Product_Categories.
     */
    data: Enumerable<Product_CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product_Category update
   */
  export type Product_CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * The data needed to update a Product_Category.
     */
    data: XOR<Product_CategoryUpdateInput, Product_CategoryUncheckedUpdateInput>
    /**
     * Choose, which Product_Category to update.
     */
    where: Product_CategoryWhereUniqueInput
  }


  /**
   * Product_Category updateMany
   */
  export type Product_CategoryUpdateManyArgs = {
    /**
     * The data used to update Product_Categories.
     */
    data: XOR<Product_CategoryUpdateManyMutationInput, Product_CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Product_Categories to update
     */
    where?: Product_CategoryWhereInput
  }


  /**
   * Product_Category upsert
   */
  export type Product_CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * The filter to search for the Product_Category to update in case it exists.
     */
    where: Product_CategoryWhereUniqueInput
    /**
     * In case the Product_Category found by the `where` argument doesn't exist, create a new Product_Category with this data.
     */
    create: XOR<Product_CategoryCreateInput, Product_CategoryUncheckedCreateInput>
    /**
     * In case the Product_Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Product_CategoryUpdateInput, Product_CategoryUncheckedUpdateInput>
  }


  /**
   * Product_Category delete
   */
  export type Product_CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
    /**
     * Filter which Product_Category to delete.
     */
    where: Product_CategoryWhereUniqueInput
  }


  /**
   * Product_Category deleteMany
   */
  export type Product_CategoryDeleteManyArgs = {
    /**
     * Filter which Product_Categories to delete
     */
    where?: Product_CategoryWhereInput
  }


  /**
   * Product_Category without action
   */
  export type Product_CategoryArgs = {
    /**
     * Select specific fields to fetch from the Product_Category
     */
    select?: Product_CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Product_CategoryInclude | null
  }



  /**
   * Model Compra
   */


  export type AggregateCompra = {
    _count: CompraCountAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  export type CompraMinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type CompraMaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type CompraCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    street: number
    city: number
    state: number
    cep: number
    number: number
    district: number
    apartment_or_house: number
    created_at: number
    update_at: number
    code_compra: number
    productName: number
    productPrice: number
    productImage: number
    productSize: number
    productClolor: number
    productQuantity: number
    productUrl: number
    _all: number
  }


  export type CompraMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type CompraMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type CompraCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
    _all?: true
  }

  export type CompraAggregateArgs = {
    /**
     * Filter which Compra to aggregate.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compras
    **/
    _count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
        [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }




  export type CompraGroupByArgs = {
    where?: CompraWhereInput
    orderBy?: Enumerable<CompraOrderByWithAggregationInput>
    by: CompraScalarFieldEnum[]
    having?: CompraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraCountAggregateInputType | true
    _min?: CompraMinAggregateInputType
    _max?: CompraMaxAggregateInputType
  }


  export type CompraGroupByOutputType = {
    id: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at: Date
    update_at: Date
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
    _count: CompraCountAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends CompraGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraGroupByOutputType[P]>
            : GetScalarType<T[P], CompraGroupByOutputType[P]>
        }
      >
    >


  export type CompraSelect = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    cep?: boolean
    number?: boolean
    district?: boolean
    apartment_or_house?: boolean
    created_at?: boolean
    update_at?: boolean
    code_compra?: boolean
    productName?: boolean
    productPrice?: boolean
    productImage?: boolean
    productSize?: boolean
    productClolor?: boolean
    productQuantity?: boolean
    productUrl?: boolean
    comprarealations?: boolean | Compra$comprarealationsArgs
    _count?: boolean | CompraCountOutputTypeArgs
  }


  export type CompraInclude = {
    comprarealations?: boolean | Compra$comprarealationsArgs
    _count?: boolean | CompraCountOutputTypeArgs
  }

  export type CompraGetPayload<S extends boolean | null | undefined | CompraArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Compra :
    S extends undefined ? never :
    S extends { include: any } & (CompraArgs | CompraFindManyArgs)
    ? Compra  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comprarealations' ? Array < CompraRealationsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompraCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompraArgs | CompraFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comprarealations' ? Array < CompraRealationsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompraCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Compra ? Compra[P] : never
  } 
      : Compra


  type CompraCountArgs = 
    Omit<CompraFindManyArgs, 'select' | 'include'> & {
      select?: CompraCountAggregateInputType | true
    }

  export interface CompraDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Compra that matches the filter.
     * @param {CompraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompraFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompraFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Compra'> extends True ? Prisma__CompraClient<CompraGetPayload<T>> : Prisma__CompraClient<CompraGetPayload<T> | null, null>

    /**
     * Find one Compra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompraFindUniqueOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompraFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompraFindUniqueOrThrowArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompraFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompraFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Compra'> extends True ? Prisma__CompraClient<CompraGetPayload<T>> : Prisma__CompraClient<CompraGetPayload<T> | null, null>

    /**
     * Find the first Compra that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompraFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompraFindFirstOrThrowArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompraFindManyArgs>(
      args?: SelectSubset<T, CompraFindManyArgs>
    ): PrismaPromise<Array<CompraGetPayload<T>>>

    /**
     * Create a Compra.
     * @param {CompraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
    **/
    create<T extends CompraCreateArgs>(
      args: SelectSubset<T, CompraCreateArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Create many Compras.
     *     @param {CompraCreateManyArgs} args - Arguments to create many Compras.
     *     @example
     *     // Create many Compras
     *     const compra = await prisma.compra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompraCreateManyArgs>(
      args?: SelectSubset<T, CompraCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Compra.
     * @param {CompraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
    **/
    delete<T extends CompraDeleteArgs>(
      args: SelectSubset<T, CompraDeleteArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Update one Compra.
     * @param {CompraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompraUpdateArgs>(
      args: SelectSubset<T, CompraUpdateArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Delete zero or more Compras.
     * @param {CompraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompraDeleteManyArgs>(
      args?: SelectSubset<T, CompraDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompraUpdateManyArgs>(
      args: SelectSubset<T, CompraUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra.
     * @param {CompraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
    **/
    upsert<T extends CompraUpsertArgs>(
      args: SelectSubset<T, CompraUpsertArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends CompraCountArgs>(
      args?: Subset<T, CompraCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraGroupByArgs['orderBy'] }
        : { orderBy?: CompraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompraClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comprarealations<T extends Compra$comprarealationsArgs= {}>(args?: Subset<T, Compra$comprarealationsArgs>): PrismaPromise<Array<CompraRealationsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Compra base type for findUnique actions
   */
  export type CompraFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra findUnique
   */
  export interface CompraFindUniqueArgs extends CompraFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra findUniqueOrThrow
   */
  export type CompraFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra base type for findFirst actions
   */
  export type CompraFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: Enumerable<CompraScalarFieldEnum>
  }

  /**
   * Compra findFirst
   */
  export interface CompraFindFirstArgs extends CompraFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra findFirstOrThrow
   */
  export type CompraFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Compra findMany
   */
  export type CompraFindManyArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compras to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Compra create
   */
  export type CompraCreateArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The data needed to create a Compra.
     */
    data: XOR<CompraCreateInput, CompraUncheckedCreateInput>
  }


  /**
   * Compra createMany
   */
  export type CompraCreateManyArgs = {
    /**
     * The data used to create many Compras.
     */
    data: Enumerable<CompraCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Compra update
   */
  export type CompraUpdateArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The data needed to update a Compra.
     */
    data: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
    /**
     * Choose, which Compra to update.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra updateMany
   */
  export type CompraUpdateManyArgs = {
    /**
     * The data used to update Compras.
     */
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyInput>
    /**
     * Filter which Compras to update
     */
    where?: CompraWhereInput
  }


  /**
   * Compra upsert
   */
  export type CompraUpsertArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The filter to search for the Compra to update in case it exists.
     */
    where: CompraWhereUniqueInput
    /**
     * In case the Compra found by the `where` argument doesn't exist, create a new Compra with this data.
     */
    create: XOR<CompraCreateInput, CompraUncheckedCreateInput>
    /**
     * In case the Compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
  }


  /**
   * Compra delete
   */
  export type CompraDeleteArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter which Compra to delete.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra deleteMany
   */
  export type CompraDeleteManyArgs = {
    /**
     * Filter which Compras to delete
     */
    where?: CompraWhereInput
  }


  /**
   * Compra.comprarealations
   */
  export type Compra$comprarealationsArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    where?: CompraRealationsWhereInput
    orderBy?: Enumerable<CompraRealationsOrderByWithRelationInput>
    cursor?: CompraRealationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraRealationsScalarFieldEnum>
  }


  /**
   * Compra without action
   */
  export type CompraArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
  }



  /**
   * Model Compra1
   */


  export type AggregateCompra1 = {
    _count: Compra1CountAggregateOutputType | null
    _min: Compra1MinAggregateOutputType | null
    _max: Compra1MaxAggregateOutputType | null
  }

  export type Compra1MinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type Compra1MaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type Compra1CountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    street: number
    city: number
    state: number
    cep: number
    number: number
    district: number
    apartment_or_house: number
    created_at: number
    update_at: number
    code_compra: number
    productName: number
    productPrice: number
    productImage: number
    productSize: number
    productClolor: number
    productQuantity: number
    productUrl: number
    _all: number
  }


  export type Compra1MinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type Compra1MaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type Compra1CountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
    _all?: true
  }

  export type Compra1AggregateArgs = {
    /**
     * Filter which Compra1 to aggregate.
     */
    where?: Compra1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra1s to fetch.
     */
    orderBy?: Enumerable<Compra1OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Compra1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compra1s
    **/
    _count?: true | Compra1CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Compra1MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Compra1MaxAggregateInputType
  }

  export type GetCompra1AggregateType<T extends Compra1AggregateArgs> = {
        [P in keyof T & keyof AggregateCompra1]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra1[P]>
      : GetScalarType<T[P], AggregateCompra1[P]>
  }




  export type Compra1GroupByArgs = {
    where?: Compra1WhereInput
    orderBy?: Enumerable<Compra1OrderByWithAggregationInput>
    by: Compra1ScalarFieldEnum[]
    having?: Compra1ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Compra1CountAggregateInputType | true
    _min?: Compra1MinAggregateInputType
    _max?: Compra1MaxAggregateInputType
  }


  export type Compra1GroupByOutputType = {
    id: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at: Date
    update_at: Date
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
    _count: Compra1CountAggregateOutputType | null
    _min: Compra1MinAggregateOutputType | null
    _max: Compra1MaxAggregateOutputType | null
  }

  type GetCompra1GroupByPayload<T extends Compra1GroupByArgs> = PrismaPromise<
    Array<
      PickArray<Compra1GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Compra1GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Compra1GroupByOutputType[P]>
            : GetScalarType<T[P], Compra1GroupByOutputType[P]>
        }
      >
    >


  export type Compra1Select = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    cep?: boolean
    number?: boolean
    district?: boolean
    apartment_or_house?: boolean
    created_at?: boolean
    update_at?: boolean
    code_compra?: boolean
    productName?: boolean
    productPrice?: boolean
    productImage?: boolean
    productSize?: boolean
    productClolor?: boolean
    productQuantity?: boolean
    productUrl?: boolean
  }


  export type Compra1GetPayload<S extends boolean | null | undefined | Compra1Args> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Compra1 :
    S extends undefined ? never :
    S extends { include: any } & (Compra1Args | Compra1FindManyArgs)
    ? Compra1 
    : S extends { select: any } & (Compra1Args | Compra1FindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Compra1 ? Compra1[P] : never
  } 
      : Compra1


  type Compra1CountArgs = 
    Omit<Compra1FindManyArgs, 'select' | 'include'> & {
      select?: Compra1CountAggregateInputType | true
    }

  export interface Compra1Delegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Compra1 that matches the filter.
     * @param {Compra1FindUniqueArgs} args - Arguments to find a Compra1
     * @example
     * // Get one Compra1
     * const compra1 = await prisma.compra1.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Compra1FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Compra1FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Compra1'> extends True ? Prisma__Compra1Client<Compra1GetPayload<T>> : Prisma__Compra1Client<Compra1GetPayload<T> | null, null>

    /**
     * Find one Compra1 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Compra1FindUniqueOrThrowArgs} args - Arguments to find a Compra1
     * @example
     * // Get one Compra1
     * const compra1 = await prisma.compra1.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Compra1FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Compra1FindUniqueOrThrowArgs>
    ): Prisma__Compra1Client<Compra1GetPayload<T>>

    /**
     * Find the first Compra1 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra1FindFirstArgs} args - Arguments to find a Compra1
     * @example
     * // Get one Compra1
     * const compra1 = await prisma.compra1.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Compra1FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Compra1FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Compra1'> extends True ? Prisma__Compra1Client<Compra1GetPayload<T>> : Prisma__Compra1Client<Compra1GetPayload<T> | null, null>

    /**
     * Find the first Compra1 that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra1FindFirstOrThrowArgs} args - Arguments to find a Compra1
     * @example
     * // Get one Compra1
     * const compra1 = await prisma.compra1.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Compra1FindFirstOrThrowArgs>(
      args?: SelectSubset<T, Compra1FindFirstOrThrowArgs>
    ): Prisma__Compra1Client<Compra1GetPayload<T>>

    /**
     * Find zero or more Compra1s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra1FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compra1s
     * const compra1s = await prisma.compra1.findMany()
     * 
     * // Get first 10 Compra1s
     * const compra1s = await prisma.compra1.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compra1WithIdOnly = await prisma.compra1.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Compra1FindManyArgs>(
      args?: SelectSubset<T, Compra1FindManyArgs>
    ): PrismaPromise<Array<Compra1GetPayload<T>>>

    /**
     * Create a Compra1.
     * @param {Compra1CreateArgs} args - Arguments to create a Compra1.
     * @example
     * // Create one Compra1
     * const Compra1 = await prisma.compra1.create({
     *   data: {
     *     // ... data to create a Compra1
     *   }
     * })
     * 
    **/
    create<T extends Compra1CreateArgs>(
      args: SelectSubset<T, Compra1CreateArgs>
    ): Prisma__Compra1Client<Compra1GetPayload<T>>

    /**
     * Create many Compra1s.
     *     @param {Compra1CreateManyArgs} args - Arguments to create many Compra1s.
     *     @example
     *     // Create many Compra1s
     *     const compra1 = await prisma.compra1.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Compra1CreateManyArgs>(
      args?: SelectSubset<T, Compra1CreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Compra1.
     * @param {Compra1DeleteArgs} args - Arguments to delete one Compra1.
     * @example
     * // Delete one Compra1
     * const Compra1 = await prisma.compra1.delete({
     *   where: {
     *     // ... filter to delete one Compra1
     *   }
     * })
     * 
    **/
    delete<T extends Compra1DeleteArgs>(
      args: SelectSubset<T, Compra1DeleteArgs>
    ): Prisma__Compra1Client<Compra1GetPayload<T>>

    /**
     * Update one Compra1.
     * @param {Compra1UpdateArgs} args - Arguments to update one Compra1.
     * @example
     * // Update one Compra1
     * const compra1 = await prisma.compra1.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Compra1UpdateArgs>(
      args: SelectSubset<T, Compra1UpdateArgs>
    ): Prisma__Compra1Client<Compra1GetPayload<T>>

    /**
     * Delete zero or more Compra1s.
     * @param {Compra1DeleteManyArgs} args - Arguments to filter Compra1s to delete.
     * @example
     * // Delete a few Compra1s
     * const { count } = await prisma.compra1.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Compra1DeleteManyArgs>(
      args?: SelectSubset<T, Compra1DeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compra1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra1UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compra1s
     * const compra1 = await prisma.compra1.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Compra1UpdateManyArgs>(
      args: SelectSubset<T, Compra1UpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra1.
     * @param {Compra1UpsertArgs} args - Arguments to update or create a Compra1.
     * @example
     * // Update or create a Compra1
     * const compra1 = await prisma.compra1.upsert({
     *   create: {
     *     // ... data to create a Compra1
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra1 we want to update
     *   }
     * })
    **/
    upsert<T extends Compra1UpsertArgs>(
      args: SelectSubset<T, Compra1UpsertArgs>
    ): Prisma__Compra1Client<Compra1GetPayload<T>>

    /**
     * Count the number of Compra1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra1CountArgs} args - Arguments to filter Compra1s to count.
     * @example
     * // Count the number of Compra1s
     * const count = await prisma.compra1.count({
     *   where: {
     *     // ... the filter for the Compra1s we want to count
     *   }
     * })
    **/
    count<T extends Compra1CountArgs>(
      args?: Subset<T, Compra1CountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Compra1CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra1AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Compra1AggregateArgs>(args: Subset<T, Compra1AggregateArgs>): PrismaPromise<GetCompra1AggregateType<T>>

    /**
     * Group by Compra1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra1GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Compra1GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Compra1GroupByArgs['orderBy'] }
        : { orderBy?: Compra1GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Compra1GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompra1GroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra1.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Compra1Client<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Compra1 base type for findUnique actions
   */
  export type Compra1FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * Filter, which Compra1 to fetch.
     */
    where: Compra1WhereUniqueInput
  }

  /**
   * Compra1 findUnique
   */
  export interface Compra1FindUniqueArgs extends Compra1FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra1 findUniqueOrThrow
   */
  export type Compra1FindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * Filter, which Compra1 to fetch.
     */
    where: Compra1WhereUniqueInput
  }


  /**
   * Compra1 base type for findFirst actions
   */
  export type Compra1FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * Filter, which Compra1 to fetch.
     */
    where?: Compra1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra1s to fetch.
     */
    orderBy?: Enumerable<Compra1OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compra1s.
     */
    cursor?: Compra1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compra1s.
     */
    distinct?: Enumerable<Compra1ScalarFieldEnum>
  }

  /**
   * Compra1 findFirst
   */
  export interface Compra1FindFirstArgs extends Compra1FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra1 findFirstOrThrow
   */
  export type Compra1FindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * Filter, which Compra1 to fetch.
     */
    where?: Compra1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra1s to fetch.
     */
    orderBy?: Enumerable<Compra1OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compra1s.
     */
    cursor?: Compra1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compra1s.
     */
    distinct?: Enumerable<Compra1ScalarFieldEnum>
  }


  /**
   * Compra1 findMany
   */
  export type Compra1FindManyArgs = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * Filter, which Compra1s to fetch.
     */
    where?: Compra1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra1s to fetch.
     */
    orderBy?: Enumerable<Compra1OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compra1s.
     */
    cursor?: Compra1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra1s.
     */
    skip?: number
    distinct?: Enumerable<Compra1ScalarFieldEnum>
  }


  /**
   * Compra1 create
   */
  export type Compra1CreateArgs = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * The data needed to create a Compra1.
     */
    data: XOR<Compra1CreateInput, Compra1UncheckedCreateInput>
  }


  /**
   * Compra1 createMany
   */
  export type Compra1CreateManyArgs = {
    /**
     * The data used to create many Compra1s.
     */
    data: Enumerable<Compra1CreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Compra1 update
   */
  export type Compra1UpdateArgs = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * The data needed to update a Compra1.
     */
    data: XOR<Compra1UpdateInput, Compra1UncheckedUpdateInput>
    /**
     * Choose, which Compra1 to update.
     */
    where: Compra1WhereUniqueInput
  }


  /**
   * Compra1 updateMany
   */
  export type Compra1UpdateManyArgs = {
    /**
     * The data used to update Compra1s.
     */
    data: XOR<Compra1UpdateManyMutationInput, Compra1UncheckedUpdateManyInput>
    /**
     * Filter which Compra1s to update
     */
    where?: Compra1WhereInput
  }


  /**
   * Compra1 upsert
   */
  export type Compra1UpsertArgs = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * The filter to search for the Compra1 to update in case it exists.
     */
    where: Compra1WhereUniqueInput
    /**
     * In case the Compra1 found by the `where` argument doesn't exist, create a new Compra1 with this data.
     */
    create: XOR<Compra1CreateInput, Compra1UncheckedCreateInput>
    /**
     * In case the Compra1 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Compra1UpdateInput, Compra1UncheckedUpdateInput>
  }


  /**
   * Compra1 delete
   */
  export type Compra1DeleteArgs = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
    /**
     * Filter which Compra1 to delete.
     */
    where: Compra1WhereUniqueInput
  }


  /**
   * Compra1 deleteMany
   */
  export type Compra1DeleteManyArgs = {
    /**
     * Filter which Compra1s to delete
     */
    where?: Compra1WhereInput
  }


  /**
   * Compra1 without action
   */
  export type Compra1Args = {
    /**
     * Select specific fields to fetch from the Compra1
     */
    select?: Compra1Select | null
  }



  /**
   * Model Compra2
   */


  export type AggregateCompra2 = {
    _count: Compra2CountAggregateOutputType | null
    _min: Compra2MinAggregateOutputType | null
    _max: Compra2MaxAggregateOutputType | null
  }

  export type Compra2MinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type Compra2MaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type Compra2CountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    street: number
    city: number
    state: number
    cep: number
    number: number
    district: number
    apartment_or_house: number
    created_at: number
    update_at: number
    code_compra: number
    productName: number
    productPrice: number
    productImage: number
    productSize: number
    productClolor: number
    productQuantity: number
    productUrl: number
    _all: number
  }


  export type Compra2MinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type Compra2MaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type Compra2CountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
    _all?: true
  }

  export type Compra2AggregateArgs = {
    /**
     * Filter which Compra2 to aggregate.
     */
    where?: Compra2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra2s to fetch.
     */
    orderBy?: Enumerable<Compra2OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Compra2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compra2s
    **/
    _count?: true | Compra2CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Compra2MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Compra2MaxAggregateInputType
  }

  export type GetCompra2AggregateType<T extends Compra2AggregateArgs> = {
        [P in keyof T & keyof AggregateCompra2]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra2[P]>
      : GetScalarType<T[P], AggregateCompra2[P]>
  }




  export type Compra2GroupByArgs = {
    where?: Compra2WhereInput
    orderBy?: Enumerable<Compra2OrderByWithAggregationInput>
    by: Compra2ScalarFieldEnum[]
    having?: Compra2ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Compra2CountAggregateInputType | true
    _min?: Compra2MinAggregateInputType
    _max?: Compra2MaxAggregateInputType
  }


  export type Compra2GroupByOutputType = {
    id: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at: Date
    update_at: Date
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
    _count: Compra2CountAggregateOutputType | null
    _min: Compra2MinAggregateOutputType | null
    _max: Compra2MaxAggregateOutputType | null
  }

  type GetCompra2GroupByPayload<T extends Compra2GroupByArgs> = PrismaPromise<
    Array<
      PickArray<Compra2GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Compra2GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Compra2GroupByOutputType[P]>
            : GetScalarType<T[P], Compra2GroupByOutputType[P]>
        }
      >
    >


  export type Compra2Select = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    cep?: boolean
    number?: boolean
    district?: boolean
    apartment_or_house?: boolean
    created_at?: boolean
    update_at?: boolean
    code_compra?: boolean
    productName?: boolean
    productPrice?: boolean
    productImage?: boolean
    productSize?: boolean
    productClolor?: boolean
    productQuantity?: boolean
    productUrl?: boolean
  }


  export type Compra2GetPayload<S extends boolean | null | undefined | Compra2Args> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Compra2 :
    S extends undefined ? never :
    S extends { include: any } & (Compra2Args | Compra2FindManyArgs)
    ? Compra2 
    : S extends { select: any } & (Compra2Args | Compra2FindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Compra2 ? Compra2[P] : never
  } 
      : Compra2


  type Compra2CountArgs = 
    Omit<Compra2FindManyArgs, 'select' | 'include'> & {
      select?: Compra2CountAggregateInputType | true
    }

  export interface Compra2Delegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Compra2 that matches the filter.
     * @param {Compra2FindUniqueArgs} args - Arguments to find a Compra2
     * @example
     * // Get one Compra2
     * const compra2 = await prisma.compra2.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Compra2FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Compra2FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Compra2'> extends True ? Prisma__Compra2Client<Compra2GetPayload<T>> : Prisma__Compra2Client<Compra2GetPayload<T> | null, null>

    /**
     * Find one Compra2 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Compra2FindUniqueOrThrowArgs} args - Arguments to find a Compra2
     * @example
     * // Get one Compra2
     * const compra2 = await prisma.compra2.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Compra2FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Compra2FindUniqueOrThrowArgs>
    ): Prisma__Compra2Client<Compra2GetPayload<T>>

    /**
     * Find the first Compra2 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra2FindFirstArgs} args - Arguments to find a Compra2
     * @example
     * // Get one Compra2
     * const compra2 = await prisma.compra2.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Compra2FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Compra2FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Compra2'> extends True ? Prisma__Compra2Client<Compra2GetPayload<T>> : Prisma__Compra2Client<Compra2GetPayload<T> | null, null>

    /**
     * Find the first Compra2 that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra2FindFirstOrThrowArgs} args - Arguments to find a Compra2
     * @example
     * // Get one Compra2
     * const compra2 = await prisma.compra2.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Compra2FindFirstOrThrowArgs>(
      args?: SelectSubset<T, Compra2FindFirstOrThrowArgs>
    ): Prisma__Compra2Client<Compra2GetPayload<T>>

    /**
     * Find zero or more Compra2s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra2FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compra2s
     * const compra2s = await prisma.compra2.findMany()
     * 
     * // Get first 10 Compra2s
     * const compra2s = await prisma.compra2.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compra2WithIdOnly = await prisma.compra2.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Compra2FindManyArgs>(
      args?: SelectSubset<T, Compra2FindManyArgs>
    ): PrismaPromise<Array<Compra2GetPayload<T>>>

    /**
     * Create a Compra2.
     * @param {Compra2CreateArgs} args - Arguments to create a Compra2.
     * @example
     * // Create one Compra2
     * const Compra2 = await prisma.compra2.create({
     *   data: {
     *     // ... data to create a Compra2
     *   }
     * })
     * 
    **/
    create<T extends Compra2CreateArgs>(
      args: SelectSubset<T, Compra2CreateArgs>
    ): Prisma__Compra2Client<Compra2GetPayload<T>>

    /**
     * Create many Compra2s.
     *     @param {Compra2CreateManyArgs} args - Arguments to create many Compra2s.
     *     @example
     *     // Create many Compra2s
     *     const compra2 = await prisma.compra2.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Compra2CreateManyArgs>(
      args?: SelectSubset<T, Compra2CreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Compra2.
     * @param {Compra2DeleteArgs} args - Arguments to delete one Compra2.
     * @example
     * // Delete one Compra2
     * const Compra2 = await prisma.compra2.delete({
     *   where: {
     *     // ... filter to delete one Compra2
     *   }
     * })
     * 
    **/
    delete<T extends Compra2DeleteArgs>(
      args: SelectSubset<T, Compra2DeleteArgs>
    ): Prisma__Compra2Client<Compra2GetPayload<T>>

    /**
     * Update one Compra2.
     * @param {Compra2UpdateArgs} args - Arguments to update one Compra2.
     * @example
     * // Update one Compra2
     * const compra2 = await prisma.compra2.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Compra2UpdateArgs>(
      args: SelectSubset<T, Compra2UpdateArgs>
    ): Prisma__Compra2Client<Compra2GetPayload<T>>

    /**
     * Delete zero or more Compra2s.
     * @param {Compra2DeleteManyArgs} args - Arguments to filter Compra2s to delete.
     * @example
     * // Delete a few Compra2s
     * const { count } = await prisma.compra2.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Compra2DeleteManyArgs>(
      args?: SelectSubset<T, Compra2DeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compra2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra2UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compra2s
     * const compra2 = await prisma.compra2.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Compra2UpdateManyArgs>(
      args: SelectSubset<T, Compra2UpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra2.
     * @param {Compra2UpsertArgs} args - Arguments to update or create a Compra2.
     * @example
     * // Update or create a Compra2
     * const compra2 = await prisma.compra2.upsert({
     *   create: {
     *     // ... data to create a Compra2
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra2 we want to update
     *   }
     * })
    **/
    upsert<T extends Compra2UpsertArgs>(
      args: SelectSubset<T, Compra2UpsertArgs>
    ): Prisma__Compra2Client<Compra2GetPayload<T>>

    /**
     * Count the number of Compra2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra2CountArgs} args - Arguments to filter Compra2s to count.
     * @example
     * // Count the number of Compra2s
     * const count = await prisma.compra2.count({
     *   where: {
     *     // ... the filter for the Compra2s we want to count
     *   }
     * })
    **/
    count<T extends Compra2CountArgs>(
      args?: Subset<T, Compra2CountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Compra2CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra2AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Compra2AggregateArgs>(args: Subset<T, Compra2AggregateArgs>): PrismaPromise<GetCompra2AggregateType<T>>

    /**
     * Group by Compra2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra2GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Compra2GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Compra2GroupByArgs['orderBy'] }
        : { orderBy?: Compra2GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Compra2GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompra2GroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra2.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Compra2Client<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Compra2 base type for findUnique actions
   */
  export type Compra2FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * Filter, which Compra2 to fetch.
     */
    where: Compra2WhereUniqueInput
  }

  /**
   * Compra2 findUnique
   */
  export interface Compra2FindUniqueArgs extends Compra2FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra2 findUniqueOrThrow
   */
  export type Compra2FindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * Filter, which Compra2 to fetch.
     */
    where: Compra2WhereUniqueInput
  }


  /**
   * Compra2 base type for findFirst actions
   */
  export type Compra2FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * Filter, which Compra2 to fetch.
     */
    where?: Compra2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra2s to fetch.
     */
    orderBy?: Enumerable<Compra2OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compra2s.
     */
    cursor?: Compra2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compra2s.
     */
    distinct?: Enumerable<Compra2ScalarFieldEnum>
  }

  /**
   * Compra2 findFirst
   */
  export interface Compra2FindFirstArgs extends Compra2FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra2 findFirstOrThrow
   */
  export type Compra2FindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * Filter, which Compra2 to fetch.
     */
    where?: Compra2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra2s to fetch.
     */
    orderBy?: Enumerable<Compra2OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compra2s.
     */
    cursor?: Compra2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compra2s.
     */
    distinct?: Enumerable<Compra2ScalarFieldEnum>
  }


  /**
   * Compra2 findMany
   */
  export type Compra2FindManyArgs = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * Filter, which Compra2s to fetch.
     */
    where?: Compra2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra2s to fetch.
     */
    orderBy?: Enumerable<Compra2OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compra2s.
     */
    cursor?: Compra2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra2s.
     */
    skip?: number
    distinct?: Enumerable<Compra2ScalarFieldEnum>
  }


  /**
   * Compra2 create
   */
  export type Compra2CreateArgs = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * The data needed to create a Compra2.
     */
    data: XOR<Compra2CreateInput, Compra2UncheckedCreateInput>
  }


  /**
   * Compra2 createMany
   */
  export type Compra2CreateManyArgs = {
    /**
     * The data used to create many Compra2s.
     */
    data: Enumerable<Compra2CreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Compra2 update
   */
  export type Compra2UpdateArgs = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * The data needed to update a Compra2.
     */
    data: XOR<Compra2UpdateInput, Compra2UncheckedUpdateInput>
    /**
     * Choose, which Compra2 to update.
     */
    where: Compra2WhereUniqueInput
  }


  /**
   * Compra2 updateMany
   */
  export type Compra2UpdateManyArgs = {
    /**
     * The data used to update Compra2s.
     */
    data: XOR<Compra2UpdateManyMutationInput, Compra2UncheckedUpdateManyInput>
    /**
     * Filter which Compra2s to update
     */
    where?: Compra2WhereInput
  }


  /**
   * Compra2 upsert
   */
  export type Compra2UpsertArgs = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * The filter to search for the Compra2 to update in case it exists.
     */
    where: Compra2WhereUniqueInput
    /**
     * In case the Compra2 found by the `where` argument doesn't exist, create a new Compra2 with this data.
     */
    create: XOR<Compra2CreateInput, Compra2UncheckedCreateInput>
    /**
     * In case the Compra2 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Compra2UpdateInput, Compra2UncheckedUpdateInput>
  }


  /**
   * Compra2 delete
   */
  export type Compra2DeleteArgs = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
    /**
     * Filter which Compra2 to delete.
     */
    where: Compra2WhereUniqueInput
  }


  /**
   * Compra2 deleteMany
   */
  export type Compra2DeleteManyArgs = {
    /**
     * Filter which Compra2s to delete
     */
    where?: Compra2WhereInput
  }


  /**
   * Compra2 without action
   */
  export type Compra2Args = {
    /**
     * Select specific fields to fetch from the Compra2
     */
    select?: Compra2Select | null
  }



  /**
   * Model Compra3
   */


  export type AggregateCompra3 = {
    _count: Compra3CountAggregateOutputType | null
    _min: Compra3MinAggregateOutputType | null
    _max: Compra3MaxAggregateOutputType | null
  }

  export type Compra3MinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type Compra3MaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type Compra3CountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    street: number
    city: number
    state: number
    cep: number
    number: number
    district: number
    apartment_or_house: number
    created_at: number
    update_at: number
    code_compra: number
    productName: number
    productPrice: number
    productImage: number
    productSize: number
    productClolor: number
    productQuantity: number
    productUrl: number
    _all: number
  }


  export type Compra3MinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type Compra3MaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type Compra3CountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
    _all?: true
  }

  export type Compra3AggregateArgs = {
    /**
     * Filter which Compra3 to aggregate.
     */
    where?: Compra3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra3s to fetch.
     */
    orderBy?: Enumerable<Compra3OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Compra3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compra3s
    **/
    _count?: true | Compra3CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Compra3MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Compra3MaxAggregateInputType
  }

  export type GetCompra3AggregateType<T extends Compra3AggregateArgs> = {
        [P in keyof T & keyof AggregateCompra3]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra3[P]>
      : GetScalarType<T[P], AggregateCompra3[P]>
  }




  export type Compra3GroupByArgs = {
    where?: Compra3WhereInput
    orderBy?: Enumerable<Compra3OrderByWithAggregationInput>
    by: Compra3ScalarFieldEnum[]
    having?: Compra3ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Compra3CountAggregateInputType | true
    _min?: Compra3MinAggregateInputType
    _max?: Compra3MaxAggregateInputType
  }


  export type Compra3GroupByOutputType = {
    id: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at: Date
    update_at: Date
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
    _count: Compra3CountAggregateOutputType | null
    _min: Compra3MinAggregateOutputType | null
    _max: Compra3MaxAggregateOutputType | null
  }

  type GetCompra3GroupByPayload<T extends Compra3GroupByArgs> = PrismaPromise<
    Array<
      PickArray<Compra3GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Compra3GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Compra3GroupByOutputType[P]>
            : GetScalarType<T[P], Compra3GroupByOutputType[P]>
        }
      >
    >


  export type Compra3Select = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    cep?: boolean
    number?: boolean
    district?: boolean
    apartment_or_house?: boolean
    created_at?: boolean
    update_at?: boolean
    code_compra?: boolean
    productName?: boolean
    productPrice?: boolean
    productImage?: boolean
    productSize?: boolean
    productClolor?: boolean
    productQuantity?: boolean
    productUrl?: boolean
  }


  export type Compra3GetPayload<S extends boolean | null | undefined | Compra3Args> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Compra3 :
    S extends undefined ? never :
    S extends { include: any } & (Compra3Args | Compra3FindManyArgs)
    ? Compra3 
    : S extends { select: any } & (Compra3Args | Compra3FindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Compra3 ? Compra3[P] : never
  } 
      : Compra3


  type Compra3CountArgs = 
    Omit<Compra3FindManyArgs, 'select' | 'include'> & {
      select?: Compra3CountAggregateInputType | true
    }

  export interface Compra3Delegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Compra3 that matches the filter.
     * @param {Compra3FindUniqueArgs} args - Arguments to find a Compra3
     * @example
     * // Get one Compra3
     * const compra3 = await prisma.compra3.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Compra3FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Compra3FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Compra3'> extends True ? Prisma__Compra3Client<Compra3GetPayload<T>> : Prisma__Compra3Client<Compra3GetPayload<T> | null, null>

    /**
     * Find one Compra3 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Compra3FindUniqueOrThrowArgs} args - Arguments to find a Compra3
     * @example
     * // Get one Compra3
     * const compra3 = await prisma.compra3.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Compra3FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Compra3FindUniqueOrThrowArgs>
    ): Prisma__Compra3Client<Compra3GetPayload<T>>

    /**
     * Find the first Compra3 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra3FindFirstArgs} args - Arguments to find a Compra3
     * @example
     * // Get one Compra3
     * const compra3 = await prisma.compra3.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Compra3FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Compra3FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Compra3'> extends True ? Prisma__Compra3Client<Compra3GetPayload<T>> : Prisma__Compra3Client<Compra3GetPayload<T> | null, null>

    /**
     * Find the first Compra3 that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra3FindFirstOrThrowArgs} args - Arguments to find a Compra3
     * @example
     * // Get one Compra3
     * const compra3 = await prisma.compra3.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Compra3FindFirstOrThrowArgs>(
      args?: SelectSubset<T, Compra3FindFirstOrThrowArgs>
    ): Prisma__Compra3Client<Compra3GetPayload<T>>

    /**
     * Find zero or more Compra3s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra3FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compra3s
     * const compra3s = await prisma.compra3.findMany()
     * 
     * // Get first 10 Compra3s
     * const compra3s = await prisma.compra3.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compra3WithIdOnly = await prisma.compra3.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Compra3FindManyArgs>(
      args?: SelectSubset<T, Compra3FindManyArgs>
    ): PrismaPromise<Array<Compra3GetPayload<T>>>

    /**
     * Create a Compra3.
     * @param {Compra3CreateArgs} args - Arguments to create a Compra3.
     * @example
     * // Create one Compra3
     * const Compra3 = await prisma.compra3.create({
     *   data: {
     *     // ... data to create a Compra3
     *   }
     * })
     * 
    **/
    create<T extends Compra3CreateArgs>(
      args: SelectSubset<T, Compra3CreateArgs>
    ): Prisma__Compra3Client<Compra3GetPayload<T>>

    /**
     * Create many Compra3s.
     *     @param {Compra3CreateManyArgs} args - Arguments to create many Compra3s.
     *     @example
     *     // Create many Compra3s
     *     const compra3 = await prisma.compra3.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Compra3CreateManyArgs>(
      args?: SelectSubset<T, Compra3CreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Compra3.
     * @param {Compra3DeleteArgs} args - Arguments to delete one Compra3.
     * @example
     * // Delete one Compra3
     * const Compra3 = await prisma.compra3.delete({
     *   where: {
     *     // ... filter to delete one Compra3
     *   }
     * })
     * 
    **/
    delete<T extends Compra3DeleteArgs>(
      args: SelectSubset<T, Compra3DeleteArgs>
    ): Prisma__Compra3Client<Compra3GetPayload<T>>

    /**
     * Update one Compra3.
     * @param {Compra3UpdateArgs} args - Arguments to update one Compra3.
     * @example
     * // Update one Compra3
     * const compra3 = await prisma.compra3.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Compra3UpdateArgs>(
      args: SelectSubset<T, Compra3UpdateArgs>
    ): Prisma__Compra3Client<Compra3GetPayload<T>>

    /**
     * Delete zero or more Compra3s.
     * @param {Compra3DeleteManyArgs} args - Arguments to filter Compra3s to delete.
     * @example
     * // Delete a few Compra3s
     * const { count } = await prisma.compra3.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Compra3DeleteManyArgs>(
      args?: SelectSubset<T, Compra3DeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compra3s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra3UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compra3s
     * const compra3 = await prisma.compra3.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Compra3UpdateManyArgs>(
      args: SelectSubset<T, Compra3UpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra3.
     * @param {Compra3UpsertArgs} args - Arguments to update or create a Compra3.
     * @example
     * // Update or create a Compra3
     * const compra3 = await prisma.compra3.upsert({
     *   create: {
     *     // ... data to create a Compra3
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra3 we want to update
     *   }
     * })
    **/
    upsert<T extends Compra3UpsertArgs>(
      args: SelectSubset<T, Compra3UpsertArgs>
    ): Prisma__Compra3Client<Compra3GetPayload<T>>

    /**
     * Count the number of Compra3s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra3CountArgs} args - Arguments to filter Compra3s to count.
     * @example
     * // Count the number of Compra3s
     * const count = await prisma.compra3.count({
     *   where: {
     *     // ... the filter for the Compra3s we want to count
     *   }
     * })
    **/
    count<T extends Compra3CountArgs>(
      args?: Subset<T, Compra3CountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Compra3CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra3.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra3AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Compra3AggregateArgs>(args: Subset<T, Compra3AggregateArgs>): PrismaPromise<GetCompra3AggregateType<T>>

    /**
     * Group by Compra3.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra3GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Compra3GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Compra3GroupByArgs['orderBy'] }
        : { orderBy?: Compra3GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Compra3GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompra3GroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra3.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Compra3Client<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Compra3 base type for findUnique actions
   */
  export type Compra3FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * Filter, which Compra3 to fetch.
     */
    where: Compra3WhereUniqueInput
  }

  /**
   * Compra3 findUnique
   */
  export interface Compra3FindUniqueArgs extends Compra3FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra3 findUniqueOrThrow
   */
  export type Compra3FindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * Filter, which Compra3 to fetch.
     */
    where: Compra3WhereUniqueInput
  }


  /**
   * Compra3 base type for findFirst actions
   */
  export type Compra3FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * Filter, which Compra3 to fetch.
     */
    where?: Compra3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra3s to fetch.
     */
    orderBy?: Enumerable<Compra3OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compra3s.
     */
    cursor?: Compra3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compra3s.
     */
    distinct?: Enumerable<Compra3ScalarFieldEnum>
  }

  /**
   * Compra3 findFirst
   */
  export interface Compra3FindFirstArgs extends Compra3FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra3 findFirstOrThrow
   */
  export type Compra3FindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * Filter, which Compra3 to fetch.
     */
    where?: Compra3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra3s to fetch.
     */
    orderBy?: Enumerable<Compra3OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compra3s.
     */
    cursor?: Compra3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra3s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compra3s.
     */
    distinct?: Enumerable<Compra3ScalarFieldEnum>
  }


  /**
   * Compra3 findMany
   */
  export type Compra3FindManyArgs = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * Filter, which Compra3s to fetch.
     */
    where?: Compra3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra3s to fetch.
     */
    orderBy?: Enumerable<Compra3OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compra3s.
     */
    cursor?: Compra3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra3s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra3s.
     */
    skip?: number
    distinct?: Enumerable<Compra3ScalarFieldEnum>
  }


  /**
   * Compra3 create
   */
  export type Compra3CreateArgs = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * The data needed to create a Compra3.
     */
    data: XOR<Compra3CreateInput, Compra3UncheckedCreateInput>
  }


  /**
   * Compra3 createMany
   */
  export type Compra3CreateManyArgs = {
    /**
     * The data used to create many Compra3s.
     */
    data: Enumerable<Compra3CreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Compra3 update
   */
  export type Compra3UpdateArgs = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * The data needed to update a Compra3.
     */
    data: XOR<Compra3UpdateInput, Compra3UncheckedUpdateInput>
    /**
     * Choose, which Compra3 to update.
     */
    where: Compra3WhereUniqueInput
  }


  /**
   * Compra3 updateMany
   */
  export type Compra3UpdateManyArgs = {
    /**
     * The data used to update Compra3s.
     */
    data: XOR<Compra3UpdateManyMutationInput, Compra3UncheckedUpdateManyInput>
    /**
     * Filter which Compra3s to update
     */
    where?: Compra3WhereInput
  }


  /**
   * Compra3 upsert
   */
  export type Compra3UpsertArgs = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * The filter to search for the Compra3 to update in case it exists.
     */
    where: Compra3WhereUniqueInput
    /**
     * In case the Compra3 found by the `where` argument doesn't exist, create a new Compra3 with this data.
     */
    create: XOR<Compra3CreateInput, Compra3UncheckedCreateInput>
    /**
     * In case the Compra3 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Compra3UpdateInput, Compra3UncheckedUpdateInput>
  }


  /**
   * Compra3 delete
   */
  export type Compra3DeleteArgs = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
    /**
     * Filter which Compra3 to delete.
     */
    where: Compra3WhereUniqueInput
  }


  /**
   * Compra3 deleteMany
   */
  export type Compra3DeleteManyArgs = {
    /**
     * Filter which Compra3s to delete
     */
    where?: Compra3WhereInput
  }


  /**
   * Compra3 without action
   */
  export type Compra3Args = {
    /**
     * Select specific fields to fetch from the Compra3
     */
    select?: Compra3Select | null
  }



  /**
   * Model Compra4
   */


  export type AggregateCompra4 = {
    _count: Compra4CountAggregateOutputType | null
    _min: Compra4MinAggregateOutputType | null
    _max: Compra4MaxAggregateOutputType | null
  }

  export type Compra4MinAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type Compra4MaxAggregateOutputType = {
    id: string | null
    name: string | null
    phone: string | null
    email: string | null
    street: string | null
    city: string | null
    state: string | null
    cep: string | null
    number: string | null
    district: string | null
    apartment_or_house: string | null
    created_at: Date | null
    update_at: Date | null
    code_compra: string | null
    productName: string | null
    productPrice: string | null
    productImage: string | null
    productSize: string | null
    productClolor: string | null
    productQuantity: string | null
    productUrl: string | null
  }

  export type Compra4CountAggregateOutputType = {
    id: number
    name: number
    phone: number
    email: number
    street: number
    city: number
    state: number
    cep: number
    number: number
    district: number
    apartment_or_house: number
    created_at: number
    update_at: number
    code_compra: number
    productName: number
    productPrice: number
    productImage: number
    productSize: number
    productClolor: number
    productQuantity: number
    productUrl: number
    _all: number
  }


  export type Compra4MinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type Compra4MaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
  }

  export type Compra4CountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    email?: true
    street?: true
    city?: true
    state?: true
    cep?: true
    number?: true
    district?: true
    apartment_or_house?: true
    created_at?: true
    update_at?: true
    code_compra?: true
    productName?: true
    productPrice?: true
    productImage?: true
    productSize?: true
    productClolor?: true
    productQuantity?: true
    productUrl?: true
    _all?: true
  }

  export type Compra4AggregateArgs = {
    /**
     * Filter which Compra4 to aggregate.
     */
    where?: Compra4WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra4s to fetch.
     */
    orderBy?: Enumerable<Compra4OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Compra4WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra4s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra4s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compra4s
    **/
    _count?: true | Compra4CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Compra4MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Compra4MaxAggregateInputType
  }

  export type GetCompra4AggregateType<T extends Compra4AggregateArgs> = {
        [P in keyof T & keyof AggregateCompra4]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra4[P]>
      : GetScalarType<T[P], AggregateCompra4[P]>
  }




  export type Compra4GroupByArgs = {
    where?: Compra4WhereInput
    orderBy?: Enumerable<Compra4OrderByWithAggregationInput>
    by: Compra4ScalarFieldEnum[]
    having?: Compra4ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Compra4CountAggregateInputType | true
    _min?: Compra4MinAggregateInputType
    _max?: Compra4MaxAggregateInputType
  }


  export type Compra4GroupByOutputType = {
    id: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at: Date
    update_at: Date
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
    _count: Compra4CountAggregateOutputType | null
    _min: Compra4MinAggregateOutputType | null
    _max: Compra4MaxAggregateOutputType | null
  }

  type GetCompra4GroupByPayload<T extends Compra4GroupByArgs> = PrismaPromise<
    Array<
      PickArray<Compra4GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Compra4GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Compra4GroupByOutputType[P]>
            : GetScalarType<T[P], Compra4GroupByOutputType[P]>
        }
      >
    >


  export type Compra4Select = {
    id?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    cep?: boolean
    number?: boolean
    district?: boolean
    apartment_or_house?: boolean
    created_at?: boolean
    update_at?: boolean
    code_compra?: boolean
    productName?: boolean
    productPrice?: boolean
    productImage?: boolean
    productSize?: boolean
    productClolor?: boolean
    productQuantity?: boolean
    productUrl?: boolean
  }


  export type Compra4GetPayload<S extends boolean | null | undefined | Compra4Args> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Compra4 :
    S extends undefined ? never :
    S extends { include: any } & (Compra4Args | Compra4FindManyArgs)
    ? Compra4 
    : S extends { select: any } & (Compra4Args | Compra4FindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Compra4 ? Compra4[P] : never
  } 
      : Compra4


  type Compra4CountArgs = 
    Omit<Compra4FindManyArgs, 'select' | 'include'> & {
      select?: Compra4CountAggregateInputType | true
    }

  export interface Compra4Delegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Compra4 that matches the filter.
     * @param {Compra4FindUniqueArgs} args - Arguments to find a Compra4
     * @example
     * // Get one Compra4
     * const compra4 = await prisma.compra4.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Compra4FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Compra4FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Compra4'> extends True ? Prisma__Compra4Client<Compra4GetPayload<T>> : Prisma__Compra4Client<Compra4GetPayload<T> | null, null>

    /**
     * Find one Compra4 that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Compra4FindUniqueOrThrowArgs} args - Arguments to find a Compra4
     * @example
     * // Get one Compra4
     * const compra4 = await prisma.compra4.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Compra4FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Compra4FindUniqueOrThrowArgs>
    ): Prisma__Compra4Client<Compra4GetPayload<T>>

    /**
     * Find the first Compra4 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra4FindFirstArgs} args - Arguments to find a Compra4
     * @example
     * // Get one Compra4
     * const compra4 = await prisma.compra4.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Compra4FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Compra4FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Compra4'> extends True ? Prisma__Compra4Client<Compra4GetPayload<T>> : Prisma__Compra4Client<Compra4GetPayload<T> | null, null>

    /**
     * Find the first Compra4 that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra4FindFirstOrThrowArgs} args - Arguments to find a Compra4
     * @example
     * // Get one Compra4
     * const compra4 = await prisma.compra4.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Compra4FindFirstOrThrowArgs>(
      args?: SelectSubset<T, Compra4FindFirstOrThrowArgs>
    ): Prisma__Compra4Client<Compra4GetPayload<T>>

    /**
     * Find zero or more Compra4s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra4FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compra4s
     * const compra4s = await prisma.compra4.findMany()
     * 
     * // Get first 10 Compra4s
     * const compra4s = await prisma.compra4.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compra4WithIdOnly = await prisma.compra4.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Compra4FindManyArgs>(
      args?: SelectSubset<T, Compra4FindManyArgs>
    ): PrismaPromise<Array<Compra4GetPayload<T>>>

    /**
     * Create a Compra4.
     * @param {Compra4CreateArgs} args - Arguments to create a Compra4.
     * @example
     * // Create one Compra4
     * const Compra4 = await prisma.compra4.create({
     *   data: {
     *     // ... data to create a Compra4
     *   }
     * })
     * 
    **/
    create<T extends Compra4CreateArgs>(
      args: SelectSubset<T, Compra4CreateArgs>
    ): Prisma__Compra4Client<Compra4GetPayload<T>>

    /**
     * Create many Compra4s.
     *     @param {Compra4CreateManyArgs} args - Arguments to create many Compra4s.
     *     @example
     *     // Create many Compra4s
     *     const compra4 = await prisma.compra4.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Compra4CreateManyArgs>(
      args?: SelectSubset<T, Compra4CreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Compra4.
     * @param {Compra4DeleteArgs} args - Arguments to delete one Compra4.
     * @example
     * // Delete one Compra4
     * const Compra4 = await prisma.compra4.delete({
     *   where: {
     *     // ... filter to delete one Compra4
     *   }
     * })
     * 
    **/
    delete<T extends Compra4DeleteArgs>(
      args: SelectSubset<T, Compra4DeleteArgs>
    ): Prisma__Compra4Client<Compra4GetPayload<T>>

    /**
     * Update one Compra4.
     * @param {Compra4UpdateArgs} args - Arguments to update one Compra4.
     * @example
     * // Update one Compra4
     * const compra4 = await prisma.compra4.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Compra4UpdateArgs>(
      args: SelectSubset<T, Compra4UpdateArgs>
    ): Prisma__Compra4Client<Compra4GetPayload<T>>

    /**
     * Delete zero or more Compra4s.
     * @param {Compra4DeleteManyArgs} args - Arguments to filter Compra4s to delete.
     * @example
     * // Delete a few Compra4s
     * const { count } = await prisma.compra4.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Compra4DeleteManyArgs>(
      args?: SelectSubset<T, Compra4DeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compra4s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra4UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compra4s
     * const compra4 = await prisma.compra4.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Compra4UpdateManyArgs>(
      args: SelectSubset<T, Compra4UpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra4.
     * @param {Compra4UpsertArgs} args - Arguments to update or create a Compra4.
     * @example
     * // Update or create a Compra4
     * const compra4 = await prisma.compra4.upsert({
     *   create: {
     *     // ... data to create a Compra4
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra4 we want to update
     *   }
     * })
    **/
    upsert<T extends Compra4UpsertArgs>(
      args: SelectSubset<T, Compra4UpsertArgs>
    ): Prisma__Compra4Client<Compra4GetPayload<T>>

    /**
     * Count the number of Compra4s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra4CountArgs} args - Arguments to filter Compra4s to count.
     * @example
     * // Count the number of Compra4s
     * const count = await prisma.compra4.count({
     *   where: {
     *     // ... the filter for the Compra4s we want to count
     *   }
     * })
    **/
    count<T extends Compra4CountArgs>(
      args?: Subset<T, Compra4CountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Compra4CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra4.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra4AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Compra4AggregateArgs>(args: Subset<T, Compra4AggregateArgs>): PrismaPromise<GetCompra4AggregateType<T>>

    /**
     * Group by Compra4.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compra4GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Compra4GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Compra4GroupByArgs['orderBy'] }
        : { orderBy?: Compra4GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Compra4GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompra4GroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra4.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Compra4Client<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Compra4 base type for findUnique actions
   */
  export type Compra4FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * Filter, which Compra4 to fetch.
     */
    where: Compra4WhereUniqueInput
  }

  /**
   * Compra4 findUnique
   */
  export interface Compra4FindUniqueArgs extends Compra4FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra4 findUniqueOrThrow
   */
  export type Compra4FindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * Filter, which Compra4 to fetch.
     */
    where: Compra4WhereUniqueInput
  }


  /**
   * Compra4 base type for findFirst actions
   */
  export type Compra4FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * Filter, which Compra4 to fetch.
     */
    where?: Compra4WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra4s to fetch.
     */
    orderBy?: Enumerable<Compra4OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compra4s.
     */
    cursor?: Compra4WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra4s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra4s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compra4s.
     */
    distinct?: Enumerable<Compra4ScalarFieldEnum>
  }

  /**
   * Compra4 findFirst
   */
  export interface Compra4FindFirstArgs extends Compra4FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra4 findFirstOrThrow
   */
  export type Compra4FindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * Filter, which Compra4 to fetch.
     */
    where?: Compra4WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra4s to fetch.
     */
    orderBy?: Enumerable<Compra4OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compra4s.
     */
    cursor?: Compra4WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra4s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra4s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compra4s.
     */
    distinct?: Enumerable<Compra4ScalarFieldEnum>
  }


  /**
   * Compra4 findMany
   */
  export type Compra4FindManyArgs = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * Filter, which Compra4s to fetch.
     */
    where?: Compra4WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compra4s to fetch.
     */
    orderBy?: Enumerable<Compra4OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compra4s.
     */
    cursor?: Compra4WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compra4s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compra4s.
     */
    skip?: number
    distinct?: Enumerable<Compra4ScalarFieldEnum>
  }


  /**
   * Compra4 create
   */
  export type Compra4CreateArgs = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * The data needed to create a Compra4.
     */
    data: XOR<Compra4CreateInput, Compra4UncheckedCreateInput>
  }


  /**
   * Compra4 createMany
   */
  export type Compra4CreateManyArgs = {
    /**
     * The data used to create many Compra4s.
     */
    data: Enumerable<Compra4CreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Compra4 update
   */
  export type Compra4UpdateArgs = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * The data needed to update a Compra4.
     */
    data: XOR<Compra4UpdateInput, Compra4UncheckedUpdateInput>
    /**
     * Choose, which Compra4 to update.
     */
    where: Compra4WhereUniqueInput
  }


  /**
   * Compra4 updateMany
   */
  export type Compra4UpdateManyArgs = {
    /**
     * The data used to update Compra4s.
     */
    data: XOR<Compra4UpdateManyMutationInput, Compra4UncheckedUpdateManyInput>
    /**
     * Filter which Compra4s to update
     */
    where?: Compra4WhereInput
  }


  /**
   * Compra4 upsert
   */
  export type Compra4UpsertArgs = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * The filter to search for the Compra4 to update in case it exists.
     */
    where: Compra4WhereUniqueInput
    /**
     * In case the Compra4 found by the `where` argument doesn't exist, create a new Compra4 with this data.
     */
    create: XOR<Compra4CreateInput, Compra4UncheckedCreateInput>
    /**
     * In case the Compra4 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Compra4UpdateInput, Compra4UncheckedUpdateInput>
  }


  /**
   * Compra4 delete
   */
  export type Compra4DeleteArgs = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
    /**
     * Filter which Compra4 to delete.
     */
    where: Compra4WhereUniqueInput
  }


  /**
   * Compra4 deleteMany
   */
  export type Compra4DeleteManyArgs = {
    /**
     * Filter which Compra4s to delete
     */
    where?: Compra4WhereInput
  }


  /**
   * Compra4 without action
   */
  export type Compra4Args = {
    /**
     * Select specific fields to fetch from the Compra4
     */
    select?: Compra4Select | null
  }



  /**
   * Model CompraRealations
   */


  export type AggregateCompraRealations = {
    _count: CompraRealationsCountAggregateOutputType | null
    _min: CompraRealationsMinAggregateOutputType | null
    _max: CompraRealationsMaxAggregateOutputType | null
  }

  export type CompraRealationsMinAggregateOutputType = {
    id: string | null
    id_products: string | null
    id_compra: string | null
  }

  export type CompraRealationsMaxAggregateOutputType = {
    id: string | null
    id_products: string | null
    id_compra: string | null
  }

  export type CompraRealationsCountAggregateOutputType = {
    id: number
    id_products: number
    id_compra: number
    _all: number
  }


  export type CompraRealationsMinAggregateInputType = {
    id?: true
    id_products?: true
    id_compra?: true
  }

  export type CompraRealationsMaxAggregateInputType = {
    id?: true
    id_products?: true
    id_compra?: true
  }

  export type CompraRealationsCountAggregateInputType = {
    id?: true
    id_products?: true
    id_compra?: true
    _all?: true
  }

  export type CompraRealationsAggregateArgs = {
    /**
     * Filter which CompraRealations to aggregate.
     */
    where?: CompraRealationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraRealations to fetch.
     */
    orderBy?: Enumerable<CompraRealationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraRealationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraRealations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraRealations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompraRealations
    **/
    _count?: true | CompraRealationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraRealationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraRealationsMaxAggregateInputType
  }

  export type GetCompraRealationsAggregateType<T extends CompraRealationsAggregateArgs> = {
        [P in keyof T & keyof AggregateCompraRealations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompraRealations[P]>
      : GetScalarType<T[P], AggregateCompraRealations[P]>
  }




  export type CompraRealationsGroupByArgs = {
    where?: CompraRealationsWhereInput
    orderBy?: Enumerable<CompraRealationsOrderByWithAggregationInput>
    by: CompraRealationsScalarFieldEnum[]
    having?: CompraRealationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraRealationsCountAggregateInputType | true
    _min?: CompraRealationsMinAggregateInputType
    _max?: CompraRealationsMaxAggregateInputType
  }


  export type CompraRealationsGroupByOutputType = {
    id: string
    id_products: string
    id_compra: string
    _count: CompraRealationsCountAggregateOutputType | null
    _min: CompraRealationsMinAggregateOutputType | null
    _max: CompraRealationsMaxAggregateOutputType | null
  }

  type GetCompraRealationsGroupByPayload<T extends CompraRealationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CompraRealationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraRealationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraRealationsGroupByOutputType[P]>
            : GetScalarType<T[P], CompraRealationsGroupByOutputType[P]>
        }
      >
    >


  export type CompraRealationsSelect = {
    id?: boolean
    id_products?: boolean
    id_compra?: boolean
    compra?: boolean | CompraArgs
    product?: boolean | ProductArgs
  }


  export type CompraRealationsInclude = {
    compra?: boolean | CompraArgs
    product?: boolean | ProductArgs
  }

  export type CompraRealationsGetPayload<S extends boolean | null | undefined | CompraRealationsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompraRealations :
    S extends undefined ? never :
    S extends { include: any } & (CompraRealationsArgs | CompraRealationsFindManyArgs)
    ? CompraRealations  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'compra' ? CompraGetPayload<S['include'][P]> :
        P extends 'product' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompraRealationsArgs | CompraRealationsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'compra' ? CompraGetPayload<S['select'][P]> :
        P extends 'product' ? ProductGetPayload<S['select'][P]> :  P extends keyof CompraRealations ? CompraRealations[P] : never
  } 
      : CompraRealations


  type CompraRealationsCountArgs = 
    Omit<CompraRealationsFindManyArgs, 'select' | 'include'> & {
      select?: CompraRealationsCountAggregateInputType | true
    }

  export interface CompraRealationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CompraRealations that matches the filter.
     * @param {CompraRealationsFindUniqueArgs} args - Arguments to find a CompraRealations
     * @example
     * // Get one CompraRealations
     * const compraRealations = await prisma.compraRealations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompraRealationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompraRealationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CompraRealations'> extends True ? Prisma__CompraRealationsClient<CompraRealationsGetPayload<T>> : Prisma__CompraRealationsClient<CompraRealationsGetPayload<T> | null, null>

    /**
     * Find one CompraRealations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompraRealationsFindUniqueOrThrowArgs} args - Arguments to find a CompraRealations
     * @example
     * // Get one CompraRealations
     * const compraRealations = await prisma.compraRealations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompraRealationsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompraRealationsFindUniqueOrThrowArgs>
    ): Prisma__CompraRealationsClient<CompraRealationsGetPayload<T>>

    /**
     * Find the first CompraRealations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRealationsFindFirstArgs} args - Arguments to find a CompraRealations
     * @example
     * // Get one CompraRealations
     * const compraRealations = await prisma.compraRealations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompraRealationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompraRealationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CompraRealations'> extends True ? Prisma__CompraRealationsClient<CompraRealationsGetPayload<T>> : Prisma__CompraRealationsClient<CompraRealationsGetPayload<T> | null, null>

    /**
     * Find the first CompraRealations that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRealationsFindFirstOrThrowArgs} args - Arguments to find a CompraRealations
     * @example
     * // Get one CompraRealations
     * const compraRealations = await prisma.compraRealations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompraRealationsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompraRealationsFindFirstOrThrowArgs>
    ): Prisma__CompraRealationsClient<CompraRealationsGetPayload<T>>

    /**
     * Find zero or more CompraRealations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRealationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompraRealations
     * const compraRealations = await prisma.compraRealations.findMany()
     * 
     * // Get first 10 CompraRealations
     * const compraRealations = await prisma.compraRealations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraRealationsWithIdOnly = await prisma.compraRealations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompraRealationsFindManyArgs>(
      args?: SelectSubset<T, CompraRealationsFindManyArgs>
    ): PrismaPromise<Array<CompraRealationsGetPayload<T>>>

    /**
     * Create a CompraRealations.
     * @param {CompraRealationsCreateArgs} args - Arguments to create a CompraRealations.
     * @example
     * // Create one CompraRealations
     * const CompraRealations = await prisma.compraRealations.create({
     *   data: {
     *     // ... data to create a CompraRealations
     *   }
     * })
     * 
    **/
    create<T extends CompraRealationsCreateArgs>(
      args: SelectSubset<T, CompraRealationsCreateArgs>
    ): Prisma__CompraRealationsClient<CompraRealationsGetPayload<T>>

    /**
     * Create many CompraRealations.
     *     @param {CompraRealationsCreateManyArgs} args - Arguments to create many CompraRealations.
     *     @example
     *     // Create many CompraRealations
     *     const compraRealations = await prisma.compraRealations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompraRealationsCreateManyArgs>(
      args?: SelectSubset<T, CompraRealationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CompraRealations.
     * @param {CompraRealationsDeleteArgs} args - Arguments to delete one CompraRealations.
     * @example
     * // Delete one CompraRealations
     * const CompraRealations = await prisma.compraRealations.delete({
     *   where: {
     *     // ... filter to delete one CompraRealations
     *   }
     * })
     * 
    **/
    delete<T extends CompraRealationsDeleteArgs>(
      args: SelectSubset<T, CompraRealationsDeleteArgs>
    ): Prisma__CompraRealationsClient<CompraRealationsGetPayload<T>>

    /**
     * Update one CompraRealations.
     * @param {CompraRealationsUpdateArgs} args - Arguments to update one CompraRealations.
     * @example
     * // Update one CompraRealations
     * const compraRealations = await prisma.compraRealations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompraRealationsUpdateArgs>(
      args: SelectSubset<T, CompraRealationsUpdateArgs>
    ): Prisma__CompraRealationsClient<CompraRealationsGetPayload<T>>

    /**
     * Delete zero or more CompraRealations.
     * @param {CompraRealationsDeleteManyArgs} args - Arguments to filter CompraRealations to delete.
     * @example
     * // Delete a few CompraRealations
     * const { count } = await prisma.compraRealations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompraRealationsDeleteManyArgs>(
      args?: SelectSubset<T, CompraRealationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompraRealations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRealationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompraRealations
     * const compraRealations = await prisma.compraRealations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompraRealationsUpdateManyArgs>(
      args: SelectSubset<T, CompraRealationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CompraRealations.
     * @param {CompraRealationsUpsertArgs} args - Arguments to update or create a CompraRealations.
     * @example
     * // Update or create a CompraRealations
     * const compraRealations = await prisma.compraRealations.upsert({
     *   create: {
     *     // ... data to create a CompraRealations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompraRealations we want to update
     *   }
     * })
    **/
    upsert<T extends CompraRealationsUpsertArgs>(
      args: SelectSubset<T, CompraRealationsUpsertArgs>
    ): Prisma__CompraRealationsClient<CompraRealationsGetPayload<T>>

    /**
     * Count the number of CompraRealations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRealationsCountArgs} args - Arguments to filter CompraRealations to count.
     * @example
     * // Count the number of CompraRealations
     * const count = await prisma.compraRealations.count({
     *   where: {
     *     // ... the filter for the CompraRealations we want to count
     *   }
     * })
    **/
    count<T extends CompraRealationsCountArgs>(
      args?: Subset<T, CompraRealationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraRealationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompraRealations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRealationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraRealationsAggregateArgs>(args: Subset<T, CompraRealationsAggregateArgs>): PrismaPromise<GetCompraRealationsAggregateType<T>>

    /**
     * Group by CompraRealations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRealationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraRealationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraRealationsGroupByArgs['orderBy'] }
        : { orderBy?: CompraRealationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraRealationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraRealationsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CompraRealations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompraRealationsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    compra<T extends CompraArgs= {}>(args?: Subset<T, CompraArgs>): Prisma__CompraClient<CompraGetPayload<T> | Null>;

    product<T extends ProductArgs= {}>(args?: Subset<T, ProductArgs>): Prisma__ProductClient<ProductGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CompraRealations base type for findUnique actions
   */
  export type CompraRealationsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * Filter, which CompraRealations to fetch.
     */
    where: CompraRealationsWhereUniqueInput
  }

  /**
   * CompraRealations findUnique
   */
  export interface CompraRealationsFindUniqueArgs extends CompraRealationsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CompraRealations findUniqueOrThrow
   */
  export type CompraRealationsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * Filter, which CompraRealations to fetch.
     */
    where: CompraRealationsWhereUniqueInput
  }


  /**
   * CompraRealations base type for findFirst actions
   */
  export type CompraRealationsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * Filter, which CompraRealations to fetch.
     */
    where?: CompraRealationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraRealations to fetch.
     */
    orderBy?: Enumerable<CompraRealationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompraRealations.
     */
    cursor?: CompraRealationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraRealations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraRealations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompraRealations.
     */
    distinct?: Enumerable<CompraRealationsScalarFieldEnum>
  }

  /**
   * CompraRealations findFirst
   */
  export interface CompraRealationsFindFirstArgs extends CompraRealationsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CompraRealations findFirstOrThrow
   */
  export type CompraRealationsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * Filter, which CompraRealations to fetch.
     */
    where?: CompraRealationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraRealations to fetch.
     */
    orderBy?: Enumerable<CompraRealationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompraRealations.
     */
    cursor?: CompraRealationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraRealations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraRealations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompraRealations.
     */
    distinct?: Enumerable<CompraRealationsScalarFieldEnum>
  }


  /**
   * CompraRealations findMany
   */
  export type CompraRealationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * Filter, which CompraRealations to fetch.
     */
    where?: CompraRealationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraRealations to fetch.
     */
    orderBy?: Enumerable<CompraRealationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompraRealations.
     */
    cursor?: CompraRealationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraRealations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraRealations.
     */
    skip?: number
    distinct?: Enumerable<CompraRealationsScalarFieldEnum>
  }


  /**
   * CompraRealations create
   */
  export type CompraRealationsCreateArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * The data needed to create a CompraRealations.
     */
    data: XOR<CompraRealationsCreateInput, CompraRealationsUncheckedCreateInput>
  }


  /**
   * CompraRealations createMany
   */
  export type CompraRealationsCreateManyArgs = {
    /**
     * The data used to create many CompraRealations.
     */
    data: Enumerable<CompraRealationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CompraRealations update
   */
  export type CompraRealationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * The data needed to update a CompraRealations.
     */
    data: XOR<CompraRealationsUpdateInput, CompraRealationsUncheckedUpdateInput>
    /**
     * Choose, which CompraRealations to update.
     */
    where: CompraRealationsWhereUniqueInput
  }


  /**
   * CompraRealations updateMany
   */
  export type CompraRealationsUpdateManyArgs = {
    /**
     * The data used to update CompraRealations.
     */
    data: XOR<CompraRealationsUpdateManyMutationInput, CompraRealationsUncheckedUpdateManyInput>
    /**
     * Filter which CompraRealations to update
     */
    where?: CompraRealationsWhereInput
  }


  /**
   * CompraRealations upsert
   */
  export type CompraRealationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * The filter to search for the CompraRealations to update in case it exists.
     */
    where: CompraRealationsWhereUniqueInput
    /**
     * In case the CompraRealations found by the `where` argument doesn't exist, create a new CompraRealations with this data.
     */
    create: XOR<CompraRealationsCreateInput, CompraRealationsUncheckedCreateInput>
    /**
     * In case the CompraRealations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraRealationsUpdateInput, CompraRealationsUncheckedUpdateInput>
  }


  /**
   * CompraRealations delete
   */
  export type CompraRealationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
    /**
     * Filter which CompraRealations to delete.
     */
    where: CompraRealationsWhereUniqueInput
  }


  /**
   * CompraRealations deleteMany
   */
  export type CompraRealationsDeleteManyArgs = {
    /**
     * Filter which CompraRealations to delete
     */
    where?: CompraRealationsWhereInput
  }


  /**
   * CompraRealations without action
   */
  export type CompraRealationsArgs = {
    /**
     * Select specific fields to fetch from the CompraRealations
     */
    select?: CompraRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRealationsInclude | null
  }



  /**
   * Model Promocao
   */


  export type AggregatePromocao = {
    _count: PromocaoCountAggregateOutputType | null
    _min: PromocaoMinAggregateOutputType | null
    _max: PromocaoMaxAggregateOutputType | null
  }

  export type PromocaoMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type PromocaoMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type PromocaoCountAggregateOutputType = {
    id: number
    promocao: number
    created_at: number
    update_at: number
    _all: number
  }


  export type PromocaoMinAggregateInputType = {
    id?: true
    created_at?: true
    update_at?: true
  }

  export type PromocaoMaxAggregateInputType = {
    id?: true
    created_at?: true
    update_at?: true
  }

  export type PromocaoCountAggregateInputType = {
    id?: true
    promocao?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type PromocaoAggregateArgs = {
    /**
     * Filter which Promocao to aggregate.
     */
    where?: PromocaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promocaos to fetch.
     */
    orderBy?: Enumerable<PromocaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromocaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promocaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promocaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Promocaos
    **/
    _count?: true | PromocaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromocaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromocaoMaxAggregateInputType
  }

  export type GetPromocaoAggregateType<T extends PromocaoAggregateArgs> = {
        [P in keyof T & keyof AggregatePromocao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromocao[P]>
      : GetScalarType<T[P], AggregatePromocao[P]>
  }




  export type PromocaoGroupByArgs = {
    where?: PromocaoWhereInput
    orderBy?: Enumerable<PromocaoOrderByWithAggregationInput>
    by: PromocaoScalarFieldEnum[]
    having?: PromocaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromocaoCountAggregateInputType | true
    _min?: PromocaoMinAggregateInputType
    _max?: PromocaoMaxAggregateInputType
  }


  export type PromocaoGroupByOutputType = {
    id: string
    promocao: string[]
    created_at: Date
    update_at: Date
    _count: PromocaoCountAggregateOutputType | null
    _min: PromocaoMinAggregateOutputType | null
    _max: PromocaoMaxAggregateOutputType | null
  }

  type GetPromocaoGroupByPayload<T extends PromocaoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PromocaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromocaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromocaoGroupByOutputType[P]>
            : GetScalarType<T[P], PromocaoGroupByOutputType[P]>
        }
      >
    >


  export type PromocaoSelect = {
    id?: boolean
    promocao?: boolean
    created_at?: boolean
    update_at?: boolean
  }


  export type PromocaoGetPayload<S extends boolean | null | undefined | PromocaoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Promocao :
    S extends undefined ? never :
    S extends { include: any } & (PromocaoArgs | PromocaoFindManyArgs)
    ? Promocao 
    : S extends { select: any } & (PromocaoArgs | PromocaoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Promocao ? Promocao[P] : never
  } 
      : Promocao


  type PromocaoCountArgs = 
    Omit<PromocaoFindManyArgs, 'select' | 'include'> & {
      select?: PromocaoCountAggregateInputType | true
    }

  export interface PromocaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Promocao that matches the filter.
     * @param {PromocaoFindUniqueArgs} args - Arguments to find a Promocao
     * @example
     * // Get one Promocao
     * const promocao = await prisma.promocao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PromocaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PromocaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Promocao'> extends True ? Prisma__PromocaoClient<PromocaoGetPayload<T>> : Prisma__PromocaoClient<PromocaoGetPayload<T> | null, null>

    /**
     * Find one Promocao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PromocaoFindUniqueOrThrowArgs} args - Arguments to find a Promocao
     * @example
     * // Get one Promocao
     * const promocao = await prisma.promocao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PromocaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PromocaoFindUniqueOrThrowArgs>
    ): Prisma__PromocaoClient<PromocaoGetPayload<T>>

    /**
     * Find the first Promocao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocaoFindFirstArgs} args - Arguments to find a Promocao
     * @example
     * // Get one Promocao
     * const promocao = await prisma.promocao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PromocaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PromocaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Promocao'> extends True ? Prisma__PromocaoClient<PromocaoGetPayload<T>> : Prisma__PromocaoClient<PromocaoGetPayload<T> | null, null>

    /**
     * Find the first Promocao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocaoFindFirstOrThrowArgs} args - Arguments to find a Promocao
     * @example
     * // Get one Promocao
     * const promocao = await prisma.promocao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PromocaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PromocaoFindFirstOrThrowArgs>
    ): Prisma__PromocaoClient<PromocaoGetPayload<T>>

    /**
     * Find zero or more Promocaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promocaos
     * const promocaos = await prisma.promocao.findMany()
     * 
     * // Get first 10 Promocaos
     * const promocaos = await prisma.promocao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promocaoWithIdOnly = await prisma.promocao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PromocaoFindManyArgs>(
      args?: SelectSubset<T, PromocaoFindManyArgs>
    ): PrismaPromise<Array<PromocaoGetPayload<T>>>

    /**
     * Create a Promocao.
     * @param {PromocaoCreateArgs} args - Arguments to create a Promocao.
     * @example
     * // Create one Promocao
     * const Promocao = await prisma.promocao.create({
     *   data: {
     *     // ... data to create a Promocao
     *   }
     * })
     * 
    **/
    create<T extends PromocaoCreateArgs>(
      args: SelectSubset<T, PromocaoCreateArgs>
    ): Prisma__PromocaoClient<PromocaoGetPayload<T>>

    /**
     * Create many Promocaos.
     *     @param {PromocaoCreateManyArgs} args - Arguments to create many Promocaos.
     *     @example
     *     // Create many Promocaos
     *     const promocao = await prisma.promocao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PromocaoCreateManyArgs>(
      args?: SelectSubset<T, PromocaoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Promocao.
     * @param {PromocaoDeleteArgs} args - Arguments to delete one Promocao.
     * @example
     * // Delete one Promocao
     * const Promocao = await prisma.promocao.delete({
     *   where: {
     *     // ... filter to delete one Promocao
     *   }
     * })
     * 
    **/
    delete<T extends PromocaoDeleteArgs>(
      args: SelectSubset<T, PromocaoDeleteArgs>
    ): Prisma__PromocaoClient<PromocaoGetPayload<T>>

    /**
     * Update one Promocao.
     * @param {PromocaoUpdateArgs} args - Arguments to update one Promocao.
     * @example
     * // Update one Promocao
     * const promocao = await prisma.promocao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PromocaoUpdateArgs>(
      args: SelectSubset<T, PromocaoUpdateArgs>
    ): Prisma__PromocaoClient<PromocaoGetPayload<T>>

    /**
     * Delete zero or more Promocaos.
     * @param {PromocaoDeleteManyArgs} args - Arguments to filter Promocaos to delete.
     * @example
     * // Delete a few Promocaos
     * const { count } = await prisma.promocao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PromocaoDeleteManyArgs>(
      args?: SelectSubset<T, PromocaoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promocaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promocaos
     * const promocao = await prisma.promocao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PromocaoUpdateManyArgs>(
      args: SelectSubset<T, PromocaoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Promocao.
     * @param {PromocaoUpsertArgs} args - Arguments to update or create a Promocao.
     * @example
     * // Update or create a Promocao
     * const promocao = await prisma.promocao.upsert({
     *   create: {
     *     // ... data to create a Promocao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promocao we want to update
     *   }
     * })
    **/
    upsert<T extends PromocaoUpsertArgs>(
      args: SelectSubset<T, PromocaoUpsertArgs>
    ): Prisma__PromocaoClient<PromocaoGetPayload<T>>

    /**
     * Count the number of Promocaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocaoCountArgs} args - Arguments to filter Promocaos to count.
     * @example
     * // Count the number of Promocaos
     * const count = await prisma.promocao.count({
     *   where: {
     *     // ... the filter for the Promocaos we want to count
     *   }
     * })
    **/
    count<T extends PromocaoCountArgs>(
      args?: Subset<T, PromocaoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromocaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promocao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromocaoAggregateArgs>(args: Subset<T, PromocaoAggregateArgs>): PrismaPromise<GetPromocaoAggregateType<T>>

    /**
     * Group by Promocao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromocaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromocaoGroupByArgs['orderBy'] }
        : { orderBy?: PromocaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromocaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromocaoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Promocao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PromocaoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Promocao base type for findUnique actions
   */
  export type PromocaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * Filter, which Promocao to fetch.
     */
    where: PromocaoWhereUniqueInput
  }

  /**
   * Promocao findUnique
   */
  export interface PromocaoFindUniqueArgs extends PromocaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Promocao findUniqueOrThrow
   */
  export type PromocaoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * Filter, which Promocao to fetch.
     */
    where: PromocaoWhereUniqueInput
  }


  /**
   * Promocao base type for findFirst actions
   */
  export type PromocaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * Filter, which Promocao to fetch.
     */
    where?: PromocaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promocaos to fetch.
     */
    orderBy?: Enumerable<PromocaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promocaos.
     */
    cursor?: PromocaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promocaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promocaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promocaos.
     */
    distinct?: Enumerable<PromocaoScalarFieldEnum>
  }

  /**
   * Promocao findFirst
   */
  export interface PromocaoFindFirstArgs extends PromocaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Promocao findFirstOrThrow
   */
  export type PromocaoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * Filter, which Promocao to fetch.
     */
    where?: PromocaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promocaos to fetch.
     */
    orderBy?: Enumerable<PromocaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promocaos.
     */
    cursor?: PromocaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promocaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promocaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promocaos.
     */
    distinct?: Enumerable<PromocaoScalarFieldEnum>
  }


  /**
   * Promocao findMany
   */
  export type PromocaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * Filter, which Promocaos to fetch.
     */
    where?: PromocaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promocaos to fetch.
     */
    orderBy?: Enumerable<PromocaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Promocaos.
     */
    cursor?: PromocaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promocaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promocaos.
     */
    skip?: number
    distinct?: Enumerable<PromocaoScalarFieldEnum>
  }


  /**
   * Promocao create
   */
  export type PromocaoCreateArgs = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * The data needed to create a Promocao.
     */
    data?: XOR<PromocaoCreateInput, PromocaoUncheckedCreateInput>
  }


  /**
   * Promocao createMany
   */
  export type PromocaoCreateManyArgs = {
    /**
     * The data used to create many Promocaos.
     */
    data: Enumerable<PromocaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Promocao update
   */
  export type PromocaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * The data needed to update a Promocao.
     */
    data: XOR<PromocaoUpdateInput, PromocaoUncheckedUpdateInput>
    /**
     * Choose, which Promocao to update.
     */
    where: PromocaoWhereUniqueInput
  }


  /**
   * Promocao updateMany
   */
  export type PromocaoUpdateManyArgs = {
    /**
     * The data used to update Promocaos.
     */
    data: XOR<PromocaoUpdateManyMutationInput, PromocaoUncheckedUpdateManyInput>
    /**
     * Filter which Promocaos to update
     */
    where?: PromocaoWhereInput
  }


  /**
   * Promocao upsert
   */
  export type PromocaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * The filter to search for the Promocao to update in case it exists.
     */
    where: PromocaoWhereUniqueInput
    /**
     * In case the Promocao found by the `where` argument doesn't exist, create a new Promocao with this data.
     */
    create: XOR<PromocaoCreateInput, PromocaoUncheckedCreateInput>
    /**
     * In case the Promocao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromocaoUpdateInput, PromocaoUncheckedUpdateInput>
  }


  /**
   * Promocao delete
   */
  export type PromocaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
    /**
     * Filter which Promocao to delete.
     */
    where: PromocaoWhereUniqueInput
  }


  /**
   * Promocao deleteMany
   */
  export type PromocaoDeleteManyArgs = {
    /**
     * Filter which Promocaos to delete
     */
    where?: PromocaoWhereInput
  }


  /**
   * Promocao without action
   */
  export type PromocaoArgs = {
    /**
     * Select specific fields to fetch from the Promocao
     */
    select?: PromocaoSelect | null
  }



  /**
   * Model Ofertas
   */


  export type AggregateOfertas = {
    _count: OfertasCountAggregateOutputType | null
    _min: OfertasMinAggregateOutputType | null
    _max: OfertasMaxAggregateOutputType | null
  }

  export type OfertasMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type OfertasMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type OfertasCountAggregateOutputType = {
    id: number
    ofertas: number
    created_at: number
    update_at: number
    _all: number
  }


  export type OfertasMinAggregateInputType = {
    id?: true
    created_at?: true
    update_at?: true
  }

  export type OfertasMaxAggregateInputType = {
    id?: true
    created_at?: true
    update_at?: true
  }

  export type OfertasCountAggregateInputType = {
    id?: true
    ofertas?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type OfertasAggregateArgs = {
    /**
     * Filter which Ofertas to aggregate.
     */
    where?: OfertasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ofertas to fetch.
     */
    orderBy?: Enumerable<OfertasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OfertasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ofertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ofertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ofertas
    **/
    _count?: true | OfertasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfertasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfertasMaxAggregateInputType
  }

  export type GetOfertasAggregateType<T extends OfertasAggregateArgs> = {
        [P in keyof T & keyof AggregateOfertas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOfertas[P]>
      : GetScalarType<T[P], AggregateOfertas[P]>
  }




  export type OfertasGroupByArgs = {
    where?: OfertasWhereInput
    orderBy?: Enumerable<OfertasOrderByWithAggregationInput>
    by: OfertasScalarFieldEnum[]
    having?: OfertasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfertasCountAggregateInputType | true
    _min?: OfertasMinAggregateInputType
    _max?: OfertasMaxAggregateInputType
  }


  export type OfertasGroupByOutputType = {
    id: string
    ofertas: string[]
    created_at: Date
    update_at: Date
    _count: OfertasCountAggregateOutputType | null
    _min: OfertasMinAggregateOutputType | null
    _max: OfertasMaxAggregateOutputType | null
  }

  type GetOfertasGroupByPayload<T extends OfertasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OfertasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfertasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfertasGroupByOutputType[P]>
            : GetScalarType<T[P], OfertasGroupByOutputType[P]>
        }
      >
    >


  export type OfertasSelect = {
    id?: boolean
    ofertas?: boolean
    created_at?: boolean
    update_at?: boolean
  }


  export type OfertasGetPayload<S extends boolean | null | undefined | OfertasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Ofertas :
    S extends undefined ? never :
    S extends { include: any } & (OfertasArgs | OfertasFindManyArgs)
    ? Ofertas 
    : S extends { select: any } & (OfertasArgs | OfertasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Ofertas ? Ofertas[P] : never
  } 
      : Ofertas


  type OfertasCountArgs = 
    Omit<OfertasFindManyArgs, 'select' | 'include'> & {
      select?: OfertasCountAggregateInputType | true
    }

  export interface OfertasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Ofertas that matches the filter.
     * @param {OfertasFindUniqueArgs} args - Arguments to find a Ofertas
     * @example
     * // Get one Ofertas
     * const ofertas = await prisma.ofertas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OfertasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OfertasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ofertas'> extends True ? Prisma__OfertasClient<OfertasGetPayload<T>> : Prisma__OfertasClient<OfertasGetPayload<T> | null, null>

    /**
     * Find one Ofertas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OfertasFindUniqueOrThrowArgs} args - Arguments to find a Ofertas
     * @example
     * // Get one Ofertas
     * const ofertas = await prisma.ofertas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OfertasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OfertasFindUniqueOrThrowArgs>
    ): Prisma__OfertasClient<OfertasGetPayload<T>>

    /**
     * Find the first Ofertas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertasFindFirstArgs} args - Arguments to find a Ofertas
     * @example
     * // Get one Ofertas
     * const ofertas = await prisma.ofertas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OfertasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OfertasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ofertas'> extends True ? Prisma__OfertasClient<OfertasGetPayload<T>> : Prisma__OfertasClient<OfertasGetPayload<T> | null, null>

    /**
     * Find the first Ofertas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertasFindFirstOrThrowArgs} args - Arguments to find a Ofertas
     * @example
     * // Get one Ofertas
     * const ofertas = await prisma.ofertas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OfertasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OfertasFindFirstOrThrowArgs>
    ): Prisma__OfertasClient<OfertasGetPayload<T>>

    /**
     * Find zero or more Ofertas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ofertas
     * const ofertas = await prisma.ofertas.findMany()
     * 
     * // Get first 10 Ofertas
     * const ofertas = await prisma.ofertas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ofertasWithIdOnly = await prisma.ofertas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OfertasFindManyArgs>(
      args?: SelectSubset<T, OfertasFindManyArgs>
    ): PrismaPromise<Array<OfertasGetPayload<T>>>

    /**
     * Create a Ofertas.
     * @param {OfertasCreateArgs} args - Arguments to create a Ofertas.
     * @example
     * // Create one Ofertas
     * const Ofertas = await prisma.ofertas.create({
     *   data: {
     *     // ... data to create a Ofertas
     *   }
     * })
     * 
    **/
    create<T extends OfertasCreateArgs>(
      args: SelectSubset<T, OfertasCreateArgs>
    ): Prisma__OfertasClient<OfertasGetPayload<T>>

    /**
     * Create many Ofertas.
     *     @param {OfertasCreateManyArgs} args - Arguments to create many Ofertas.
     *     @example
     *     // Create many Ofertas
     *     const ofertas = await prisma.ofertas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OfertasCreateManyArgs>(
      args?: SelectSubset<T, OfertasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Ofertas.
     * @param {OfertasDeleteArgs} args - Arguments to delete one Ofertas.
     * @example
     * // Delete one Ofertas
     * const Ofertas = await prisma.ofertas.delete({
     *   where: {
     *     // ... filter to delete one Ofertas
     *   }
     * })
     * 
    **/
    delete<T extends OfertasDeleteArgs>(
      args: SelectSubset<T, OfertasDeleteArgs>
    ): Prisma__OfertasClient<OfertasGetPayload<T>>

    /**
     * Update one Ofertas.
     * @param {OfertasUpdateArgs} args - Arguments to update one Ofertas.
     * @example
     * // Update one Ofertas
     * const ofertas = await prisma.ofertas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OfertasUpdateArgs>(
      args: SelectSubset<T, OfertasUpdateArgs>
    ): Prisma__OfertasClient<OfertasGetPayload<T>>

    /**
     * Delete zero or more Ofertas.
     * @param {OfertasDeleteManyArgs} args - Arguments to filter Ofertas to delete.
     * @example
     * // Delete a few Ofertas
     * const { count } = await prisma.ofertas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OfertasDeleteManyArgs>(
      args?: SelectSubset<T, OfertasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ofertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ofertas
     * const ofertas = await prisma.ofertas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OfertasUpdateManyArgs>(
      args: SelectSubset<T, OfertasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Ofertas.
     * @param {OfertasUpsertArgs} args - Arguments to update or create a Ofertas.
     * @example
     * // Update or create a Ofertas
     * const ofertas = await prisma.ofertas.upsert({
     *   create: {
     *     // ... data to create a Ofertas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ofertas we want to update
     *   }
     * })
    **/
    upsert<T extends OfertasUpsertArgs>(
      args: SelectSubset<T, OfertasUpsertArgs>
    ): Prisma__OfertasClient<OfertasGetPayload<T>>

    /**
     * Count the number of Ofertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertasCountArgs} args - Arguments to filter Ofertas to count.
     * @example
     * // Count the number of Ofertas
     * const count = await prisma.ofertas.count({
     *   where: {
     *     // ... the filter for the Ofertas we want to count
     *   }
     * })
    **/
    count<T extends OfertasCountArgs>(
      args?: Subset<T, OfertasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfertasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ofertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfertasAggregateArgs>(args: Subset<T, OfertasAggregateArgs>): PrismaPromise<GetOfertasAggregateType<T>>

    /**
     * Group by Ofertas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfertasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfertasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfertasGroupByArgs['orderBy'] }
        : { orderBy?: OfertasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfertasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfertasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Ofertas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OfertasClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Ofertas base type for findUnique actions
   */
  export type OfertasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * Filter, which Ofertas to fetch.
     */
    where: OfertasWhereUniqueInput
  }

  /**
   * Ofertas findUnique
   */
  export interface OfertasFindUniqueArgs extends OfertasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ofertas findUniqueOrThrow
   */
  export type OfertasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * Filter, which Ofertas to fetch.
     */
    where: OfertasWhereUniqueInput
  }


  /**
   * Ofertas base type for findFirst actions
   */
  export type OfertasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * Filter, which Ofertas to fetch.
     */
    where?: OfertasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ofertas to fetch.
     */
    orderBy?: Enumerable<OfertasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ofertas.
     */
    cursor?: OfertasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ofertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ofertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ofertas.
     */
    distinct?: Enumerable<OfertasScalarFieldEnum>
  }

  /**
   * Ofertas findFirst
   */
  export interface OfertasFindFirstArgs extends OfertasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Ofertas findFirstOrThrow
   */
  export type OfertasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * Filter, which Ofertas to fetch.
     */
    where?: OfertasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ofertas to fetch.
     */
    orderBy?: Enumerable<OfertasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ofertas.
     */
    cursor?: OfertasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ofertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ofertas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ofertas.
     */
    distinct?: Enumerable<OfertasScalarFieldEnum>
  }


  /**
   * Ofertas findMany
   */
  export type OfertasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * Filter, which Ofertas to fetch.
     */
    where?: OfertasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ofertas to fetch.
     */
    orderBy?: Enumerable<OfertasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ofertas.
     */
    cursor?: OfertasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ofertas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ofertas.
     */
    skip?: number
    distinct?: Enumerable<OfertasScalarFieldEnum>
  }


  /**
   * Ofertas create
   */
  export type OfertasCreateArgs = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * The data needed to create a Ofertas.
     */
    data?: XOR<OfertasCreateInput, OfertasUncheckedCreateInput>
  }


  /**
   * Ofertas createMany
   */
  export type OfertasCreateManyArgs = {
    /**
     * The data used to create many Ofertas.
     */
    data: Enumerable<OfertasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Ofertas update
   */
  export type OfertasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * The data needed to update a Ofertas.
     */
    data: XOR<OfertasUpdateInput, OfertasUncheckedUpdateInput>
    /**
     * Choose, which Ofertas to update.
     */
    where: OfertasWhereUniqueInput
  }


  /**
   * Ofertas updateMany
   */
  export type OfertasUpdateManyArgs = {
    /**
     * The data used to update Ofertas.
     */
    data: XOR<OfertasUpdateManyMutationInput, OfertasUncheckedUpdateManyInput>
    /**
     * Filter which Ofertas to update
     */
    where?: OfertasWhereInput
  }


  /**
   * Ofertas upsert
   */
  export type OfertasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * The filter to search for the Ofertas to update in case it exists.
     */
    where: OfertasWhereUniqueInput
    /**
     * In case the Ofertas found by the `where` argument doesn't exist, create a new Ofertas with this data.
     */
    create: XOR<OfertasCreateInput, OfertasUncheckedCreateInput>
    /**
     * In case the Ofertas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OfertasUpdateInput, OfertasUncheckedUpdateInput>
  }


  /**
   * Ofertas delete
   */
  export type OfertasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
    /**
     * Filter which Ofertas to delete.
     */
    where: OfertasWhereUniqueInput
  }


  /**
   * Ofertas deleteMany
   */
  export type OfertasDeleteManyArgs = {
    /**
     * Filter which Ofertas to delete
     */
    where?: OfertasWhereInput
  }


  /**
   * Ofertas without action
   */
  export type OfertasArgs = {
    /**
     * Select specific fields to fetch from the Ofertas
     */
    select?: OfertasSelect | null
  }



  /**
   * Model Slids
   */


  export type AggregateSlids = {
    _count: SlidsCountAggregateOutputType | null
    _min: SlidsMinAggregateOutputType | null
    _max: SlidsMaxAggregateOutputType | null
  }

  export type SlidsMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type SlidsMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type SlidsCountAggregateOutputType = {
    id: number
    slids: number
    created_at: number
    update_at: number
    _all: number
  }


  export type SlidsMinAggregateInputType = {
    id?: true
    created_at?: true
    update_at?: true
  }

  export type SlidsMaxAggregateInputType = {
    id?: true
    created_at?: true
    update_at?: true
  }

  export type SlidsCountAggregateInputType = {
    id?: true
    slids?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type SlidsAggregateArgs = {
    /**
     * Filter which Slids to aggregate.
     */
    where?: SlidsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Slids to fetch.
     */
    orderBy?: Enumerable<SlidsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SlidsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Slids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Slids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Slids
    **/
    _count?: true | SlidsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SlidsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SlidsMaxAggregateInputType
  }

  export type GetSlidsAggregateType<T extends SlidsAggregateArgs> = {
        [P in keyof T & keyof AggregateSlids]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSlids[P]>
      : GetScalarType<T[P], AggregateSlids[P]>
  }




  export type SlidsGroupByArgs = {
    where?: SlidsWhereInput
    orderBy?: Enumerable<SlidsOrderByWithAggregationInput>
    by: SlidsScalarFieldEnum[]
    having?: SlidsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SlidsCountAggregateInputType | true
    _min?: SlidsMinAggregateInputType
    _max?: SlidsMaxAggregateInputType
  }


  export type SlidsGroupByOutputType = {
    id: string
    slids: string[]
    created_at: Date
    update_at: Date
    _count: SlidsCountAggregateOutputType | null
    _min: SlidsMinAggregateOutputType | null
    _max: SlidsMaxAggregateOutputType | null
  }

  type GetSlidsGroupByPayload<T extends SlidsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SlidsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SlidsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SlidsGroupByOutputType[P]>
            : GetScalarType<T[P], SlidsGroupByOutputType[P]>
        }
      >
    >


  export type SlidsSelect = {
    id?: boolean
    slids?: boolean
    created_at?: boolean
    update_at?: boolean
  }


  export type SlidsGetPayload<S extends boolean | null | undefined | SlidsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Slids :
    S extends undefined ? never :
    S extends { include: any } & (SlidsArgs | SlidsFindManyArgs)
    ? Slids 
    : S extends { select: any } & (SlidsArgs | SlidsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Slids ? Slids[P] : never
  } 
      : Slids


  type SlidsCountArgs = 
    Omit<SlidsFindManyArgs, 'select' | 'include'> & {
      select?: SlidsCountAggregateInputType | true
    }

  export interface SlidsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Slids that matches the filter.
     * @param {SlidsFindUniqueArgs} args - Arguments to find a Slids
     * @example
     * // Get one Slids
     * const slids = await prisma.slids.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SlidsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SlidsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Slids'> extends True ? Prisma__SlidsClient<SlidsGetPayload<T>> : Prisma__SlidsClient<SlidsGetPayload<T> | null, null>

    /**
     * Find one Slids that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SlidsFindUniqueOrThrowArgs} args - Arguments to find a Slids
     * @example
     * // Get one Slids
     * const slids = await prisma.slids.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SlidsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SlidsFindUniqueOrThrowArgs>
    ): Prisma__SlidsClient<SlidsGetPayload<T>>

    /**
     * Find the first Slids that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlidsFindFirstArgs} args - Arguments to find a Slids
     * @example
     * // Get one Slids
     * const slids = await prisma.slids.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SlidsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SlidsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Slids'> extends True ? Prisma__SlidsClient<SlidsGetPayload<T>> : Prisma__SlidsClient<SlidsGetPayload<T> | null, null>

    /**
     * Find the first Slids that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlidsFindFirstOrThrowArgs} args - Arguments to find a Slids
     * @example
     * // Get one Slids
     * const slids = await prisma.slids.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SlidsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SlidsFindFirstOrThrowArgs>
    ): Prisma__SlidsClient<SlidsGetPayload<T>>

    /**
     * Find zero or more Slids that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlidsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Slids
     * const slids = await prisma.slids.findMany()
     * 
     * // Get first 10 Slids
     * const slids = await prisma.slids.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const slidsWithIdOnly = await prisma.slids.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SlidsFindManyArgs>(
      args?: SelectSubset<T, SlidsFindManyArgs>
    ): PrismaPromise<Array<SlidsGetPayload<T>>>

    /**
     * Create a Slids.
     * @param {SlidsCreateArgs} args - Arguments to create a Slids.
     * @example
     * // Create one Slids
     * const Slids = await prisma.slids.create({
     *   data: {
     *     // ... data to create a Slids
     *   }
     * })
     * 
    **/
    create<T extends SlidsCreateArgs>(
      args: SelectSubset<T, SlidsCreateArgs>
    ): Prisma__SlidsClient<SlidsGetPayload<T>>

    /**
     * Create many Slids.
     *     @param {SlidsCreateManyArgs} args - Arguments to create many Slids.
     *     @example
     *     // Create many Slids
     *     const slids = await prisma.slids.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SlidsCreateManyArgs>(
      args?: SelectSubset<T, SlidsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Slids.
     * @param {SlidsDeleteArgs} args - Arguments to delete one Slids.
     * @example
     * // Delete one Slids
     * const Slids = await prisma.slids.delete({
     *   where: {
     *     // ... filter to delete one Slids
     *   }
     * })
     * 
    **/
    delete<T extends SlidsDeleteArgs>(
      args: SelectSubset<T, SlidsDeleteArgs>
    ): Prisma__SlidsClient<SlidsGetPayload<T>>

    /**
     * Update one Slids.
     * @param {SlidsUpdateArgs} args - Arguments to update one Slids.
     * @example
     * // Update one Slids
     * const slids = await prisma.slids.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SlidsUpdateArgs>(
      args: SelectSubset<T, SlidsUpdateArgs>
    ): Prisma__SlidsClient<SlidsGetPayload<T>>

    /**
     * Delete zero or more Slids.
     * @param {SlidsDeleteManyArgs} args - Arguments to filter Slids to delete.
     * @example
     * // Delete a few Slids
     * const { count } = await prisma.slids.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SlidsDeleteManyArgs>(
      args?: SelectSubset<T, SlidsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Slids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlidsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Slids
     * const slids = await prisma.slids.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SlidsUpdateManyArgs>(
      args: SelectSubset<T, SlidsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Slids.
     * @param {SlidsUpsertArgs} args - Arguments to update or create a Slids.
     * @example
     * // Update or create a Slids
     * const slids = await prisma.slids.upsert({
     *   create: {
     *     // ... data to create a Slids
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Slids we want to update
     *   }
     * })
    **/
    upsert<T extends SlidsUpsertArgs>(
      args: SelectSubset<T, SlidsUpsertArgs>
    ): Prisma__SlidsClient<SlidsGetPayload<T>>

    /**
     * Count the number of Slids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlidsCountArgs} args - Arguments to filter Slids to count.
     * @example
     * // Count the number of Slids
     * const count = await prisma.slids.count({
     *   where: {
     *     // ... the filter for the Slids we want to count
     *   }
     * })
    **/
    count<T extends SlidsCountArgs>(
      args?: Subset<T, SlidsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SlidsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Slids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlidsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SlidsAggregateArgs>(args: Subset<T, SlidsAggregateArgs>): PrismaPromise<GetSlidsAggregateType<T>>

    /**
     * Group by Slids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlidsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SlidsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SlidsGroupByArgs['orderBy'] }
        : { orderBy?: SlidsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SlidsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSlidsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Slids.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SlidsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Slids base type for findUnique actions
   */
  export type SlidsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * Filter, which Slids to fetch.
     */
    where: SlidsWhereUniqueInput
  }

  /**
   * Slids findUnique
   */
  export interface SlidsFindUniqueArgs extends SlidsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Slids findUniqueOrThrow
   */
  export type SlidsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * Filter, which Slids to fetch.
     */
    where: SlidsWhereUniqueInput
  }


  /**
   * Slids base type for findFirst actions
   */
  export type SlidsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * Filter, which Slids to fetch.
     */
    where?: SlidsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Slids to fetch.
     */
    orderBy?: Enumerable<SlidsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Slids.
     */
    cursor?: SlidsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Slids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Slids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Slids.
     */
    distinct?: Enumerable<SlidsScalarFieldEnum>
  }

  /**
   * Slids findFirst
   */
  export interface SlidsFindFirstArgs extends SlidsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Slids findFirstOrThrow
   */
  export type SlidsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * Filter, which Slids to fetch.
     */
    where?: SlidsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Slids to fetch.
     */
    orderBy?: Enumerable<SlidsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Slids.
     */
    cursor?: SlidsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Slids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Slids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Slids.
     */
    distinct?: Enumerable<SlidsScalarFieldEnum>
  }


  /**
   * Slids findMany
   */
  export type SlidsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * Filter, which Slids to fetch.
     */
    where?: SlidsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Slids to fetch.
     */
    orderBy?: Enumerable<SlidsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Slids.
     */
    cursor?: SlidsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Slids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Slids.
     */
    skip?: number
    distinct?: Enumerable<SlidsScalarFieldEnum>
  }


  /**
   * Slids create
   */
  export type SlidsCreateArgs = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * The data needed to create a Slids.
     */
    data?: XOR<SlidsCreateInput, SlidsUncheckedCreateInput>
  }


  /**
   * Slids createMany
   */
  export type SlidsCreateManyArgs = {
    /**
     * The data used to create many Slids.
     */
    data: Enumerable<SlidsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Slids update
   */
  export type SlidsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * The data needed to update a Slids.
     */
    data: XOR<SlidsUpdateInput, SlidsUncheckedUpdateInput>
    /**
     * Choose, which Slids to update.
     */
    where: SlidsWhereUniqueInput
  }


  /**
   * Slids updateMany
   */
  export type SlidsUpdateManyArgs = {
    /**
     * The data used to update Slids.
     */
    data: XOR<SlidsUpdateManyMutationInput, SlidsUncheckedUpdateManyInput>
    /**
     * Filter which Slids to update
     */
    where?: SlidsWhereInput
  }


  /**
   * Slids upsert
   */
  export type SlidsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * The filter to search for the Slids to update in case it exists.
     */
    where: SlidsWhereUniqueInput
    /**
     * In case the Slids found by the `where` argument doesn't exist, create a new Slids with this data.
     */
    create: XOR<SlidsCreateInput, SlidsUncheckedCreateInput>
    /**
     * In case the Slids was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SlidsUpdateInput, SlidsUncheckedUpdateInput>
  }


  /**
   * Slids delete
   */
  export type SlidsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
    /**
     * Filter which Slids to delete.
     */
    where: SlidsWhereUniqueInput
  }


  /**
   * Slids deleteMany
   */
  export type SlidsDeleteManyArgs = {
    /**
     * Filter which Slids to delete
     */
    where?: SlidsWhereInput
  }


  /**
   * Slids without action
   */
  export type SlidsArgs = {
    /**
     * Select specific fields to fetch from the Slids
     */
    select?: SlidsSelect | null
  }



  /**
   * Model Bannes
   */


  export type AggregateBannes = {
    _count: BannesCountAggregateOutputType | null
    _min: BannesMinAggregateOutputType | null
    _max: BannesMaxAggregateOutputType | null
  }

  export type BannesMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type BannesMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type BannesCountAggregateOutputType = {
    id: number
    bannes: number
    created_at: number
    update_at: number
    _all: number
  }


  export type BannesMinAggregateInputType = {
    id?: true
    created_at?: true
    update_at?: true
  }

  export type BannesMaxAggregateInputType = {
    id?: true
    created_at?: true
    update_at?: true
  }

  export type BannesCountAggregateInputType = {
    id?: true
    bannes?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type BannesAggregateArgs = {
    /**
     * Filter which Bannes to aggregate.
     */
    where?: BannesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bannes to fetch.
     */
    orderBy?: Enumerable<BannesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BannesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bannes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bannes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bannes
    **/
    _count?: true | BannesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannesMaxAggregateInputType
  }

  export type GetBannesAggregateType<T extends BannesAggregateArgs> = {
        [P in keyof T & keyof AggregateBannes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBannes[P]>
      : GetScalarType<T[P], AggregateBannes[P]>
  }




  export type BannesGroupByArgs = {
    where?: BannesWhereInput
    orderBy?: Enumerable<BannesOrderByWithAggregationInput>
    by: BannesScalarFieldEnum[]
    having?: BannesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannesCountAggregateInputType | true
    _min?: BannesMinAggregateInputType
    _max?: BannesMaxAggregateInputType
  }


  export type BannesGroupByOutputType = {
    id: string
    bannes: string[]
    created_at: Date
    update_at: Date
    _count: BannesCountAggregateOutputType | null
    _min: BannesMinAggregateOutputType | null
    _max: BannesMaxAggregateOutputType | null
  }

  type GetBannesGroupByPayload<T extends BannesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BannesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannesGroupByOutputType[P]>
            : GetScalarType<T[P], BannesGroupByOutputType[P]>
        }
      >
    >


  export type BannesSelect = {
    id?: boolean
    bannes?: boolean
    created_at?: boolean
    update_at?: boolean
  }


  export type BannesGetPayload<S extends boolean | null | undefined | BannesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Bannes :
    S extends undefined ? never :
    S extends { include: any } & (BannesArgs | BannesFindManyArgs)
    ? Bannes 
    : S extends { select: any } & (BannesArgs | BannesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Bannes ? Bannes[P] : never
  } 
      : Bannes


  type BannesCountArgs = 
    Omit<BannesFindManyArgs, 'select' | 'include'> & {
      select?: BannesCountAggregateInputType | true
    }

  export interface BannesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Bannes that matches the filter.
     * @param {BannesFindUniqueArgs} args - Arguments to find a Bannes
     * @example
     * // Get one Bannes
     * const bannes = await prisma.bannes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BannesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BannesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Bannes'> extends True ? Prisma__BannesClient<BannesGetPayload<T>> : Prisma__BannesClient<BannesGetPayload<T> | null, null>

    /**
     * Find one Bannes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BannesFindUniqueOrThrowArgs} args - Arguments to find a Bannes
     * @example
     * // Get one Bannes
     * const bannes = await prisma.bannes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BannesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BannesFindUniqueOrThrowArgs>
    ): Prisma__BannesClient<BannesGetPayload<T>>

    /**
     * Find the first Bannes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannesFindFirstArgs} args - Arguments to find a Bannes
     * @example
     * // Get one Bannes
     * const bannes = await prisma.bannes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BannesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BannesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Bannes'> extends True ? Prisma__BannesClient<BannesGetPayload<T>> : Prisma__BannesClient<BannesGetPayload<T> | null, null>

    /**
     * Find the first Bannes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannesFindFirstOrThrowArgs} args - Arguments to find a Bannes
     * @example
     * // Get one Bannes
     * const bannes = await prisma.bannes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BannesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BannesFindFirstOrThrowArgs>
    ): Prisma__BannesClient<BannesGetPayload<T>>

    /**
     * Find zero or more Bannes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bannes
     * const bannes = await prisma.bannes.findMany()
     * 
     * // Get first 10 Bannes
     * const bannes = await prisma.bannes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bannesWithIdOnly = await prisma.bannes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BannesFindManyArgs>(
      args?: SelectSubset<T, BannesFindManyArgs>
    ): PrismaPromise<Array<BannesGetPayload<T>>>

    /**
     * Create a Bannes.
     * @param {BannesCreateArgs} args - Arguments to create a Bannes.
     * @example
     * // Create one Bannes
     * const Bannes = await prisma.bannes.create({
     *   data: {
     *     // ... data to create a Bannes
     *   }
     * })
     * 
    **/
    create<T extends BannesCreateArgs>(
      args: SelectSubset<T, BannesCreateArgs>
    ): Prisma__BannesClient<BannesGetPayload<T>>

    /**
     * Create many Bannes.
     *     @param {BannesCreateManyArgs} args - Arguments to create many Bannes.
     *     @example
     *     // Create many Bannes
     *     const bannes = await prisma.bannes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BannesCreateManyArgs>(
      args?: SelectSubset<T, BannesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Bannes.
     * @param {BannesDeleteArgs} args - Arguments to delete one Bannes.
     * @example
     * // Delete one Bannes
     * const Bannes = await prisma.bannes.delete({
     *   where: {
     *     // ... filter to delete one Bannes
     *   }
     * })
     * 
    **/
    delete<T extends BannesDeleteArgs>(
      args: SelectSubset<T, BannesDeleteArgs>
    ): Prisma__BannesClient<BannesGetPayload<T>>

    /**
     * Update one Bannes.
     * @param {BannesUpdateArgs} args - Arguments to update one Bannes.
     * @example
     * // Update one Bannes
     * const bannes = await prisma.bannes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BannesUpdateArgs>(
      args: SelectSubset<T, BannesUpdateArgs>
    ): Prisma__BannesClient<BannesGetPayload<T>>

    /**
     * Delete zero or more Bannes.
     * @param {BannesDeleteManyArgs} args - Arguments to filter Bannes to delete.
     * @example
     * // Delete a few Bannes
     * const { count } = await prisma.bannes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BannesDeleteManyArgs>(
      args?: SelectSubset<T, BannesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bannes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bannes
     * const bannes = await prisma.bannes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BannesUpdateManyArgs>(
      args: SelectSubset<T, BannesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Bannes.
     * @param {BannesUpsertArgs} args - Arguments to update or create a Bannes.
     * @example
     * // Update or create a Bannes
     * const bannes = await prisma.bannes.upsert({
     *   create: {
     *     // ... data to create a Bannes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bannes we want to update
     *   }
     * })
    **/
    upsert<T extends BannesUpsertArgs>(
      args: SelectSubset<T, BannesUpsertArgs>
    ): Prisma__BannesClient<BannesGetPayload<T>>

    /**
     * Count the number of Bannes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannesCountArgs} args - Arguments to filter Bannes to count.
     * @example
     * // Count the number of Bannes
     * const count = await prisma.bannes.count({
     *   where: {
     *     // ... the filter for the Bannes we want to count
     *   }
     * })
    **/
    count<T extends BannesCountArgs>(
      args?: Subset<T, BannesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bannes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannesAggregateArgs>(args: Subset<T, BannesAggregateArgs>): PrismaPromise<GetBannesAggregateType<T>>

    /**
     * Group by Bannes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BannesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BannesGroupByArgs['orderBy'] }
        : { orderBy?: BannesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BannesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Bannes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BannesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Bannes base type for findUnique actions
   */
  export type BannesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * Filter, which Bannes to fetch.
     */
    where: BannesWhereUniqueInput
  }

  /**
   * Bannes findUnique
   */
  export interface BannesFindUniqueArgs extends BannesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Bannes findUniqueOrThrow
   */
  export type BannesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * Filter, which Bannes to fetch.
     */
    where: BannesWhereUniqueInput
  }


  /**
   * Bannes base type for findFirst actions
   */
  export type BannesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * Filter, which Bannes to fetch.
     */
    where?: BannesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bannes to fetch.
     */
    orderBy?: Enumerable<BannesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bannes.
     */
    cursor?: BannesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bannes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bannes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bannes.
     */
    distinct?: Enumerable<BannesScalarFieldEnum>
  }

  /**
   * Bannes findFirst
   */
  export interface BannesFindFirstArgs extends BannesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Bannes findFirstOrThrow
   */
  export type BannesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * Filter, which Bannes to fetch.
     */
    where?: BannesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bannes to fetch.
     */
    orderBy?: Enumerable<BannesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bannes.
     */
    cursor?: BannesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bannes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bannes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bannes.
     */
    distinct?: Enumerable<BannesScalarFieldEnum>
  }


  /**
   * Bannes findMany
   */
  export type BannesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * Filter, which Bannes to fetch.
     */
    where?: BannesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bannes to fetch.
     */
    orderBy?: Enumerable<BannesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bannes.
     */
    cursor?: BannesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bannes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bannes.
     */
    skip?: number
    distinct?: Enumerable<BannesScalarFieldEnum>
  }


  /**
   * Bannes create
   */
  export type BannesCreateArgs = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * The data needed to create a Bannes.
     */
    data?: XOR<BannesCreateInput, BannesUncheckedCreateInput>
  }


  /**
   * Bannes createMany
   */
  export type BannesCreateManyArgs = {
    /**
     * The data used to create many Bannes.
     */
    data: Enumerable<BannesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Bannes update
   */
  export type BannesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * The data needed to update a Bannes.
     */
    data: XOR<BannesUpdateInput, BannesUncheckedUpdateInput>
    /**
     * Choose, which Bannes to update.
     */
    where: BannesWhereUniqueInput
  }


  /**
   * Bannes updateMany
   */
  export type BannesUpdateManyArgs = {
    /**
     * The data used to update Bannes.
     */
    data: XOR<BannesUpdateManyMutationInput, BannesUncheckedUpdateManyInput>
    /**
     * Filter which Bannes to update
     */
    where?: BannesWhereInput
  }


  /**
   * Bannes upsert
   */
  export type BannesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * The filter to search for the Bannes to update in case it exists.
     */
    where: BannesWhereUniqueInput
    /**
     * In case the Bannes found by the `where` argument doesn't exist, create a new Bannes with this data.
     */
    create: XOR<BannesCreateInput, BannesUncheckedCreateInput>
    /**
     * In case the Bannes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BannesUpdateInput, BannesUncheckedUpdateInput>
  }


  /**
   * Bannes delete
   */
  export type BannesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
    /**
     * Filter which Bannes to delete.
     */
    where: BannesWhereUniqueInput
  }


  /**
   * Bannes deleteMany
   */
  export type BannesDeleteManyArgs = {
    /**
     * Filter which Bannes to delete
     */
    where?: BannesWhereInput
  }


  /**
   * Bannes without action
   */
  export type BannesArgs = {
    /**
     * Select specific fields to fetch from the Bannes
     */
    select?: BannesSelect | null
  }



  /**
   * Model Comentarios
   */


  export type AggregateComentarios = {
    _count: ComentariosCountAggregateOutputType | null
    _min: ComentariosMinAggregateOutputType | null
    _max: ComentariosMaxAggregateOutputType | null
  }

  export type ComentariosMinAggregateOutputType = {
    id: string | null
    imgName: string | null
    name: string | null
    message: string | null
    estrela: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type ComentariosMaxAggregateOutputType = {
    id: string | null
    imgName: string | null
    name: string | null
    message: string | null
    estrela: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type ComentariosCountAggregateOutputType = {
    id: number
    imgName: number
    image: number
    name: number
    message: number
    estrela: number
    created_at: number
    update_at: number
    _all: number
  }


  export type ComentariosMinAggregateInputType = {
    id?: true
    imgName?: true
    name?: true
    message?: true
    estrela?: true
    created_at?: true
    update_at?: true
  }

  export type ComentariosMaxAggregateInputType = {
    id?: true
    imgName?: true
    name?: true
    message?: true
    estrela?: true
    created_at?: true
    update_at?: true
  }

  export type ComentariosCountAggregateInputType = {
    id?: true
    imgName?: true
    image?: true
    name?: true
    message?: true
    estrela?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type ComentariosAggregateArgs = {
    /**
     * Filter which Comentarios to aggregate.
     */
    where?: ComentariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: Enumerable<ComentariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComentariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comentarios
    **/
    _count?: true | ComentariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComentariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComentariosMaxAggregateInputType
  }

  export type GetComentariosAggregateType<T extends ComentariosAggregateArgs> = {
        [P in keyof T & keyof AggregateComentarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComentarios[P]>
      : GetScalarType<T[P], AggregateComentarios[P]>
  }




  export type ComentariosGroupByArgs = {
    where?: ComentariosWhereInput
    orderBy?: Enumerable<ComentariosOrderByWithAggregationInput>
    by: ComentariosScalarFieldEnum[]
    having?: ComentariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComentariosCountAggregateInputType | true
    _min?: ComentariosMinAggregateInputType
    _max?: ComentariosMaxAggregateInputType
  }


  export type ComentariosGroupByOutputType = {
    id: string
    imgName: string
    image: string[]
    name: string
    message: string
    estrela: string
    created_at: Date
    update_at: Date
    _count: ComentariosCountAggregateOutputType | null
    _min: ComentariosMinAggregateOutputType | null
    _max: ComentariosMaxAggregateOutputType | null
  }

  type GetComentariosGroupByPayload<T extends ComentariosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ComentariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComentariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComentariosGroupByOutputType[P]>
            : GetScalarType<T[P], ComentariosGroupByOutputType[P]>
        }
      >
    >


  export type ComentariosSelect = {
    id?: boolean
    imgName?: boolean
    image?: boolean
    name?: boolean
    message?: boolean
    estrela?: boolean
    created_at?: boolean
    update_at?: boolean
    comentariorealations?: boolean | Comentarios$comentariorealationsArgs
    _count?: boolean | ComentariosCountOutputTypeArgs
  }


  export type ComentariosInclude = {
    comentariorealations?: boolean | Comentarios$comentariorealationsArgs
    _count?: boolean | ComentariosCountOutputTypeArgs
  }

  export type ComentariosGetPayload<S extends boolean | null | undefined | ComentariosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comentarios :
    S extends undefined ? never :
    S extends { include: any } & (ComentariosArgs | ComentariosFindManyArgs)
    ? Comentarios  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comentariorealations' ? Array < ComentarioRealationsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ComentariosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ComentariosArgs | ComentariosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comentariorealations' ? Array < ComentarioRealationsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ComentariosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Comentarios ? Comentarios[P] : never
  } 
      : Comentarios


  type ComentariosCountArgs = 
    Omit<ComentariosFindManyArgs, 'select' | 'include'> & {
      select?: ComentariosCountAggregateInputType | true
    }

  export interface ComentariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comentarios that matches the filter.
     * @param {ComentariosFindUniqueArgs} args - Arguments to find a Comentarios
     * @example
     * // Get one Comentarios
     * const comentarios = await prisma.comentarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ComentariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ComentariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comentarios'> extends True ? Prisma__ComentariosClient<ComentariosGetPayload<T>> : Prisma__ComentariosClient<ComentariosGetPayload<T> | null, null>

    /**
     * Find one Comentarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ComentariosFindUniqueOrThrowArgs} args - Arguments to find a Comentarios
     * @example
     * // Get one Comentarios
     * const comentarios = await prisma.comentarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ComentariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ComentariosFindUniqueOrThrowArgs>
    ): Prisma__ComentariosClient<ComentariosGetPayload<T>>

    /**
     * Find the first Comentarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentariosFindFirstArgs} args - Arguments to find a Comentarios
     * @example
     * // Get one Comentarios
     * const comentarios = await prisma.comentarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ComentariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ComentariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comentarios'> extends True ? Prisma__ComentariosClient<ComentariosGetPayload<T>> : Prisma__ComentariosClient<ComentariosGetPayload<T> | null, null>

    /**
     * Find the first Comentarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentariosFindFirstOrThrowArgs} args - Arguments to find a Comentarios
     * @example
     * // Get one Comentarios
     * const comentarios = await prisma.comentarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ComentariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ComentariosFindFirstOrThrowArgs>
    ): Prisma__ComentariosClient<ComentariosGetPayload<T>>

    /**
     * Find zero or more Comentarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comentarios
     * const comentarios = await prisma.comentarios.findMany()
     * 
     * // Get first 10 Comentarios
     * const comentarios = await prisma.comentarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comentariosWithIdOnly = await prisma.comentarios.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ComentariosFindManyArgs>(
      args?: SelectSubset<T, ComentariosFindManyArgs>
    ): PrismaPromise<Array<ComentariosGetPayload<T>>>

    /**
     * Create a Comentarios.
     * @param {ComentariosCreateArgs} args - Arguments to create a Comentarios.
     * @example
     * // Create one Comentarios
     * const Comentarios = await prisma.comentarios.create({
     *   data: {
     *     // ... data to create a Comentarios
     *   }
     * })
     * 
    **/
    create<T extends ComentariosCreateArgs>(
      args: SelectSubset<T, ComentariosCreateArgs>
    ): Prisma__ComentariosClient<ComentariosGetPayload<T>>

    /**
     * Create many Comentarios.
     *     @param {ComentariosCreateManyArgs} args - Arguments to create many Comentarios.
     *     @example
     *     // Create many Comentarios
     *     const comentarios = await prisma.comentarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ComentariosCreateManyArgs>(
      args?: SelectSubset<T, ComentariosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comentarios.
     * @param {ComentariosDeleteArgs} args - Arguments to delete one Comentarios.
     * @example
     * // Delete one Comentarios
     * const Comentarios = await prisma.comentarios.delete({
     *   where: {
     *     // ... filter to delete one Comentarios
     *   }
     * })
     * 
    **/
    delete<T extends ComentariosDeleteArgs>(
      args: SelectSubset<T, ComentariosDeleteArgs>
    ): Prisma__ComentariosClient<ComentariosGetPayload<T>>

    /**
     * Update one Comentarios.
     * @param {ComentariosUpdateArgs} args - Arguments to update one Comentarios.
     * @example
     * // Update one Comentarios
     * const comentarios = await prisma.comentarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ComentariosUpdateArgs>(
      args: SelectSubset<T, ComentariosUpdateArgs>
    ): Prisma__ComentariosClient<ComentariosGetPayload<T>>

    /**
     * Delete zero or more Comentarios.
     * @param {ComentariosDeleteManyArgs} args - Arguments to filter Comentarios to delete.
     * @example
     * // Delete a few Comentarios
     * const { count } = await prisma.comentarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ComentariosDeleteManyArgs>(
      args?: SelectSubset<T, ComentariosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comentarios
     * const comentarios = await prisma.comentarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ComentariosUpdateManyArgs>(
      args: SelectSubset<T, ComentariosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comentarios.
     * @param {ComentariosUpsertArgs} args - Arguments to update or create a Comentarios.
     * @example
     * // Update or create a Comentarios
     * const comentarios = await prisma.comentarios.upsert({
     *   create: {
     *     // ... data to create a Comentarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comentarios we want to update
     *   }
     * })
    **/
    upsert<T extends ComentariosUpsertArgs>(
      args: SelectSubset<T, ComentariosUpsertArgs>
    ): Prisma__ComentariosClient<ComentariosGetPayload<T>>

    /**
     * Count the number of Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentariosCountArgs} args - Arguments to filter Comentarios to count.
     * @example
     * // Count the number of Comentarios
     * const count = await prisma.comentarios.count({
     *   where: {
     *     // ... the filter for the Comentarios we want to count
     *   }
     * })
    **/
    count<T extends ComentariosCountArgs>(
      args?: Subset<T, ComentariosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComentariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComentariosAggregateArgs>(args: Subset<T, ComentariosAggregateArgs>): PrismaPromise<GetComentariosAggregateType<T>>

    /**
     * Group by Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComentariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComentariosGroupByArgs['orderBy'] }
        : { orderBy?: ComentariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComentariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComentariosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comentarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ComentariosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comentariorealations<T extends Comentarios$comentariorealationsArgs= {}>(args?: Subset<T, Comentarios$comentariorealationsArgs>): PrismaPromise<Array<ComentarioRealationsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comentarios base type for findUnique actions
   */
  export type ComentariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * Filter, which Comentarios to fetch.
     */
    where: ComentariosWhereUniqueInput
  }

  /**
   * Comentarios findUnique
   */
  export interface ComentariosFindUniqueArgs extends ComentariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comentarios findUniqueOrThrow
   */
  export type ComentariosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * Filter, which Comentarios to fetch.
     */
    where: ComentariosWhereUniqueInput
  }


  /**
   * Comentarios base type for findFirst actions
   */
  export type ComentariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * Filter, which Comentarios to fetch.
     */
    where?: ComentariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: Enumerable<ComentariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comentarios.
     */
    cursor?: ComentariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comentarios.
     */
    distinct?: Enumerable<ComentariosScalarFieldEnum>
  }

  /**
   * Comentarios findFirst
   */
  export interface ComentariosFindFirstArgs extends ComentariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comentarios findFirstOrThrow
   */
  export type ComentariosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * Filter, which Comentarios to fetch.
     */
    where?: ComentariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: Enumerable<ComentariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comentarios.
     */
    cursor?: ComentariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comentarios.
     */
    distinct?: Enumerable<ComentariosScalarFieldEnum>
  }


  /**
   * Comentarios findMany
   */
  export type ComentariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * Filter, which Comentarios to fetch.
     */
    where?: ComentariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comentarios to fetch.
     */
    orderBy?: Enumerable<ComentariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comentarios.
     */
    cursor?: ComentariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comentarios.
     */
    skip?: number
    distinct?: Enumerable<ComentariosScalarFieldEnum>
  }


  /**
   * Comentarios create
   */
  export type ComentariosCreateArgs = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * The data needed to create a Comentarios.
     */
    data: XOR<ComentariosCreateInput, ComentariosUncheckedCreateInput>
  }


  /**
   * Comentarios createMany
   */
  export type ComentariosCreateManyArgs = {
    /**
     * The data used to create many Comentarios.
     */
    data: Enumerable<ComentariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comentarios update
   */
  export type ComentariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * The data needed to update a Comentarios.
     */
    data: XOR<ComentariosUpdateInput, ComentariosUncheckedUpdateInput>
    /**
     * Choose, which Comentarios to update.
     */
    where: ComentariosWhereUniqueInput
  }


  /**
   * Comentarios updateMany
   */
  export type ComentariosUpdateManyArgs = {
    /**
     * The data used to update Comentarios.
     */
    data: XOR<ComentariosUpdateManyMutationInput, ComentariosUncheckedUpdateManyInput>
    /**
     * Filter which Comentarios to update
     */
    where?: ComentariosWhereInput
  }


  /**
   * Comentarios upsert
   */
  export type ComentariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * The filter to search for the Comentarios to update in case it exists.
     */
    where: ComentariosWhereUniqueInput
    /**
     * In case the Comentarios found by the `where` argument doesn't exist, create a new Comentarios with this data.
     */
    create: XOR<ComentariosCreateInput, ComentariosUncheckedCreateInput>
    /**
     * In case the Comentarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComentariosUpdateInput, ComentariosUncheckedUpdateInput>
  }


  /**
   * Comentarios delete
   */
  export type ComentariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
    /**
     * Filter which Comentarios to delete.
     */
    where: ComentariosWhereUniqueInput
  }


  /**
   * Comentarios deleteMany
   */
  export type ComentariosDeleteManyArgs = {
    /**
     * Filter which Comentarios to delete
     */
    where?: ComentariosWhereInput
  }


  /**
   * Comentarios.comentariorealations
   */
  export type Comentarios$comentariorealationsArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    where?: ComentarioRealationsWhereInput
    orderBy?: Enumerable<ComentarioRealationsOrderByWithRelationInput>
    cursor?: ComentarioRealationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ComentarioRealationsScalarFieldEnum>
  }


  /**
   * Comentarios without action
   */
  export type ComentariosArgs = {
    /**
     * Select specific fields to fetch from the Comentarios
     */
    select?: ComentariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentariosInclude | null
  }



  /**
   * Model ComentarioRealations
   */


  export type AggregateComentarioRealations = {
    _count: ComentarioRealationsCountAggregateOutputType | null
    _min: ComentarioRealationsMinAggregateOutputType | null
    _max: ComentarioRealationsMaxAggregateOutputType | null
  }

  export type ComentarioRealationsMinAggregateOutputType = {
    id: string | null
    id_product: string | null
    id_comentario: string | null
  }

  export type ComentarioRealationsMaxAggregateOutputType = {
    id: string | null
    id_product: string | null
    id_comentario: string | null
  }

  export type ComentarioRealationsCountAggregateOutputType = {
    id: number
    id_product: number
    id_comentario: number
    _all: number
  }


  export type ComentarioRealationsMinAggregateInputType = {
    id?: true
    id_product?: true
    id_comentario?: true
  }

  export type ComentarioRealationsMaxAggregateInputType = {
    id?: true
    id_product?: true
    id_comentario?: true
  }

  export type ComentarioRealationsCountAggregateInputType = {
    id?: true
    id_product?: true
    id_comentario?: true
    _all?: true
  }

  export type ComentarioRealationsAggregateArgs = {
    /**
     * Filter which ComentarioRealations to aggregate.
     */
    where?: ComentarioRealationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComentarioRealations to fetch.
     */
    orderBy?: Enumerable<ComentarioRealationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComentarioRealationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComentarioRealations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComentarioRealations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComentarioRealations
    **/
    _count?: true | ComentarioRealationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComentarioRealationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComentarioRealationsMaxAggregateInputType
  }

  export type GetComentarioRealationsAggregateType<T extends ComentarioRealationsAggregateArgs> = {
        [P in keyof T & keyof AggregateComentarioRealations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComentarioRealations[P]>
      : GetScalarType<T[P], AggregateComentarioRealations[P]>
  }




  export type ComentarioRealationsGroupByArgs = {
    where?: ComentarioRealationsWhereInput
    orderBy?: Enumerable<ComentarioRealationsOrderByWithAggregationInput>
    by: ComentarioRealationsScalarFieldEnum[]
    having?: ComentarioRealationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComentarioRealationsCountAggregateInputType | true
    _min?: ComentarioRealationsMinAggregateInputType
    _max?: ComentarioRealationsMaxAggregateInputType
  }


  export type ComentarioRealationsGroupByOutputType = {
    id: string
    id_product: string
    id_comentario: string
    _count: ComentarioRealationsCountAggregateOutputType | null
    _min: ComentarioRealationsMinAggregateOutputType | null
    _max: ComentarioRealationsMaxAggregateOutputType | null
  }

  type GetComentarioRealationsGroupByPayload<T extends ComentarioRealationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ComentarioRealationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComentarioRealationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComentarioRealationsGroupByOutputType[P]>
            : GetScalarType<T[P], ComentarioRealationsGroupByOutputType[P]>
        }
      >
    >


  export type ComentarioRealationsSelect = {
    id?: boolean
    id_product?: boolean
    id_comentario?: boolean
    comentarios?: boolean | ComentariosArgs
    product?: boolean | ProductArgs
  }


  export type ComentarioRealationsInclude = {
    comentarios?: boolean | ComentariosArgs
    product?: boolean | ProductArgs
  }

  export type ComentarioRealationsGetPayload<S extends boolean | null | undefined | ComentarioRealationsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ComentarioRealations :
    S extends undefined ? never :
    S extends { include: any } & (ComentarioRealationsArgs | ComentarioRealationsFindManyArgs)
    ? ComentarioRealations  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comentarios' ? ComentariosGetPayload<S['include'][P]> :
        P extends 'product' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ComentarioRealationsArgs | ComentarioRealationsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comentarios' ? ComentariosGetPayload<S['select'][P]> :
        P extends 'product' ? ProductGetPayload<S['select'][P]> :  P extends keyof ComentarioRealations ? ComentarioRealations[P] : never
  } 
      : ComentarioRealations


  type ComentarioRealationsCountArgs = 
    Omit<ComentarioRealationsFindManyArgs, 'select' | 'include'> & {
      select?: ComentarioRealationsCountAggregateInputType | true
    }

  export interface ComentarioRealationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ComentarioRealations that matches the filter.
     * @param {ComentarioRealationsFindUniqueArgs} args - Arguments to find a ComentarioRealations
     * @example
     * // Get one ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ComentarioRealationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ComentarioRealationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ComentarioRealations'> extends True ? Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T>> : Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T> | null, null>

    /**
     * Find one ComentarioRealations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ComentarioRealationsFindUniqueOrThrowArgs} args - Arguments to find a ComentarioRealations
     * @example
     * // Get one ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ComentarioRealationsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ComentarioRealationsFindUniqueOrThrowArgs>
    ): Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T>>

    /**
     * Find the first ComentarioRealations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioRealationsFindFirstArgs} args - Arguments to find a ComentarioRealations
     * @example
     * // Get one ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ComentarioRealationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ComentarioRealationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ComentarioRealations'> extends True ? Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T>> : Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T> | null, null>

    /**
     * Find the first ComentarioRealations that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioRealationsFindFirstOrThrowArgs} args - Arguments to find a ComentarioRealations
     * @example
     * // Get one ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ComentarioRealationsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ComentarioRealationsFindFirstOrThrowArgs>
    ): Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T>>

    /**
     * Find zero or more ComentarioRealations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioRealationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.findMany()
     * 
     * // Get first 10 ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comentarioRealationsWithIdOnly = await prisma.comentarioRealations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ComentarioRealationsFindManyArgs>(
      args?: SelectSubset<T, ComentarioRealationsFindManyArgs>
    ): PrismaPromise<Array<ComentarioRealationsGetPayload<T>>>

    /**
     * Create a ComentarioRealations.
     * @param {ComentarioRealationsCreateArgs} args - Arguments to create a ComentarioRealations.
     * @example
     * // Create one ComentarioRealations
     * const ComentarioRealations = await prisma.comentarioRealations.create({
     *   data: {
     *     // ... data to create a ComentarioRealations
     *   }
     * })
     * 
    **/
    create<T extends ComentarioRealationsCreateArgs>(
      args: SelectSubset<T, ComentarioRealationsCreateArgs>
    ): Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T>>

    /**
     * Create many ComentarioRealations.
     *     @param {ComentarioRealationsCreateManyArgs} args - Arguments to create many ComentarioRealations.
     *     @example
     *     // Create many ComentarioRealations
     *     const comentarioRealations = await prisma.comentarioRealations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ComentarioRealationsCreateManyArgs>(
      args?: SelectSubset<T, ComentarioRealationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ComentarioRealations.
     * @param {ComentarioRealationsDeleteArgs} args - Arguments to delete one ComentarioRealations.
     * @example
     * // Delete one ComentarioRealations
     * const ComentarioRealations = await prisma.comentarioRealations.delete({
     *   where: {
     *     // ... filter to delete one ComentarioRealations
     *   }
     * })
     * 
    **/
    delete<T extends ComentarioRealationsDeleteArgs>(
      args: SelectSubset<T, ComentarioRealationsDeleteArgs>
    ): Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T>>

    /**
     * Update one ComentarioRealations.
     * @param {ComentarioRealationsUpdateArgs} args - Arguments to update one ComentarioRealations.
     * @example
     * // Update one ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ComentarioRealationsUpdateArgs>(
      args: SelectSubset<T, ComentarioRealationsUpdateArgs>
    ): Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T>>

    /**
     * Delete zero or more ComentarioRealations.
     * @param {ComentarioRealationsDeleteManyArgs} args - Arguments to filter ComentarioRealations to delete.
     * @example
     * // Delete a few ComentarioRealations
     * const { count } = await prisma.comentarioRealations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ComentarioRealationsDeleteManyArgs>(
      args?: SelectSubset<T, ComentarioRealationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComentarioRealations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioRealationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ComentarioRealationsUpdateManyArgs>(
      args: SelectSubset<T, ComentarioRealationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ComentarioRealations.
     * @param {ComentarioRealationsUpsertArgs} args - Arguments to update or create a ComentarioRealations.
     * @example
     * // Update or create a ComentarioRealations
     * const comentarioRealations = await prisma.comentarioRealations.upsert({
     *   create: {
     *     // ... data to create a ComentarioRealations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComentarioRealations we want to update
     *   }
     * })
    **/
    upsert<T extends ComentarioRealationsUpsertArgs>(
      args: SelectSubset<T, ComentarioRealationsUpsertArgs>
    ): Prisma__ComentarioRealationsClient<ComentarioRealationsGetPayload<T>>

    /**
     * Count the number of ComentarioRealations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioRealationsCountArgs} args - Arguments to filter ComentarioRealations to count.
     * @example
     * // Count the number of ComentarioRealations
     * const count = await prisma.comentarioRealations.count({
     *   where: {
     *     // ... the filter for the ComentarioRealations we want to count
     *   }
     * })
    **/
    count<T extends ComentarioRealationsCountArgs>(
      args?: Subset<T, ComentarioRealationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComentarioRealationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComentarioRealations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioRealationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComentarioRealationsAggregateArgs>(args: Subset<T, ComentarioRealationsAggregateArgs>): PrismaPromise<GetComentarioRealationsAggregateType<T>>

    /**
     * Group by ComentarioRealations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioRealationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComentarioRealationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComentarioRealationsGroupByArgs['orderBy'] }
        : { orderBy?: ComentarioRealationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComentarioRealationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComentarioRealationsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ComentarioRealations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ComentarioRealationsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comentarios<T extends ComentariosArgs= {}>(args?: Subset<T, ComentariosArgs>): Prisma__ComentariosClient<ComentariosGetPayload<T> | Null>;

    product<T extends ProductArgs= {}>(args?: Subset<T, ProductArgs>): Prisma__ProductClient<ProductGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ComentarioRealations base type for findUnique actions
   */
  export type ComentarioRealationsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * Filter, which ComentarioRealations to fetch.
     */
    where: ComentarioRealationsWhereUniqueInput
  }

  /**
   * ComentarioRealations findUnique
   */
  export interface ComentarioRealationsFindUniqueArgs extends ComentarioRealationsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ComentarioRealations findUniqueOrThrow
   */
  export type ComentarioRealationsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * Filter, which ComentarioRealations to fetch.
     */
    where: ComentarioRealationsWhereUniqueInput
  }


  /**
   * ComentarioRealations base type for findFirst actions
   */
  export type ComentarioRealationsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * Filter, which ComentarioRealations to fetch.
     */
    where?: ComentarioRealationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComentarioRealations to fetch.
     */
    orderBy?: Enumerable<ComentarioRealationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComentarioRealations.
     */
    cursor?: ComentarioRealationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComentarioRealations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComentarioRealations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComentarioRealations.
     */
    distinct?: Enumerable<ComentarioRealationsScalarFieldEnum>
  }

  /**
   * ComentarioRealations findFirst
   */
  export interface ComentarioRealationsFindFirstArgs extends ComentarioRealationsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ComentarioRealations findFirstOrThrow
   */
  export type ComentarioRealationsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * Filter, which ComentarioRealations to fetch.
     */
    where?: ComentarioRealationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComentarioRealations to fetch.
     */
    orderBy?: Enumerable<ComentarioRealationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComentarioRealations.
     */
    cursor?: ComentarioRealationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComentarioRealations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComentarioRealations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComentarioRealations.
     */
    distinct?: Enumerable<ComentarioRealationsScalarFieldEnum>
  }


  /**
   * ComentarioRealations findMany
   */
  export type ComentarioRealationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * Filter, which ComentarioRealations to fetch.
     */
    where?: ComentarioRealationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComentarioRealations to fetch.
     */
    orderBy?: Enumerable<ComentarioRealationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComentarioRealations.
     */
    cursor?: ComentarioRealationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComentarioRealations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComentarioRealations.
     */
    skip?: number
    distinct?: Enumerable<ComentarioRealationsScalarFieldEnum>
  }


  /**
   * ComentarioRealations create
   */
  export type ComentarioRealationsCreateArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * The data needed to create a ComentarioRealations.
     */
    data: XOR<ComentarioRealationsCreateInput, ComentarioRealationsUncheckedCreateInput>
  }


  /**
   * ComentarioRealations createMany
   */
  export type ComentarioRealationsCreateManyArgs = {
    /**
     * The data used to create many ComentarioRealations.
     */
    data: Enumerable<ComentarioRealationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ComentarioRealations update
   */
  export type ComentarioRealationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * The data needed to update a ComentarioRealations.
     */
    data: XOR<ComentarioRealationsUpdateInput, ComentarioRealationsUncheckedUpdateInput>
    /**
     * Choose, which ComentarioRealations to update.
     */
    where: ComentarioRealationsWhereUniqueInput
  }


  /**
   * ComentarioRealations updateMany
   */
  export type ComentarioRealationsUpdateManyArgs = {
    /**
     * The data used to update ComentarioRealations.
     */
    data: XOR<ComentarioRealationsUpdateManyMutationInput, ComentarioRealationsUncheckedUpdateManyInput>
    /**
     * Filter which ComentarioRealations to update
     */
    where?: ComentarioRealationsWhereInput
  }


  /**
   * ComentarioRealations upsert
   */
  export type ComentarioRealationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * The filter to search for the ComentarioRealations to update in case it exists.
     */
    where: ComentarioRealationsWhereUniqueInput
    /**
     * In case the ComentarioRealations found by the `where` argument doesn't exist, create a new ComentarioRealations with this data.
     */
    create: XOR<ComentarioRealationsCreateInput, ComentarioRealationsUncheckedCreateInput>
    /**
     * In case the ComentarioRealations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComentarioRealationsUpdateInput, ComentarioRealationsUncheckedUpdateInput>
  }


  /**
   * ComentarioRealations delete
   */
  export type ComentarioRealationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
    /**
     * Filter which ComentarioRealations to delete.
     */
    where: ComentarioRealationsWhereUniqueInput
  }


  /**
   * ComentarioRealations deleteMany
   */
  export type ComentarioRealationsDeleteManyArgs = {
    /**
     * Filter which ComentarioRealations to delete
     */
    where?: ComentarioRealationsWhereInput
  }


  /**
   * ComentarioRealations without action
   */
  export type ComentarioRealationsArgs = {
    /**
     * Select specific fields to fetch from the ComentarioRealations
     */
    select?: ComentarioRealationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComentarioRealationsInclude | null
  }



  /**
   * Model Favorito
   */


  export type AggregateFavorito = {
    _count: FavoritoCountAggregateOutputType | null
    _min: FavoritoMinAggregateOutputType | null
    _max: FavoritoMaxAggregateOutputType | null
  }

  export type FavoritoMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: string | null
    description: string | null
    quantity: string | null
    url_product: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type FavoritoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: string | null
    description: string | null
    quantity: string | null
    url_product: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type FavoritoCountAggregateOutputType = {
    id: number
    name: number
    bar_code: number
    price: number
    image: number
    size: number
    color: number
    slug: number
    description: number
    quantity: number
    url_product: number
    created_at: number
    update_at: number
    _all: number
  }


  export type FavoritoMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
    quantity?: true
    url_product?: true
    created_at?: true
    update_at?: true
  }

  export type FavoritoMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    description?: true
    quantity?: true
    url_product?: true
    created_at?: true
    update_at?: true
  }

  export type FavoritoCountAggregateInputType = {
    id?: true
    name?: true
    bar_code?: true
    price?: true
    image?: true
    size?: true
    color?: true
    slug?: true
    description?: true
    quantity?: true
    url_product?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type FavoritoAggregateArgs = {
    /**
     * Filter which Favorito to aggregate.
     */
    where?: FavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favoritos to fetch.
     */
    orderBy?: Enumerable<FavoritoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favoritos
    **/
    _count?: true | FavoritoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoritoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoritoMaxAggregateInputType
  }

  export type GetFavoritoAggregateType<T extends FavoritoAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorito]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorito[P]>
      : GetScalarType<T[P], AggregateFavorito[P]>
  }




  export type FavoritoGroupByArgs = {
    where?: FavoritoWhereInput
    orderBy?: Enumerable<FavoritoOrderByWithAggregationInput>
    by: FavoritoScalarFieldEnum[]
    having?: FavoritoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoritoCountAggregateInputType | true
    _min?: FavoritoMinAggregateInputType
    _max?: FavoritoMaxAggregateInputType
  }


  export type FavoritoGroupByOutputType = {
    id: string
    name: string
    bar_code: string[]
    price: string
    image: string[]
    size: string[]
    color: string[]
    slug: string[]
    description: string
    quantity: string
    url_product: string
    created_at: Date
    update_at: Date
    _count: FavoritoCountAggregateOutputType | null
    _min: FavoritoMinAggregateOutputType | null
    _max: FavoritoMaxAggregateOutputType | null
  }

  type GetFavoritoGroupByPayload<T extends FavoritoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FavoritoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoritoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoritoGroupByOutputType[P]>
            : GetScalarType<T[P], FavoritoGroupByOutputType[P]>
        }
      >
    >


  export type FavoritoSelect = {
    id?: boolean
    name?: boolean
    bar_code?: boolean
    price?: boolean
    image?: boolean
    size?: boolean
    color?: boolean
    slug?: boolean
    description?: boolean
    quantity?: boolean
    url_product?: boolean
    created_at?: boolean
    update_at?: boolean
  }


  export type FavoritoGetPayload<S extends boolean | null | undefined | FavoritoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Favorito :
    S extends undefined ? never :
    S extends { include: any } & (FavoritoArgs | FavoritoFindManyArgs)
    ? Favorito 
    : S extends { select: any } & (FavoritoArgs | FavoritoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Favorito ? Favorito[P] : never
  } 
      : Favorito


  type FavoritoCountArgs = 
    Omit<FavoritoFindManyArgs, 'select' | 'include'> & {
      select?: FavoritoCountAggregateInputType | true
    }

  export interface FavoritoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Favorito that matches the filter.
     * @param {FavoritoFindUniqueArgs} args - Arguments to find a Favorito
     * @example
     * // Get one Favorito
     * const favorito = await prisma.favorito.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavoritoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FavoritoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Favorito'> extends True ? Prisma__FavoritoClient<FavoritoGetPayload<T>> : Prisma__FavoritoClient<FavoritoGetPayload<T> | null, null>

    /**
     * Find one Favorito that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavoritoFindUniqueOrThrowArgs} args - Arguments to find a Favorito
     * @example
     * // Get one Favorito
     * const favorito = await prisma.favorito.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavoritoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FavoritoFindUniqueOrThrowArgs>
    ): Prisma__FavoritoClient<FavoritoGetPayload<T>>

    /**
     * Find the first Favorito that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoFindFirstArgs} args - Arguments to find a Favorito
     * @example
     * // Get one Favorito
     * const favorito = await prisma.favorito.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavoritoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FavoritoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Favorito'> extends True ? Prisma__FavoritoClient<FavoritoGetPayload<T>> : Prisma__FavoritoClient<FavoritoGetPayload<T> | null, null>

    /**
     * Find the first Favorito that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoFindFirstOrThrowArgs} args - Arguments to find a Favorito
     * @example
     * // Get one Favorito
     * const favorito = await prisma.favorito.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavoritoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FavoritoFindFirstOrThrowArgs>
    ): Prisma__FavoritoClient<FavoritoGetPayload<T>>

    /**
     * Find zero or more Favoritos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favoritos
     * const favoritos = await prisma.favorito.findMany()
     * 
     * // Get first 10 Favoritos
     * const favoritos = await prisma.favorito.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoritoWithIdOnly = await prisma.favorito.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FavoritoFindManyArgs>(
      args?: SelectSubset<T, FavoritoFindManyArgs>
    ): PrismaPromise<Array<FavoritoGetPayload<T>>>

    /**
     * Create a Favorito.
     * @param {FavoritoCreateArgs} args - Arguments to create a Favorito.
     * @example
     * // Create one Favorito
     * const Favorito = await prisma.favorito.create({
     *   data: {
     *     // ... data to create a Favorito
     *   }
     * })
     * 
    **/
    create<T extends FavoritoCreateArgs>(
      args: SelectSubset<T, FavoritoCreateArgs>
    ): Prisma__FavoritoClient<FavoritoGetPayload<T>>

    /**
     * Create many Favoritos.
     *     @param {FavoritoCreateManyArgs} args - Arguments to create many Favoritos.
     *     @example
     *     // Create many Favoritos
     *     const favorito = await prisma.favorito.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavoritoCreateManyArgs>(
      args?: SelectSubset<T, FavoritoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Favorito.
     * @param {FavoritoDeleteArgs} args - Arguments to delete one Favorito.
     * @example
     * // Delete one Favorito
     * const Favorito = await prisma.favorito.delete({
     *   where: {
     *     // ... filter to delete one Favorito
     *   }
     * })
     * 
    **/
    delete<T extends FavoritoDeleteArgs>(
      args: SelectSubset<T, FavoritoDeleteArgs>
    ): Prisma__FavoritoClient<FavoritoGetPayload<T>>

    /**
     * Update one Favorito.
     * @param {FavoritoUpdateArgs} args - Arguments to update one Favorito.
     * @example
     * // Update one Favorito
     * const favorito = await prisma.favorito.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavoritoUpdateArgs>(
      args: SelectSubset<T, FavoritoUpdateArgs>
    ): Prisma__FavoritoClient<FavoritoGetPayload<T>>

    /**
     * Delete zero or more Favoritos.
     * @param {FavoritoDeleteManyArgs} args - Arguments to filter Favoritos to delete.
     * @example
     * // Delete a few Favoritos
     * const { count } = await prisma.favorito.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavoritoDeleteManyArgs>(
      args?: SelectSubset<T, FavoritoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favoritos
     * const favorito = await prisma.favorito.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavoritoUpdateManyArgs>(
      args: SelectSubset<T, FavoritoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Favorito.
     * @param {FavoritoUpsertArgs} args - Arguments to update or create a Favorito.
     * @example
     * // Update or create a Favorito
     * const favorito = await prisma.favorito.upsert({
     *   create: {
     *     // ... data to create a Favorito
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorito we want to update
     *   }
     * })
    **/
    upsert<T extends FavoritoUpsertArgs>(
      args: SelectSubset<T, FavoritoUpsertArgs>
    ): Prisma__FavoritoClient<FavoritoGetPayload<T>>

    /**
     * Count the number of Favoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoCountArgs} args - Arguments to filter Favoritos to count.
     * @example
     * // Count the number of Favoritos
     * const count = await prisma.favorito.count({
     *   where: {
     *     // ... the filter for the Favoritos we want to count
     *   }
     * })
    **/
    count<T extends FavoritoCountArgs>(
      args?: Subset<T, FavoritoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoritoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoritoAggregateArgs>(args: Subset<T, FavoritoAggregateArgs>): PrismaPromise<GetFavoritoAggregateType<T>>

    /**
     * Group by Favorito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoritoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoritoGroupByArgs['orderBy'] }
        : { orderBy?: FavoritoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoritoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoritoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorito.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FavoritoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Favorito base type for findUnique actions
   */
  export type FavoritoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * Filter, which Favorito to fetch.
     */
    where: FavoritoWhereUniqueInput
  }

  /**
   * Favorito findUnique
   */
  export interface FavoritoFindUniqueArgs extends FavoritoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Favorito findUniqueOrThrow
   */
  export type FavoritoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * Filter, which Favorito to fetch.
     */
    where: FavoritoWhereUniqueInput
  }


  /**
   * Favorito base type for findFirst actions
   */
  export type FavoritoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * Filter, which Favorito to fetch.
     */
    where?: FavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favoritos to fetch.
     */
    orderBy?: Enumerable<FavoritoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favoritos.
     */
    cursor?: FavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favoritos.
     */
    distinct?: Enumerable<FavoritoScalarFieldEnum>
  }

  /**
   * Favorito findFirst
   */
  export interface FavoritoFindFirstArgs extends FavoritoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Favorito findFirstOrThrow
   */
  export type FavoritoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * Filter, which Favorito to fetch.
     */
    where?: FavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favoritos to fetch.
     */
    orderBy?: Enumerable<FavoritoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favoritos.
     */
    cursor?: FavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favoritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favoritos.
     */
    distinct?: Enumerable<FavoritoScalarFieldEnum>
  }


  /**
   * Favorito findMany
   */
  export type FavoritoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * Filter, which Favoritos to fetch.
     */
    where?: FavoritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favoritos to fetch.
     */
    orderBy?: Enumerable<FavoritoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favoritos.
     */
    cursor?: FavoritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favoritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favoritos.
     */
    skip?: number
    distinct?: Enumerable<FavoritoScalarFieldEnum>
  }


  /**
   * Favorito create
   */
  export type FavoritoCreateArgs = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * The data needed to create a Favorito.
     */
    data: XOR<FavoritoCreateInput, FavoritoUncheckedCreateInput>
  }


  /**
   * Favorito createMany
   */
  export type FavoritoCreateManyArgs = {
    /**
     * The data used to create many Favoritos.
     */
    data: Enumerable<FavoritoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Favorito update
   */
  export type FavoritoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * The data needed to update a Favorito.
     */
    data: XOR<FavoritoUpdateInput, FavoritoUncheckedUpdateInput>
    /**
     * Choose, which Favorito to update.
     */
    where: FavoritoWhereUniqueInput
  }


  /**
   * Favorito updateMany
   */
  export type FavoritoUpdateManyArgs = {
    /**
     * The data used to update Favoritos.
     */
    data: XOR<FavoritoUpdateManyMutationInput, FavoritoUncheckedUpdateManyInput>
    /**
     * Filter which Favoritos to update
     */
    where?: FavoritoWhereInput
  }


  /**
   * Favorito upsert
   */
  export type FavoritoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * The filter to search for the Favorito to update in case it exists.
     */
    where: FavoritoWhereUniqueInput
    /**
     * In case the Favorito found by the `where` argument doesn't exist, create a new Favorito with this data.
     */
    create: XOR<FavoritoCreateInput, FavoritoUncheckedCreateInput>
    /**
     * In case the Favorito was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoritoUpdateInput, FavoritoUncheckedUpdateInput>
  }


  /**
   * Favorito delete
   */
  export type FavoritoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
    /**
     * Filter which Favorito to delete.
     */
    where: FavoritoWhereUniqueInput
  }


  /**
   * Favorito deleteMany
   */
  export type FavoritoDeleteManyArgs = {
    /**
     * Filter which Favoritos to delete
     */
    where?: FavoritoWhereInput
  }


  /**
   * Favorito without action
   */
  export type FavoritoArgs = {
    /**
     * Select specific fields to fetch from the Favorito
     */
    select?: FavoritoSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    password: 'password',
    image: 'image',
    age: 'age',
    access: 'access',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AdressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    city: 'city',
    state: 'state',
    cep: 'cep',
    number: 'number',
    district: 'district',
    apartment_or_house: 'apartment_or_house',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type AdressScalarFieldEnum = (typeof AdressScalarFieldEnum)[keyof typeof AdressScalarFieldEnum]


  export const RelationsAdressScalarFieldEnum: {
    id: 'id',
    id_user: 'id_user',
    id_adress: 'id_adress'
  };

  export type RelationsAdressScalarFieldEnum = (typeof RelationsAdressScalarFieldEnum)[keyof typeof RelationsAdressScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    image: 'image',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    bar_code: 'bar_code',
    price: 'price',
    image: 'image',
    size: 'size',
    color: 'color',
    slug: 'slug',
    description: 'description',
    quantity: 'quantity',
    url_product: 'url_product',
    created_at: 'created_at'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const Product_CategoryScalarFieldEnum: {
    id: 'id',
    id_product: 'id_product',
    id_category: 'id_category'
  };

  export type Product_CategoryScalarFieldEnum = (typeof Product_CategoryScalarFieldEnum)[keyof typeof Product_CategoryScalarFieldEnum]


  export const CompraScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    street: 'street',
    city: 'city',
    state: 'state',
    cep: 'cep',
    number: 'number',
    district: 'district',
    apartment_or_house: 'apartment_or_house',
    created_at: 'created_at',
    update_at: 'update_at',
    code_compra: 'code_compra',
    productName: 'productName',
    productPrice: 'productPrice',
    productImage: 'productImage',
    productSize: 'productSize',
    productClolor: 'productClolor',
    productQuantity: 'productQuantity',
    productUrl: 'productUrl'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const Compra1ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    street: 'street',
    city: 'city',
    state: 'state',
    cep: 'cep',
    number: 'number',
    district: 'district',
    apartment_or_house: 'apartment_or_house',
    created_at: 'created_at',
    update_at: 'update_at',
    code_compra: 'code_compra',
    productName: 'productName',
    productPrice: 'productPrice',
    productImage: 'productImage',
    productSize: 'productSize',
    productClolor: 'productClolor',
    productQuantity: 'productQuantity',
    productUrl: 'productUrl'
  };

  export type Compra1ScalarFieldEnum = (typeof Compra1ScalarFieldEnum)[keyof typeof Compra1ScalarFieldEnum]


  export const Compra2ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    street: 'street',
    city: 'city',
    state: 'state',
    cep: 'cep',
    number: 'number',
    district: 'district',
    apartment_or_house: 'apartment_or_house',
    created_at: 'created_at',
    update_at: 'update_at',
    code_compra: 'code_compra',
    productName: 'productName',
    productPrice: 'productPrice',
    productImage: 'productImage',
    productSize: 'productSize',
    productClolor: 'productClolor',
    productQuantity: 'productQuantity',
    productUrl: 'productUrl'
  };

  export type Compra2ScalarFieldEnum = (typeof Compra2ScalarFieldEnum)[keyof typeof Compra2ScalarFieldEnum]


  export const Compra3ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    street: 'street',
    city: 'city',
    state: 'state',
    cep: 'cep',
    number: 'number',
    district: 'district',
    apartment_or_house: 'apartment_or_house',
    created_at: 'created_at',
    update_at: 'update_at',
    code_compra: 'code_compra',
    productName: 'productName',
    productPrice: 'productPrice',
    productImage: 'productImage',
    productSize: 'productSize',
    productClolor: 'productClolor',
    productQuantity: 'productQuantity',
    productUrl: 'productUrl'
  };

  export type Compra3ScalarFieldEnum = (typeof Compra3ScalarFieldEnum)[keyof typeof Compra3ScalarFieldEnum]


  export const Compra4ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    email: 'email',
    street: 'street',
    city: 'city',
    state: 'state',
    cep: 'cep',
    number: 'number',
    district: 'district',
    apartment_or_house: 'apartment_or_house',
    created_at: 'created_at',
    update_at: 'update_at',
    code_compra: 'code_compra',
    productName: 'productName',
    productPrice: 'productPrice',
    productImage: 'productImage',
    productSize: 'productSize',
    productClolor: 'productClolor',
    productQuantity: 'productQuantity',
    productUrl: 'productUrl'
  };

  export type Compra4ScalarFieldEnum = (typeof Compra4ScalarFieldEnum)[keyof typeof Compra4ScalarFieldEnum]


  export const CompraRealationsScalarFieldEnum: {
    id: 'id',
    id_products: 'id_products',
    id_compra: 'id_compra'
  };

  export type CompraRealationsScalarFieldEnum = (typeof CompraRealationsScalarFieldEnum)[keyof typeof CompraRealationsScalarFieldEnum]


  export const PromocaoScalarFieldEnum: {
    id: 'id',
    promocao: 'promocao',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type PromocaoScalarFieldEnum = (typeof PromocaoScalarFieldEnum)[keyof typeof PromocaoScalarFieldEnum]


  export const OfertasScalarFieldEnum: {
    id: 'id',
    ofertas: 'ofertas',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type OfertasScalarFieldEnum = (typeof OfertasScalarFieldEnum)[keyof typeof OfertasScalarFieldEnum]


  export const SlidsScalarFieldEnum: {
    id: 'id',
    slids: 'slids',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type SlidsScalarFieldEnum = (typeof SlidsScalarFieldEnum)[keyof typeof SlidsScalarFieldEnum]


  export const BannesScalarFieldEnum: {
    id: 'id',
    bannes: 'bannes',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type BannesScalarFieldEnum = (typeof BannesScalarFieldEnum)[keyof typeof BannesScalarFieldEnum]


  export const ComentariosScalarFieldEnum: {
    id: 'id',
    imgName: 'imgName',
    image: 'image',
    name: 'name',
    message: 'message',
    estrela: 'estrela',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type ComentariosScalarFieldEnum = (typeof ComentariosScalarFieldEnum)[keyof typeof ComentariosScalarFieldEnum]


  export const ComentarioRealationsScalarFieldEnum: {
    id: 'id',
    id_product: 'id_product',
    id_comentario: 'id_comentario'
  };

  export type ComentarioRealationsScalarFieldEnum = (typeof ComentarioRealationsScalarFieldEnum)[keyof typeof ComentarioRealationsScalarFieldEnum]


  export const FavoritoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    bar_code: 'bar_code',
    price: 'price',
    image: 'image',
    size: 'size',
    color: 'color',
    slug: 'slug',
    description: 'description',
    quantity: 'quantity',
    url_product: 'url_product',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type FavoritoScalarFieldEnum = (typeof FavoritoScalarFieldEnum)[keyof typeof FavoritoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    phone?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    image?: StringNullableFilter | string | null
    age?: StringFilter | string
    access?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    RelationsAdress?: RelationsAdressListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    age?: SortOrder
    access?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    RelationsAdress?: RelationsAdressOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrderInput | SortOrder
    age?: SortOrder
    access?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    age?: StringWithAggregatesFilter | string
    access?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AdressWhereInput = {
    AND?: Enumerable<AdressWhereInput>
    OR?: Enumerable<AdressWhereInput>
    NOT?: Enumerable<AdressWhereInput>
    id?: StringFilter | string
    street?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    cep?: StringFilter | string
    number?: StringFilter | string
    district?: StringFilter | string
    apartment_or_house?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    RelationsAdress?: RelationsAdressListRelationFilter
  }

  export type AdressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    RelationsAdress?: RelationsAdressOrderByRelationAggregateInput
  }

  export type AdressWhereUniqueInput = {
    id?: string
  }

  export type AdressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: AdressCountOrderByAggregateInput
    _max?: AdressMaxOrderByAggregateInput
    _min?: AdressMinOrderByAggregateInput
  }

  export type AdressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdressScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdressScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    cep?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    district?: StringWithAggregatesFilter | string
    apartment_or_house?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RelationsAdressWhereInput = {
    AND?: Enumerable<RelationsAdressWhereInput>
    OR?: Enumerable<RelationsAdressWhereInput>
    NOT?: Enumerable<RelationsAdressWhereInput>
    id?: StringFilter | string
    id_user?: StringFilter | string
    id_adress?: StringFilter | string
    adress2?: XOR<AdressRelationFilter, AdressWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RelationsAdressOrderByWithRelationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_adress?: SortOrder
    adress2?: AdressOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RelationsAdressWhereUniqueInput = {
    id?: string
  }

  export type RelationsAdressOrderByWithAggregationInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_adress?: SortOrder
    _count?: RelationsAdressCountOrderByAggregateInput
    _max?: RelationsAdressMaxOrderByAggregateInput
    _min?: RelationsAdressMinOrderByAggregateInput
  }

  export type RelationsAdressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RelationsAdressScalarWhereWithAggregatesInput>
    OR?: Enumerable<RelationsAdressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RelationsAdressScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    id_user?: StringWithAggregatesFilter | string
    id_adress?: StringWithAggregatesFilter | string
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: StringFilter | string
    image?: StringFilter | string
    name?: StringFilter | string
    products_categories?: Product_CategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    products_categories?: Product_CategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: string
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    bar_code?: StringNullableListFilter
    price?: StringFilter | string
    image?: StringNullableListFilter
    size?: StringNullableListFilter
    color?: StringNullableListFilter
    slug?: StringNullableListFilter
    description?: StringFilter | string
    quantity?: StringFilter | string
    url_product?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    comprarealations?: CompraRealationsListRelationFilter
    products_categories?: Product_CategoryListRelationFilter
    comentariorealations?: ComentarioRealationsListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    bar_code?: SortOrder
    price?: SortOrder
    image?: SortOrder
    size?: SortOrder
    color?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
    comprarealations?: CompraRealationsOrderByRelationAggregateInput
    products_categories?: Product_CategoryOrderByRelationAggregateInput
    comentariorealations?: ComentarioRealationsOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = {
    id?: string
  }

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    bar_code?: SortOrder
    price?: SortOrder
    image?: SortOrder
    size?: SortOrder
    color?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    bar_code?: StringNullableListFilter
    price?: StringWithAggregatesFilter | string
    image?: StringNullableListFilter
    size?: StringNullableListFilter
    color?: StringNullableListFilter
    slug?: StringNullableListFilter
    description?: StringWithAggregatesFilter | string
    quantity?: StringWithAggregatesFilter | string
    url_product?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Product_CategoryWhereInput = {
    AND?: Enumerable<Product_CategoryWhereInput>
    OR?: Enumerable<Product_CategoryWhereInput>
    NOT?: Enumerable<Product_CategoryWhereInput>
    id?: StringFilter | string
    id_product?: StringFilter | string
    id_category?: StringFilter | string
    categories?: XOR<CategoryRelationFilter, CategoryWhereInput>
    products?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type Product_CategoryOrderByWithRelationInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_category?: SortOrder
    categories?: CategoryOrderByWithRelationInput
    products?: ProductOrderByWithRelationInput
  }

  export type Product_CategoryWhereUniqueInput = {
    id?: string
  }

  export type Product_CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_category?: SortOrder
    _count?: Product_CategoryCountOrderByAggregateInput
    _max?: Product_CategoryMaxOrderByAggregateInput
    _min?: Product_CategoryMinOrderByAggregateInput
  }

  export type Product_CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Product_CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<Product_CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Product_CategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    id_product?: StringWithAggregatesFilter | string
    id_category?: StringWithAggregatesFilter | string
  }

  export type CompraWhereInput = {
    AND?: Enumerable<CompraWhereInput>
    OR?: Enumerable<CompraWhereInput>
    NOT?: Enumerable<CompraWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    phone?: StringFilter | string
    email?: StringFilter | string
    street?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    cep?: StringFilter | string
    number?: StringFilter | string
    district?: StringFilter | string
    apartment_or_house?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    code_compra?: StringFilter | string
    productName?: StringFilter | string
    productPrice?: StringFilter | string
    productImage?: StringFilter | string
    productSize?: StringFilter | string
    productClolor?: StringFilter | string
    productQuantity?: StringFilter | string
    productUrl?: StringFilter | string
    comprarealations?: CompraRealationsListRelationFilter
  }

  export type CompraOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
    comprarealations?: CompraRealationsOrderByRelationAggregateInput
  }

  export type CompraWhereUniqueInput = {
    id?: string
  }

  export type CompraOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
    _count?: CompraCountOrderByAggregateInput
    _max?: CompraMaxOrderByAggregateInput
    _min?: CompraMinOrderByAggregateInput
  }

  export type CompraScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompraScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompraScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompraScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    cep?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    district?: StringWithAggregatesFilter | string
    apartment_or_house?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
    code_compra?: StringWithAggregatesFilter | string
    productName?: StringWithAggregatesFilter | string
    productPrice?: StringWithAggregatesFilter | string
    productImage?: StringWithAggregatesFilter | string
    productSize?: StringWithAggregatesFilter | string
    productClolor?: StringWithAggregatesFilter | string
    productQuantity?: StringWithAggregatesFilter | string
    productUrl?: StringWithAggregatesFilter | string
  }

  export type Compra1WhereInput = {
    AND?: Enumerable<Compra1WhereInput>
    OR?: Enumerable<Compra1WhereInput>
    NOT?: Enumerable<Compra1WhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    phone?: StringFilter | string
    email?: StringFilter | string
    street?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    cep?: StringFilter | string
    number?: StringFilter | string
    district?: StringFilter | string
    apartment_or_house?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    code_compra?: StringFilter | string
    productName?: StringFilter | string
    productPrice?: StringFilter | string
    productImage?: StringFilter | string
    productSize?: StringFilter | string
    productClolor?: StringFilter | string
    productQuantity?: StringFilter | string
    productUrl?: StringFilter | string
  }

  export type Compra1OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra1WhereUniqueInput = {
    id?: string
  }

  export type Compra1OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
    _count?: Compra1CountOrderByAggregateInput
    _max?: Compra1MaxOrderByAggregateInput
    _min?: Compra1MinOrderByAggregateInput
  }

  export type Compra1ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Compra1ScalarWhereWithAggregatesInput>
    OR?: Enumerable<Compra1ScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Compra1ScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    cep?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    district?: StringWithAggregatesFilter | string
    apartment_or_house?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
    code_compra?: StringWithAggregatesFilter | string
    productName?: StringWithAggregatesFilter | string
    productPrice?: StringWithAggregatesFilter | string
    productImage?: StringWithAggregatesFilter | string
    productSize?: StringWithAggregatesFilter | string
    productClolor?: StringWithAggregatesFilter | string
    productQuantity?: StringWithAggregatesFilter | string
    productUrl?: StringWithAggregatesFilter | string
  }

  export type Compra2WhereInput = {
    AND?: Enumerable<Compra2WhereInput>
    OR?: Enumerable<Compra2WhereInput>
    NOT?: Enumerable<Compra2WhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    phone?: StringFilter | string
    email?: StringFilter | string
    street?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    cep?: StringFilter | string
    number?: StringFilter | string
    district?: StringFilter | string
    apartment_or_house?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    code_compra?: StringFilter | string
    productName?: StringFilter | string
    productPrice?: StringFilter | string
    productImage?: StringFilter | string
    productSize?: StringFilter | string
    productClolor?: StringFilter | string
    productQuantity?: StringFilter | string
    productUrl?: StringFilter | string
  }

  export type Compra2OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra2WhereUniqueInput = {
    id?: string
  }

  export type Compra2OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
    _count?: Compra2CountOrderByAggregateInput
    _max?: Compra2MaxOrderByAggregateInput
    _min?: Compra2MinOrderByAggregateInput
  }

  export type Compra2ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Compra2ScalarWhereWithAggregatesInput>
    OR?: Enumerable<Compra2ScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Compra2ScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    cep?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    district?: StringWithAggregatesFilter | string
    apartment_or_house?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
    code_compra?: StringWithAggregatesFilter | string
    productName?: StringWithAggregatesFilter | string
    productPrice?: StringWithAggregatesFilter | string
    productImage?: StringWithAggregatesFilter | string
    productSize?: StringWithAggregatesFilter | string
    productClolor?: StringWithAggregatesFilter | string
    productQuantity?: StringWithAggregatesFilter | string
    productUrl?: StringWithAggregatesFilter | string
  }

  export type Compra3WhereInput = {
    AND?: Enumerable<Compra3WhereInput>
    OR?: Enumerable<Compra3WhereInput>
    NOT?: Enumerable<Compra3WhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    phone?: StringFilter | string
    email?: StringFilter | string
    street?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    cep?: StringFilter | string
    number?: StringFilter | string
    district?: StringFilter | string
    apartment_or_house?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    code_compra?: StringFilter | string
    productName?: StringFilter | string
    productPrice?: StringFilter | string
    productImage?: StringFilter | string
    productSize?: StringFilter | string
    productClolor?: StringFilter | string
    productQuantity?: StringFilter | string
    productUrl?: StringFilter | string
  }

  export type Compra3OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra3WhereUniqueInput = {
    id?: string
  }

  export type Compra3OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
    _count?: Compra3CountOrderByAggregateInput
    _max?: Compra3MaxOrderByAggregateInput
    _min?: Compra3MinOrderByAggregateInput
  }

  export type Compra3ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Compra3ScalarWhereWithAggregatesInput>
    OR?: Enumerable<Compra3ScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Compra3ScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    cep?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    district?: StringWithAggregatesFilter | string
    apartment_or_house?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
    code_compra?: StringWithAggregatesFilter | string
    productName?: StringWithAggregatesFilter | string
    productPrice?: StringWithAggregatesFilter | string
    productImage?: StringWithAggregatesFilter | string
    productSize?: StringWithAggregatesFilter | string
    productClolor?: StringWithAggregatesFilter | string
    productQuantity?: StringWithAggregatesFilter | string
    productUrl?: StringWithAggregatesFilter | string
  }

  export type Compra4WhereInput = {
    AND?: Enumerable<Compra4WhereInput>
    OR?: Enumerable<Compra4WhereInput>
    NOT?: Enumerable<Compra4WhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    phone?: StringFilter | string
    email?: StringFilter | string
    street?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    cep?: StringFilter | string
    number?: StringFilter | string
    district?: StringFilter | string
    apartment_or_house?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    code_compra?: StringFilter | string
    productName?: StringFilter | string
    productPrice?: StringFilter | string
    productImage?: StringFilter | string
    productSize?: StringFilter | string
    productClolor?: StringFilter | string
    productQuantity?: StringFilter | string
    productUrl?: StringFilter | string
  }

  export type Compra4OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra4WhereUniqueInput = {
    id?: string
  }

  export type Compra4OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
    _count?: Compra4CountOrderByAggregateInput
    _max?: Compra4MaxOrderByAggregateInput
    _min?: Compra4MinOrderByAggregateInput
  }

  export type Compra4ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Compra4ScalarWhereWithAggregatesInput>
    OR?: Enumerable<Compra4ScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Compra4ScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    cep?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    district?: StringWithAggregatesFilter | string
    apartment_or_house?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
    code_compra?: StringWithAggregatesFilter | string
    productName?: StringWithAggregatesFilter | string
    productPrice?: StringWithAggregatesFilter | string
    productImage?: StringWithAggregatesFilter | string
    productSize?: StringWithAggregatesFilter | string
    productClolor?: StringWithAggregatesFilter | string
    productQuantity?: StringWithAggregatesFilter | string
    productUrl?: StringWithAggregatesFilter | string
  }

  export type CompraRealationsWhereInput = {
    AND?: Enumerable<CompraRealationsWhereInput>
    OR?: Enumerable<CompraRealationsWhereInput>
    NOT?: Enumerable<CompraRealationsWhereInput>
    id?: StringFilter | string
    id_products?: StringFilter | string
    id_compra?: StringFilter | string
    compra?: XOR<CompraRelationFilter, CompraWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type CompraRealationsOrderByWithRelationInput = {
    id?: SortOrder
    id_products?: SortOrder
    id_compra?: SortOrder
    compra?: CompraOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type CompraRealationsWhereUniqueInput = {
    id?: string
  }

  export type CompraRealationsOrderByWithAggregationInput = {
    id?: SortOrder
    id_products?: SortOrder
    id_compra?: SortOrder
    _count?: CompraRealationsCountOrderByAggregateInput
    _max?: CompraRealationsMaxOrderByAggregateInput
    _min?: CompraRealationsMinOrderByAggregateInput
  }

  export type CompraRealationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompraRealationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompraRealationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompraRealationsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    id_products?: StringWithAggregatesFilter | string
    id_compra?: StringWithAggregatesFilter | string
  }

  export type PromocaoWhereInput = {
    AND?: Enumerable<PromocaoWhereInput>
    OR?: Enumerable<PromocaoWhereInput>
    NOT?: Enumerable<PromocaoWhereInput>
    id?: StringFilter | string
    promocao?: StringNullableListFilter
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type PromocaoOrderByWithRelationInput = {
    id?: SortOrder
    promocao?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type PromocaoWhereUniqueInput = {
    id?: string
  }

  export type PromocaoOrderByWithAggregationInput = {
    id?: SortOrder
    promocao?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: PromocaoCountOrderByAggregateInput
    _max?: PromocaoMaxOrderByAggregateInput
    _min?: PromocaoMinOrderByAggregateInput
  }

  export type PromocaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PromocaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<PromocaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PromocaoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    promocao?: StringNullableListFilter
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OfertasWhereInput = {
    AND?: Enumerable<OfertasWhereInput>
    OR?: Enumerable<OfertasWhereInput>
    NOT?: Enumerable<OfertasWhereInput>
    id?: StringFilter | string
    ofertas?: StringNullableListFilter
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type OfertasOrderByWithRelationInput = {
    id?: SortOrder
    ofertas?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type OfertasWhereUniqueInput = {
    id?: string
  }

  export type OfertasOrderByWithAggregationInput = {
    id?: SortOrder
    ofertas?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: OfertasCountOrderByAggregateInput
    _max?: OfertasMaxOrderByAggregateInput
    _min?: OfertasMinOrderByAggregateInput
  }

  export type OfertasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OfertasScalarWhereWithAggregatesInput>
    OR?: Enumerable<OfertasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OfertasScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    ofertas?: StringNullableListFilter
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SlidsWhereInput = {
    AND?: Enumerable<SlidsWhereInput>
    OR?: Enumerable<SlidsWhereInput>
    NOT?: Enumerable<SlidsWhereInput>
    id?: StringFilter | string
    slids?: StringNullableListFilter
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type SlidsOrderByWithRelationInput = {
    id?: SortOrder
    slids?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type SlidsWhereUniqueInput = {
    id?: string
  }

  export type SlidsOrderByWithAggregationInput = {
    id?: SortOrder
    slids?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: SlidsCountOrderByAggregateInput
    _max?: SlidsMaxOrderByAggregateInput
    _min?: SlidsMinOrderByAggregateInput
  }

  export type SlidsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SlidsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SlidsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SlidsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    slids?: StringNullableListFilter
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BannesWhereInput = {
    AND?: Enumerable<BannesWhereInput>
    OR?: Enumerable<BannesWhereInput>
    NOT?: Enumerable<BannesWhereInput>
    id?: StringFilter | string
    bannes?: StringNullableListFilter
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type BannesOrderByWithRelationInput = {
    id?: SortOrder
    bannes?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type BannesWhereUniqueInput = {
    id?: string
  }

  export type BannesOrderByWithAggregationInput = {
    id?: SortOrder
    bannes?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: BannesCountOrderByAggregateInput
    _max?: BannesMaxOrderByAggregateInput
    _min?: BannesMinOrderByAggregateInput
  }

  export type BannesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BannesScalarWhereWithAggregatesInput>
    OR?: Enumerable<BannesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BannesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    bannes?: StringNullableListFilter
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ComentariosWhereInput = {
    AND?: Enumerable<ComentariosWhereInput>
    OR?: Enumerable<ComentariosWhereInput>
    NOT?: Enumerable<ComentariosWhereInput>
    id?: StringFilter | string
    imgName?: StringFilter | string
    image?: StringNullableListFilter
    name?: StringFilter | string
    message?: StringFilter | string
    estrela?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    comentariorealations?: ComentarioRealationsListRelationFilter
  }

  export type ComentariosOrderByWithRelationInput = {
    id?: SortOrder
    imgName?: SortOrder
    image?: SortOrder
    name?: SortOrder
    message?: SortOrder
    estrela?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    comentariorealations?: ComentarioRealationsOrderByRelationAggregateInput
  }

  export type ComentariosWhereUniqueInput = {
    id?: string
  }

  export type ComentariosOrderByWithAggregationInput = {
    id?: SortOrder
    imgName?: SortOrder
    image?: SortOrder
    name?: SortOrder
    message?: SortOrder
    estrela?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: ComentariosCountOrderByAggregateInput
    _max?: ComentariosMaxOrderByAggregateInput
    _min?: ComentariosMinOrderByAggregateInput
  }

  export type ComentariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ComentariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<ComentariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ComentariosScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    imgName?: StringWithAggregatesFilter | string
    image?: StringNullableListFilter
    name?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    estrela?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ComentarioRealationsWhereInput = {
    AND?: Enumerable<ComentarioRealationsWhereInput>
    OR?: Enumerable<ComentarioRealationsWhereInput>
    NOT?: Enumerable<ComentarioRealationsWhereInput>
    id?: StringFilter | string
    id_product?: StringFilter | string
    id_comentario?: StringFilter | string
    comentarios?: XOR<ComentariosRelationFilter, ComentariosWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type ComentarioRealationsOrderByWithRelationInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_comentario?: SortOrder
    comentarios?: ComentariosOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type ComentarioRealationsWhereUniqueInput = {
    id?: string
  }

  export type ComentarioRealationsOrderByWithAggregationInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_comentario?: SortOrder
    _count?: ComentarioRealationsCountOrderByAggregateInput
    _max?: ComentarioRealationsMaxOrderByAggregateInput
    _min?: ComentarioRealationsMinOrderByAggregateInput
  }

  export type ComentarioRealationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ComentarioRealationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ComentarioRealationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ComentarioRealationsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    id_product?: StringWithAggregatesFilter | string
    id_comentario?: StringWithAggregatesFilter | string
  }

  export type FavoritoWhereInput = {
    AND?: Enumerable<FavoritoWhereInput>
    OR?: Enumerable<FavoritoWhereInput>
    NOT?: Enumerable<FavoritoWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    bar_code?: StringNullableListFilter
    price?: StringFilter | string
    image?: StringNullableListFilter
    size?: StringNullableListFilter
    color?: StringNullableListFilter
    slug?: StringNullableListFilter
    description?: StringFilter | string
    quantity?: StringFilter | string
    url_product?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
  }

  export type FavoritoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    bar_code?: SortOrder
    price?: SortOrder
    image?: SortOrder
    size?: SortOrder
    color?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type FavoritoWhereUniqueInput = {
    id?: string
  }

  export type FavoritoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    bar_code?: SortOrder
    price?: SortOrder
    image?: SortOrder
    size?: SortOrder
    color?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: FavoritoCountOrderByAggregateInput
    _max?: FavoritoMaxOrderByAggregateInput
    _min?: FavoritoMinOrderByAggregateInput
  }

  export type FavoritoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FavoritoScalarWhereWithAggregatesInput>
    OR?: Enumerable<FavoritoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FavoritoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    bar_code?: StringNullableListFilter
    price?: StringWithAggregatesFilter | string
    image?: StringNullableListFilter
    size?: StringNullableListFilter
    color?: StringNullableListFilter
    slug?: StringNullableListFilter
    description?: StringWithAggregatesFilter | string
    quantity?: StringWithAggregatesFilter | string
    url_product?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    password: string
    image?: string | null
    age: string
    access: string
    created_at?: Date | string
    update_at?: Date | string
    RelationsAdress?: RelationsAdressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    password: string
    image?: string | null
    age: string
    access: string
    created_at?: Date | string
    update_at?: Date | string
    RelationsAdress?: RelationsAdressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    age?: StringFieldUpdateOperationsInput | string
    access?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RelationsAdress?: RelationsAdressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    age?: StringFieldUpdateOperationsInput | string
    access?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RelationsAdress?: RelationsAdressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    phone: string
    email: string
    password: string
    image?: string | null
    age: string
    access: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    age?: StringFieldUpdateOperationsInput | string
    access?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    age?: StringFieldUpdateOperationsInput | string
    access?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdressCreateInput = {
    id?: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    RelationsAdress?: RelationsAdressCreateNestedManyWithoutAdress2Input
  }

  export type AdressUncheckedCreateInput = {
    id?: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    RelationsAdress?: RelationsAdressUncheckedCreateNestedManyWithoutAdress2Input
  }

  export type AdressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RelationsAdress?: RelationsAdressUpdateManyWithoutAdress2NestedInput
  }

  export type AdressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RelationsAdress?: RelationsAdressUncheckedUpdateManyWithoutAdress2NestedInput
  }

  export type AdressCreateManyInput = {
    id?: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type AdressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelationsAdressCreateInput = {
    id?: string
    adress2: AdressCreateNestedOneWithoutRelationsAdressInput
    user: UserCreateNestedOneWithoutRelationsAdressInput
  }

  export type RelationsAdressUncheckedCreateInput = {
    id?: string
    id_user: string
    id_adress: string
  }

  export type RelationsAdressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adress2?: AdressUpdateOneRequiredWithoutRelationsAdressNestedInput
    user?: UserUpdateOneRequiredWithoutRelationsAdressNestedInput
  }

  export type RelationsAdressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    id_adress?: StringFieldUpdateOperationsInput | string
  }

  export type RelationsAdressCreateManyInput = {
    id?: string
    id_user: string
    id_adress: string
  }

  export type RelationsAdressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type RelationsAdressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    id_adress?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    image: string
    name: string
    products_categories?: Product_CategoryCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    image: string
    name: string
    products_categories?: Product_CategoryUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    products_categories?: Product_CategoryUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    products_categories?: Product_CategoryUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    image: string
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    comprarealations?: CompraRealationsCreateNestedManyWithoutProductInput
    products_categories?: Product_CategoryCreateNestedManyWithoutProductsInput
    comentariorealations?: ComentarioRealationsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    comprarealations?: CompraRealationsUncheckedCreateNestedManyWithoutProductInput
    products_categories?: Product_CategoryUncheckedCreateNestedManyWithoutProductsInput
    comentariorealations?: ComentarioRealationsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comprarealations?: CompraRealationsUpdateManyWithoutProductNestedInput
    products_categories?: Product_CategoryUpdateManyWithoutProductsNestedInput
    comentariorealations?: ComentarioRealationsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comprarealations?: CompraRealationsUncheckedUpdateManyWithoutProductNestedInput
    products_categories?: Product_CategoryUncheckedUpdateManyWithoutProductsNestedInput
    comentariorealations?: ComentarioRealationsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_CategoryCreateInput = {
    id?: string
    categories: CategoryCreateNestedOneWithoutProducts_categoriesInput
    products: ProductCreateNestedOneWithoutProducts_categoriesInput
  }

  export type Product_CategoryUncheckedCreateInput = {
    id?: string
    id_product: string
    id_category: string
  }

  export type Product_CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateOneRequiredWithoutProducts_categoriesNestedInput
    products?: ProductUpdateOneRequiredWithoutProducts_categoriesNestedInput
  }

  export type Product_CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
  }

  export type Product_CategoryCreateManyInput = {
    id?: string
    id_product: string
    id_category: string
  }

  export type Product_CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type Product_CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
  }

  export type CompraCreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
    comprarealations?: CompraRealationsCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
    comprarealations?: CompraRealationsUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    comprarealations?: CompraRealationsUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
    comprarealations?: CompraRealationsUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type CompraCreateManyInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type CompraUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type CompraUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra1CreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra1UncheckedCreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra1UpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra1UncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra1CreateManyInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra1UpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra1UncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra2CreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra2UncheckedCreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra2UpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra2UncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra2CreateManyInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra2UpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra2UncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra3CreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra3UncheckedCreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra3UpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra3UncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra3CreateManyInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra3UpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra3UncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra4CreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra4UncheckedCreateInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra4UpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra4UncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra4CreateManyInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type Compra4UpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Compra4UncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type CompraRealationsCreateInput = {
    id?: string
    compra: CompraCreateNestedOneWithoutComprarealationsInput
    product: ProductCreateNestedOneWithoutComprarealationsInput
  }

  export type CompraRealationsUncheckedCreateInput = {
    id?: string
    id_products: string
    id_compra: string
  }

  export type CompraRealationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    compra?: CompraUpdateOneRequiredWithoutComprarealationsNestedInput
    product?: ProductUpdateOneRequiredWithoutComprarealationsNestedInput
  }

  export type CompraRealationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_products?: StringFieldUpdateOperationsInput | string
    id_compra?: StringFieldUpdateOperationsInput | string
  }

  export type CompraRealationsCreateManyInput = {
    id?: string
    id_products: string
    id_compra: string
  }

  export type CompraRealationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type CompraRealationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_products?: StringFieldUpdateOperationsInput | string
    id_compra?: StringFieldUpdateOperationsInput | string
  }

  export type PromocaoCreateInput = {
    id?: string
    promocao?: PromocaoCreatepromocaoInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type PromocaoUncheckedCreateInput = {
    id?: string
    promocao?: PromocaoCreatepromocaoInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type PromocaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    promocao?: PromocaoUpdatepromocaoInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    promocao?: PromocaoUpdatepromocaoInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocaoCreateManyInput = {
    id?: string
    promocao?: PromocaoCreatepromocaoInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type PromocaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    promocao?: PromocaoUpdatepromocaoInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    promocao?: PromocaoUpdatepromocaoInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertasCreateInput = {
    id?: string
    ofertas?: OfertasCreateofertasInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type OfertasUncheckedCreateInput = {
    id?: string
    ofertas?: OfertasCreateofertasInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type OfertasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ofertas?: OfertasUpdateofertasInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ofertas?: OfertasUpdateofertasInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertasCreateManyInput = {
    id?: string
    ofertas?: OfertasCreateofertasInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type OfertasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ofertas?: OfertasUpdateofertasInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfertasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ofertas?: OfertasUpdateofertasInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlidsCreateInput = {
    id?: string
    slids?: SlidsCreateslidsInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type SlidsUncheckedCreateInput = {
    id?: string
    slids?: SlidsCreateslidsInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type SlidsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slids?: SlidsUpdateslidsInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlidsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slids?: SlidsUpdateslidsInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlidsCreateManyInput = {
    id?: string
    slids?: SlidsCreateslidsInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type SlidsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slids?: SlidsUpdateslidsInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlidsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    slids?: SlidsUpdateslidsInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BannesCreateInput = {
    id?: string
    bannes?: BannesCreatebannesInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type BannesUncheckedCreateInput = {
    id?: string
    bannes?: BannesCreatebannesInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type BannesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bannes?: BannesUpdatebannesInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BannesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bannes?: BannesUpdatebannesInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BannesCreateManyInput = {
    id?: string
    bannes?: BannesCreatebannesInput | Enumerable<string>
    created_at?: Date | string
    update_at?: Date | string
  }

  export type BannesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bannes?: BannesUpdatebannesInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BannesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bannes?: BannesUpdatebannesInput | Enumerable<string>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentariosCreateInput = {
    id?: string
    imgName: string
    image?: ComentariosCreateimageInput | Enumerable<string>
    name: string
    message: string
    estrela: string
    created_at?: Date | string
    update_at?: Date | string
    comentariorealations?: ComentarioRealationsCreateNestedManyWithoutComentariosInput
  }

  export type ComentariosUncheckedCreateInput = {
    id?: string
    imgName: string
    image?: ComentariosCreateimageInput | Enumerable<string>
    name: string
    message: string
    estrela: string
    created_at?: Date | string
    update_at?: Date | string
    comentariorealations?: ComentarioRealationsUncheckedCreateNestedManyWithoutComentariosInput
  }

  export type ComentariosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imgName?: StringFieldUpdateOperationsInput | string
    image?: ComentariosUpdateimageInput | Enumerable<string>
    name?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    estrela?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comentariorealations?: ComentarioRealationsUpdateManyWithoutComentariosNestedInput
  }

  export type ComentariosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imgName?: StringFieldUpdateOperationsInput | string
    image?: ComentariosUpdateimageInput | Enumerable<string>
    name?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    estrela?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comentariorealations?: ComentarioRealationsUncheckedUpdateManyWithoutComentariosNestedInput
  }

  export type ComentariosCreateManyInput = {
    id?: string
    imgName: string
    image?: ComentariosCreateimageInput | Enumerable<string>
    name: string
    message: string
    estrela: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type ComentariosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imgName?: StringFieldUpdateOperationsInput | string
    image?: ComentariosUpdateimageInput | Enumerable<string>
    name?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    estrela?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentariosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    imgName?: StringFieldUpdateOperationsInput | string
    image?: ComentariosUpdateimageInput | Enumerable<string>
    name?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    estrela?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentarioRealationsCreateInput = {
    id?: string
    comentarios: ComentariosCreateNestedOneWithoutComentariorealationsInput
    product: ProductCreateNestedOneWithoutComentariorealationsInput
  }

  export type ComentarioRealationsUncheckedCreateInput = {
    id?: string
    id_product: string
    id_comentario: string
  }

  export type ComentarioRealationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comentarios?: ComentariosUpdateOneRequiredWithoutComentariorealationsNestedInput
    product?: ProductUpdateOneRequiredWithoutComentariorealationsNestedInput
  }

  export type ComentarioRealationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    id_comentario?: StringFieldUpdateOperationsInput | string
  }

  export type ComentarioRealationsCreateManyInput = {
    id?: string
    id_product: string
    id_comentario: string
  }

  export type ComentarioRealationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ComentarioRealationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
    id_comentario?: StringFieldUpdateOperationsInput | string
  }

  export type FavoritoCreateInput = {
    id?: string
    name: string
    bar_code?: FavoritoCreatebar_codeInput | Enumerable<string>
    price: string
    image?: FavoritoCreateimageInput | Enumerable<string>
    size?: FavoritoCreatesizeInput | Enumerable<string>
    color?: FavoritoCreatecolorInput | Enumerable<string>
    slug?: FavoritoCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type FavoritoUncheckedCreateInput = {
    id?: string
    name: string
    bar_code?: FavoritoCreatebar_codeInput | Enumerable<string>
    price: string
    image?: FavoritoCreateimageInput | Enumerable<string>
    size?: FavoritoCreatesizeInput | Enumerable<string>
    color?: FavoritoCreatecolorInput | Enumerable<string>
    slug?: FavoritoCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type FavoritoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: FavoritoUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: FavoritoUpdateimageInput | Enumerable<string>
    size?: FavoritoUpdatesizeInput | Enumerable<string>
    color?: FavoritoUpdatecolorInput | Enumerable<string>
    slug?: FavoritoUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoritoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: FavoritoUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: FavoritoUpdateimageInput | Enumerable<string>
    size?: FavoritoUpdatesizeInput | Enumerable<string>
    color?: FavoritoUpdatecolorInput | Enumerable<string>
    slug?: FavoritoUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoritoCreateManyInput = {
    id?: string
    name: string
    bar_code?: FavoritoCreatebar_codeInput | Enumerable<string>
    price: string
    image?: FavoritoCreateimageInput | Enumerable<string>
    size?: FavoritoCreatesizeInput | Enumerable<string>
    color?: FavoritoCreatecolorInput | Enumerable<string>
    slug?: FavoritoCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type FavoritoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: FavoritoUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: FavoritoUpdateimageInput | Enumerable<string>
    size?: FavoritoUpdatesizeInput | Enumerable<string>
    color?: FavoritoUpdatecolorInput | Enumerable<string>
    slug?: FavoritoUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoritoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: FavoritoUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: FavoritoUpdateimageInput | Enumerable<string>
    size?: FavoritoUpdatesizeInput | Enumerable<string>
    color?: FavoritoUpdatecolorInput | Enumerable<string>
    slug?: FavoritoUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type RelationsAdressListRelationFilter = {
    every?: RelationsAdressWhereInput
    some?: RelationsAdressWhereInput
    none?: RelationsAdressWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RelationsAdressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    age?: SortOrder
    access?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    age?: SortOrder
    access?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    password?: SortOrder
    image?: SortOrder
    age?: SortOrder
    access?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type AdressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type AdressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type AdressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type AdressRelationFilter = {
    is?: AdressWhereInput | null
    isNot?: AdressWhereInput | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type RelationsAdressCountOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_adress?: SortOrder
  }

  export type RelationsAdressMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_adress?: SortOrder
  }

  export type RelationsAdressMinOrderByAggregateInput = {
    id?: SortOrder
    id_user?: SortOrder
    id_adress?: SortOrder
  }

  export type Product_CategoryListRelationFilter = {
    every?: Product_CategoryWhereInput
    some?: Product_CategoryWhereInput
    none?: Product_CategoryWhereInput
  }

  export type Product_CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type CompraRealationsListRelationFilter = {
    every?: CompraRealationsWhereInput
    some?: CompraRealationsWhereInput
    none?: CompraRealationsWhereInput
  }

  export type ComentarioRealationsListRelationFilter = {
    every?: ComentarioRealationsWhereInput
    some?: ComentarioRealationsWhereInput
    none?: ComentarioRealationsWhereInput
  }

  export type CompraRealationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComentarioRealationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bar_code?: SortOrder
    price?: SortOrder
    image?: SortOrder
    size?: SortOrder
    color?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type Product_CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_category?: SortOrder
  }

  export type Product_CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_category?: SortOrder
  }

  export type Product_CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_category?: SortOrder
  }

  export type CompraCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type CompraMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type CompraMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra1CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra1MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra1MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra2CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra2MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra2MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra3CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra3MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra3MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra4CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra4MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type Compra4MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    cep?: SortOrder
    number?: SortOrder
    district?: SortOrder
    apartment_or_house?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    code_compra?: SortOrder
    productName?: SortOrder
    productPrice?: SortOrder
    productImage?: SortOrder
    productSize?: SortOrder
    productClolor?: SortOrder
    productQuantity?: SortOrder
    productUrl?: SortOrder
  }

  export type CompraRelationFilter = {
    is?: CompraWhereInput | null
    isNot?: CompraWhereInput | null
  }

  export type CompraRealationsCountOrderByAggregateInput = {
    id?: SortOrder
    id_products?: SortOrder
    id_compra?: SortOrder
  }

  export type CompraRealationsMaxOrderByAggregateInput = {
    id?: SortOrder
    id_products?: SortOrder
    id_compra?: SortOrder
  }

  export type CompraRealationsMinOrderByAggregateInput = {
    id?: SortOrder
    id_products?: SortOrder
    id_compra?: SortOrder
  }

  export type PromocaoCountOrderByAggregateInput = {
    id?: SortOrder
    promocao?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type PromocaoMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type PromocaoMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type OfertasCountOrderByAggregateInput = {
    id?: SortOrder
    ofertas?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type OfertasMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type OfertasMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type SlidsCountOrderByAggregateInput = {
    id?: SortOrder
    slids?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type SlidsMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type SlidsMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type BannesCountOrderByAggregateInput = {
    id?: SortOrder
    bannes?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type BannesMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type BannesMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type ComentariosCountOrderByAggregateInput = {
    id?: SortOrder
    imgName?: SortOrder
    image?: SortOrder
    name?: SortOrder
    message?: SortOrder
    estrela?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type ComentariosMaxOrderByAggregateInput = {
    id?: SortOrder
    imgName?: SortOrder
    name?: SortOrder
    message?: SortOrder
    estrela?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type ComentariosMinOrderByAggregateInput = {
    id?: SortOrder
    imgName?: SortOrder
    name?: SortOrder
    message?: SortOrder
    estrela?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type ComentariosRelationFilter = {
    is?: ComentariosWhereInput | null
    isNot?: ComentariosWhereInput | null
  }

  export type ComentarioRealationsCountOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_comentario?: SortOrder
  }

  export type ComentarioRealationsMaxOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_comentario?: SortOrder
  }

  export type ComentarioRealationsMinOrderByAggregateInput = {
    id?: SortOrder
    id_product?: SortOrder
    id_comentario?: SortOrder
  }

  export type FavoritoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    bar_code?: SortOrder
    price?: SortOrder
    image?: SortOrder
    size?: SortOrder
    color?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type FavoritoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type FavoritoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    url_product?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type RelationsAdressCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RelationsAdressCreateWithoutUserInput>, Enumerable<RelationsAdressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RelationsAdressCreateOrConnectWithoutUserInput>
    createMany?: RelationsAdressCreateManyUserInputEnvelope
    connect?: Enumerable<RelationsAdressWhereUniqueInput>
  }

  export type RelationsAdressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RelationsAdressCreateWithoutUserInput>, Enumerable<RelationsAdressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RelationsAdressCreateOrConnectWithoutUserInput>
    createMany?: RelationsAdressCreateManyUserInputEnvelope
    connect?: Enumerable<RelationsAdressWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RelationsAdressUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RelationsAdressCreateWithoutUserInput>, Enumerable<RelationsAdressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RelationsAdressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RelationsAdressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RelationsAdressCreateManyUserInputEnvelope
    set?: Enumerable<RelationsAdressWhereUniqueInput>
    disconnect?: Enumerable<RelationsAdressWhereUniqueInput>
    delete?: Enumerable<RelationsAdressWhereUniqueInput>
    connect?: Enumerable<RelationsAdressWhereUniqueInput>
    update?: Enumerable<RelationsAdressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RelationsAdressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RelationsAdressScalarWhereInput>
  }

  export type RelationsAdressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RelationsAdressCreateWithoutUserInput>, Enumerable<RelationsAdressUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RelationsAdressCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RelationsAdressUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RelationsAdressCreateManyUserInputEnvelope
    set?: Enumerable<RelationsAdressWhereUniqueInput>
    disconnect?: Enumerable<RelationsAdressWhereUniqueInput>
    delete?: Enumerable<RelationsAdressWhereUniqueInput>
    connect?: Enumerable<RelationsAdressWhereUniqueInput>
    update?: Enumerable<RelationsAdressUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RelationsAdressUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RelationsAdressScalarWhereInput>
  }

  export type RelationsAdressCreateNestedManyWithoutAdress2Input = {
    create?: XOR<Enumerable<RelationsAdressCreateWithoutAdress2Input>, Enumerable<RelationsAdressUncheckedCreateWithoutAdress2Input>>
    connectOrCreate?: Enumerable<RelationsAdressCreateOrConnectWithoutAdress2Input>
    createMany?: RelationsAdressCreateManyAdress2InputEnvelope
    connect?: Enumerable<RelationsAdressWhereUniqueInput>
  }

  export type RelationsAdressUncheckedCreateNestedManyWithoutAdress2Input = {
    create?: XOR<Enumerable<RelationsAdressCreateWithoutAdress2Input>, Enumerable<RelationsAdressUncheckedCreateWithoutAdress2Input>>
    connectOrCreate?: Enumerable<RelationsAdressCreateOrConnectWithoutAdress2Input>
    createMany?: RelationsAdressCreateManyAdress2InputEnvelope
    connect?: Enumerable<RelationsAdressWhereUniqueInput>
  }

  export type RelationsAdressUpdateManyWithoutAdress2NestedInput = {
    create?: XOR<Enumerable<RelationsAdressCreateWithoutAdress2Input>, Enumerable<RelationsAdressUncheckedCreateWithoutAdress2Input>>
    connectOrCreate?: Enumerable<RelationsAdressCreateOrConnectWithoutAdress2Input>
    upsert?: Enumerable<RelationsAdressUpsertWithWhereUniqueWithoutAdress2Input>
    createMany?: RelationsAdressCreateManyAdress2InputEnvelope
    set?: Enumerable<RelationsAdressWhereUniqueInput>
    disconnect?: Enumerable<RelationsAdressWhereUniqueInput>
    delete?: Enumerable<RelationsAdressWhereUniqueInput>
    connect?: Enumerable<RelationsAdressWhereUniqueInput>
    update?: Enumerable<RelationsAdressUpdateWithWhereUniqueWithoutAdress2Input>
    updateMany?: Enumerable<RelationsAdressUpdateManyWithWhereWithoutAdress2Input>
    deleteMany?: Enumerable<RelationsAdressScalarWhereInput>
  }

  export type RelationsAdressUncheckedUpdateManyWithoutAdress2NestedInput = {
    create?: XOR<Enumerable<RelationsAdressCreateWithoutAdress2Input>, Enumerable<RelationsAdressUncheckedCreateWithoutAdress2Input>>
    connectOrCreate?: Enumerable<RelationsAdressCreateOrConnectWithoutAdress2Input>
    upsert?: Enumerable<RelationsAdressUpsertWithWhereUniqueWithoutAdress2Input>
    createMany?: RelationsAdressCreateManyAdress2InputEnvelope
    set?: Enumerable<RelationsAdressWhereUniqueInput>
    disconnect?: Enumerable<RelationsAdressWhereUniqueInput>
    delete?: Enumerable<RelationsAdressWhereUniqueInput>
    connect?: Enumerable<RelationsAdressWhereUniqueInput>
    update?: Enumerable<RelationsAdressUpdateWithWhereUniqueWithoutAdress2Input>
    updateMany?: Enumerable<RelationsAdressUpdateManyWithWhereWithoutAdress2Input>
    deleteMany?: Enumerable<RelationsAdressScalarWhereInput>
  }

  export type AdressCreateNestedOneWithoutRelationsAdressInput = {
    create?: XOR<AdressCreateWithoutRelationsAdressInput, AdressUncheckedCreateWithoutRelationsAdressInput>
    connectOrCreate?: AdressCreateOrConnectWithoutRelationsAdressInput
    connect?: AdressWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRelationsAdressInput = {
    create?: XOR<UserCreateWithoutRelationsAdressInput, UserUncheckedCreateWithoutRelationsAdressInput>
    connectOrCreate?: UserCreateOrConnectWithoutRelationsAdressInput
    connect?: UserWhereUniqueInput
  }

  export type AdressUpdateOneRequiredWithoutRelationsAdressNestedInput = {
    create?: XOR<AdressCreateWithoutRelationsAdressInput, AdressUncheckedCreateWithoutRelationsAdressInput>
    connectOrCreate?: AdressCreateOrConnectWithoutRelationsAdressInput
    upsert?: AdressUpsertWithoutRelationsAdressInput
    connect?: AdressWhereUniqueInput
    update?: XOR<AdressUpdateWithoutRelationsAdressInput, AdressUncheckedUpdateWithoutRelationsAdressInput>
  }

  export type UserUpdateOneRequiredWithoutRelationsAdressNestedInput = {
    create?: XOR<UserCreateWithoutRelationsAdressInput, UserUncheckedCreateWithoutRelationsAdressInput>
    connectOrCreate?: UserCreateOrConnectWithoutRelationsAdressInput
    upsert?: UserUpsertWithoutRelationsAdressInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRelationsAdressInput, UserUncheckedUpdateWithoutRelationsAdressInput>
  }

  export type Product_CategoryCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<Product_CategoryCreateWithoutCategoriesInput>, Enumerable<Product_CategoryUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<Product_CategoryCreateOrConnectWithoutCategoriesInput>
    createMany?: Product_CategoryCreateManyCategoriesInputEnvelope
    connect?: Enumerable<Product_CategoryWhereUniqueInput>
  }

  export type Product_CategoryUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<Product_CategoryCreateWithoutCategoriesInput>, Enumerable<Product_CategoryUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<Product_CategoryCreateOrConnectWithoutCategoriesInput>
    createMany?: Product_CategoryCreateManyCategoriesInputEnvelope
    connect?: Enumerable<Product_CategoryWhereUniqueInput>
  }

  export type Product_CategoryUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<Enumerable<Product_CategoryCreateWithoutCategoriesInput>, Enumerable<Product_CategoryUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<Product_CategoryCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<Product_CategoryUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: Product_CategoryCreateManyCategoriesInputEnvelope
    set?: Enumerable<Product_CategoryWhereUniqueInput>
    disconnect?: Enumerable<Product_CategoryWhereUniqueInput>
    delete?: Enumerable<Product_CategoryWhereUniqueInput>
    connect?: Enumerable<Product_CategoryWhereUniqueInput>
    update?: Enumerable<Product_CategoryUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<Product_CategoryUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<Product_CategoryScalarWhereInput>
  }

  export type Product_CategoryUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<Enumerable<Product_CategoryCreateWithoutCategoriesInput>, Enumerable<Product_CategoryUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<Product_CategoryCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<Product_CategoryUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: Product_CategoryCreateManyCategoriesInputEnvelope
    set?: Enumerable<Product_CategoryWhereUniqueInput>
    disconnect?: Enumerable<Product_CategoryWhereUniqueInput>
    delete?: Enumerable<Product_CategoryWhereUniqueInput>
    connect?: Enumerable<Product_CategoryWhereUniqueInput>
    update?: Enumerable<Product_CategoryUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<Product_CategoryUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<Product_CategoryScalarWhereInput>
  }

  export type ProductCreatebar_codeInput = {
    set: Enumerable<string>
  }

  export type ProductCreateimageInput = {
    set: Enumerable<string>
  }

  export type ProductCreatesizeInput = {
    set: Enumerable<string>
  }

  export type ProductCreatecolorInput = {
    set: Enumerable<string>
  }

  export type ProductCreateslugInput = {
    set: Enumerable<string>
  }

  export type CompraRealationsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CompraRealationsCreateWithoutProductInput>, Enumerable<CompraRealationsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CompraRealationsCreateOrConnectWithoutProductInput>
    createMany?: CompraRealationsCreateManyProductInputEnvelope
    connect?: Enumerable<CompraRealationsWhereUniqueInput>
  }

  export type Product_CategoryCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<Product_CategoryCreateWithoutProductsInput>, Enumerable<Product_CategoryUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Product_CategoryCreateOrConnectWithoutProductsInput>
    createMany?: Product_CategoryCreateManyProductsInputEnvelope
    connect?: Enumerable<Product_CategoryWhereUniqueInput>
  }

  export type ComentarioRealationsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<ComentarioRealationsCreateWithoutProductInput>, Enumerable<ComentarioRealationsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ComentarioRealationsCreateOrConnectWithoutProductInput>
    createMany?: ComentarioRealationsCreateManyProductInputEnvelope
    connect?: Enumerable<ComentarioRealationsWhereUniqueInput>
  }

  export type CompraRealationsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CompraRealationsCreateWithoutProductInput>, Enumerable<CompraRealationsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CompraRealationsCreateOrConnectWithoutProductInput>
    createMany?: CompraRealationsCreateManyProductInputEnvelope
    connect?: Enumerable<CompraRealationsWhereUniqueInput>
  }

  export type Product_CategoryUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<Product_CategoryCreateWithoutProductsInput>, Enumerable<Product_CategoryUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Product_CategoryCreateOrConnectWithoutProductsInput>
    createMany?: Product_CategoryCreateManyProductsInputEnvelope
    connect?: Enumerable<Product_CategoryWhereUniqueInput>
  }

  export type ComentarioRealationsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<ComentarioRealationsCreateWithoutProductInput>, Enumerable<ComentarioRealationsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ComentarioRealationsCreateOrConnectWithoutProductInput>
    createMany?: ComentarioRealationsCreateManyProductInputEnvelope
    connect?: Enumerable<ComentarioRealationsWhereUniqueInput>
  }

  export type ProductUpdatebar_codeInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ProductUpdateimageInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ProductUpdatesizeInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ProductUpdatecolorInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ProductUpdateslugInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type CompraRealationsUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<CompraRealationsCreateWithoutProductInput>, Enumerable<CompraRealationsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CompraRealationsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CompraRealationsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: CompraRealationsCreateManyProductInputEnvelope
    set?: Enumerable<CompraRealationsWhereUniqueInput>
    disconnect?: Enumerable<CompraRealationsWhereUniqueInput>
    delete?: Enumerable<CompraRealationsWhereUniqueInput>
    connect?: Enumerable<CompraRealationsWhereUniqueInput>
    update?: Enumerable<CompraRealationsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CompraRealationsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CompraRealationsScalarWhereInput>
  }

  export type Product_CategoryUpdateManyWithoutProductsNestedInput = {
    create?: XOR<Enumerable<Product_CategoryCreateWithoutProductsInput>, Enumerable<Product_CategoryUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Product_CategoryCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<Product_CategoryUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: Product_CategoryCreateManyProductsInputEnvelope
    set?: Enumerable<Product_CategoryWhereUniqueInput>
    disconnect?: Enumerable<Product_CategoryWhereUniqueInput>
    delete?: Enumerable<Product_CategoryWhereUniqueInput>
    connect?: Enumerable<Product_CategoryWhereUniqueInput>
    update?: Enumerable<Product_CategoryUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<Product_CategoryUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<Product_CategoryScalarWhereInput>
  }

  export type ComentarioRealationsUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<ComentarioRealationsCreateWithoutProductInput>, Enumerable<ComentarioRealationsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ComentarioRealationsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<ComentarioRealationsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: ComentarioRealationsCreateManyProductInputEnvelope
    set?: Enumerable<ComentarioRealationsWhereUniqueInput>
    disconnect?: Enumerable<ComentarioRealationsWhereUniqueInput>
    delete?: Enumerable<ComentarioRealationsWhereUniqueInput>
    connect?: Enumerable<ComentarioRealationsWhereUniqueInput>
    update?: Enumerable<ComentarioRealationsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<ComentarioRealationsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<ComentarioRealationsScalarWhereInput>
  }

  export type CompraRealationsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<CompraRealationsCreateWithoutProductInput>, Enumerable<CompraRealationsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CompraRealationsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CompraRealationsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: CompraRealationsCreateManyProductInputEnvelope
    set?: Enumerable<CompraRealationsWhereUniqueInput>
    disconnect?: Enumerable<CompraRealationsWhereUniqueInput>
    delete?: Enumerable<CompraRealationsWhereUniqueInput>
    connect?: Enumerable<CompraRealationsWhereUniqueInput>
    update?: Enumerable<CompraRealationsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CompraRealationsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CompraRealationsScalarWhereInput>
  }

  export type Product_CategoryUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<Enumerable<Product_CategoryCreateWithoutProductsInput>, Enumerable<Product_CategoryUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Product_CategoryCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<Product_CategoryUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: Product_CategoryCreateManyProductsInputEnvelope
    set?: Enumerable<Product_CategoryWhereUniqueInput>
    disconnect?: Enumerable<Product_CategoryWhereUniqueInput>
    delete?: Enumerable<Product_CategoryWhereUniqueInput>
    connect?: Enumerable<Product_CategoryWhereUniqueInput>
    update?: Enumerable<Product_CategoryUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<Product_CategoryUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<Product_CategoryScalarWhereInput>
  }

  export type ComentarioRealationsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<ComentarioRealationsCreateWithoutProductInput>, Enumerable<ComentarioRealationsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<ComentarioRealationsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<ComentarioRealationsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: ComentarioRealationsCreateManyProductInputEnvelope
    set?: Enumerable<ComentarioRealationsWhereUniqueInput>
    disconnect?: Enumerable<ComentarioRealationsWhereUniqueInput>
    delete?: Enumerable<ComentarioRealationsWhereUniqueInput>
    connect?: Enumerable<ComentarioRealationsWhereUniqueInput>
    update?: Enumerable<ComentarioRealationsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<ComentarioRealationsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<ComentarioRealationsScalarWhereInput>
  }

  export type CategoryCreateNestedOneWithoutProducts_categoriesInput = {
    create?: XOR<CategoryCreateWithoutProducts_categoriesInput, CategoryUncheckedCreateWithoutProducts_categoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProducts_categoriesInput
    connect?: CategoryWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProducts_categoriesInput = {
    create?: XOR<ProductCreateWithoutProducts_categoriesInput, ProductUncheckedCreateWithoutProducts_categoriesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProducts_categoriesInput
    connect?: ProductWhereUniqueInput
  }

  export type CategoryUpdateOneRequiredWithoutProducts_categoriesNestedInput = {
    create?: XOR<CategoryCreateWithoutProducts_categoriesInput, CategoryUncheckedCreateWithoutProducts_categoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProducts_categoriesInput
    upsert?: CategoryUpsertWithoutProducts_categoriesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutProducts_categoriesInput, CategoryUncheckedUpdateWithoutProducts_categoriesInput>
  }

  export type ProductUpdateOneRequiredWithoutProducts_categoriesNestedInput = {
    create?: XOR<ProductCreateWithoutProducts_categoriesInput, ProductUncheckedCreateWithoutProducts_categoriesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProducts_categoriesInput
    upsert?: ProductUpsertWithoutProducts_categoriesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutProducts_categoriesInput, ProductUncheckedUpdateWithoutProducts_categoriesInput>
  }

  export type CompraRealationsCreateNestedManyWithoutCompraInput = {
    create?: XOR<Enumerable<CompraRealationsCreateWithoutCompraInput>, Enumerable<CompraRealationsUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<CompraRealationsCreateOrConnectWithoutCompraInput>
    createMany?: CompraRealationsCreateManyCompraInputEnvelope
    connect?: Enumerable<CompraRealationsWhereUniqueInput>
  }

  export type CompraRealationsUncheckedCreateNestedManyWithoutCompraInput = {
    create?: XOR<Enumerable<CompraRealationsCreateWithoutCompraInput>, Enumerable<CompraRealationsUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<CompraRealationsCreateOrConnectWithoutCompraInput>
    createMany?: CompraRealationsCreateManyCompraInputEnvelope
    connect?: Enumerable<CompraRealationsWhereUniqueInput>
  }

  export type CompraRealationsUpdateManyWithoutCompraNestedInput = {
    create?: XOR<Enumerable<CompraRealationsCreateWithoutCompraInput>, Enumerable<CompraRealationsUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<CompraRealationsCreateOrConnectWithoutCompraInput>
    upsert?: Enumerable<CompraRealationsUpsertWithWhereUniqueWithoutCompraInput>
    createMany?: CompraRealationsCreateManyCompraInputEnvelope
    set?: Enumerable<CompraRealationsWhereUniqueInput>
    disconnect?: Enumerable<CompraRealationsWhereUniqueInput>
    delete?: Enumerable<CompraRealationsWhereUniqueInput>
    connect?: Enumerable<CompraRealationsWhereUniqueInput>
    update?: Enumerable<CompraRealationsUpdateWithWhereUniqueWithoutCompraInput>
    updateMany?: Enumerable<CompraRealationsUpdateManyWithWhereWithoutCompraInput>
    deleteMany?: Enumerable<CompraRealationsScalarWhereInput>
  }

  export type CompraRealationsUncheckedUpdateManyWithoutCompraNestedInput = {
    create?: XOR<Enumerable<CompraRealationsCreateWithoutCompraInput>, Enumerable<CompraRealationsUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<CompraRealationsCreateOrConnectWithoutCompraInput>
    upsert?: Enumerable<CompraRealationsUpsertWithWhereUniqueWithoutCompraInput>
    createMany?: CompraRealationsCreateManyCompraInputEnvelope
    set?: Enumerable<CompraRealationsWhereUniqueInput>
    disconnect?: Enumerable<CompraRealationsWhereUniqueInput>
    delete?: Enumerable<CompraRealationsWhereUniqueInput>
    connect?: Enumerable<CompraRealationsWhereUniqueInput>
    update?: Enumerable<CompraRealationsUpdateWithWhereUniqueWithoutCompraInput>
    updateMany?: Enumerable<CompraRealationsUpdateManyWithWhereWithoutCompraInput>
    deleteMany?: Enumerable<CompraRealationsScalarWhereInput>
  }

  export type CompraCreateNestedOneWithoutComprarealationsInput = {
    create?: XOR<CompraCreateWithoutComprarealationsInput, CompraUncheckedCreateWithoutComprarealationsInput>
    connectOrCreate?: CompraCreateOrConnectWithoutComprarealationsInput
    connect?: CompraWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutComprarealationsInput = {
    create?: XOR<ProductCreateWithoutComprarealationsInput, ProductUncheckedCreateWithoutComprarealationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutComprarealationsInput
    connect?: ProductWhereUniqueInput
  }

  export type CompraUpdateOneRequiredWithoutComprarealationsNestedInput = {
    create?: XOR<CompraCreateWithoutComprarealationsInput, CompraUncheckedCreateWithoutComprarealationsInput>
    connectOrCreate?: CompraCreateOrConnectWithoutComprarealationsInput
    upsert?: CompraUpsertWithoutComprarealationsInput
    connect?: CompraWhereUniqueInput
    update?: XOR<CompraUpdateWithoutComprarealationsInput, CompraUncheckedUpdateWithoutComprarealationsInput>
  }

  export type ProductUpdateOneRequiredWithoutComprarealationsNestedInput = {
    create?: XOR<ProductCreateWithoutComprarealationsInput, ProductUncheckedCreateWithoutComprarealationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutComprarealationsInput
    upsert?: ProductUpsertWithoutComprarealationsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutComprarealationsInput, ProductUncheckedUpdateWithoutComprarealationsInput>
  }

  export type PromocaoCreatepromocaoInput = {
    set: Enumerable<string>
  }

  export type PromocaoUpdatepromocaoInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type OfertasCreateofertasInput = {
    set: Enumerable<string>
  }

  export type OfertasUpdateofertasInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type SlidsCreateslidsInput = {
    set: Enumerable<string>
  }

  export type SlidsUpdateslidsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type BannesCreatebannesInput = {
    set: Enumerable<string>
  }

  export type BannesUpdatebannesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ComentariosCreateimageInput = {
    set: Enumerable<string>
  }

  export type ComentarioRealationsCreateNestedManyWithoutComentariosInput = {
    create?: XOR<Enumerable<ComentarioRealationsCreateWithoutComentariosInput>, Enumerable<ComentarioRealationsUncheckedCreateWithoutComentariosInput>>
    connectOrCreate?: Enumerable<ComentarioRealationsCreateOrConnectWithoutComentariosInput>
    createMany?: ComentarioRealationsCreateManyComentariosInputEnvelope
    connect?: Enumerable<ComentarioRealationsWhereUniqueInput>
  }

  export type ComentarioRealationsUncheckedCreateNestedManyWithoutComentariosInput = {
    create?: XOR<Enumerable<ComentarioRealationsCreateWithoutComentariosInput>, Enumerable<ComentarioRealationsUncheckedCreateWithoutComentariosInput>>
    connectOrCreate?: Enumerable<ComentarioRealationsCreateOrConnectWithoutComentariosInput>
    createMany?: ComentarioRealationsCreateManyComentariosInputEnvelope
    connect?: Enumerable<ComentarioRealationsWhereUniqueInput>
  }

  export type ComentariosUpdateimageInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ComentarioRealationsUpdateManyWithoutComentariosNestedInput = {
    create?: XOR<Enumerable<ComentarioRealationsCreateWithoutComentariosInput>, Enumerable<ComentarioRealationsUncheckedCreateWithoutComentariosInput>>
    connectOrCreate?: Enumerable<ComentarioRealationsCreateOrConnectWithoutComentariosInput>
    upsert?: Enumerable<ComentarioRealationsUpsertWithWhereUniqueWithoutComentariosInput>
    createMany?: ComentarioRealationsCreateManyComentariosInputEnvelope
    set?: Enumerable<ComentarioRealationsWhereUniqueInput>
    disconnect?: Enumerable<ComentarioRealationsWhereUniqueInput>
    delete?: Enumerable<ComentarioRealationsWhereUniqueInput>
    connect?: Enumerable<ComentarioRealationsWhereUniqueInput>
    update?: Enumerable<ComentarioRealationsUpdateWithWhereUniqueWithoutComentariosInput>
    updateMany?: Enumerable<ComentarioRealationsUpdateManyWithWhereWithoutComentariosInput>
    deleteMany?: Enumerable<ComentarioRealationsScalarWhereInput>
  }

  export type ComentarioRealationsUncheckedUpdateManyWithoutComentariosNestedInput = {
    create?: XOR<Enumerable<ComentarioRealationsCreateWithoutComentariosInput>, Enumerable<ComentarioRealationsUncheckedCreateWithoutComentariosInput>>
    connectOrCreate?: Enumerable<ComentarioRealationsCreateOrConnectWithoutComentariosInput>
    upsert?: Enumerable<ComentarioRealationsUpsertWithWhereUniqueWithoutComentariosInput>
    createMany?: ComentarioRealationsCreateManyComentariosInputEnvelope
    set?: Enumerable<ComentarioRealationsWhereUniqueInput>
    disconnect?: Enumerable<ComentarioRealationsWhereUniqueInput>
    delete?: Enumerable<ComentarioRealationsWhereUniqueInput>
    connect?: Enumerable<ComentarioRealationsWhereUniqueInput>
    update?: Enumerable<ComentarioRealationsUpdateWithWhereUniqueWithoutComentariosInput>
    updateMany?: Enumerable<ComentarioRealationsUpdateManyWithWhereWithoutComentariosInput>
    deleteMany?: Enumerable<ComentarioRealationsScalarWhereInput>
  }

  export type ComentariosCreateNestedOneWithoutComentariorealationsInput = {
    create?: XOR<ComentariosCreateWithoutComentariorealationsInput, ComentariosUncheckedCreateWithoutComentariorealationsInput>
    connectOrCreate?: ComentariosCreateOrConnectWithoutComentariorealationsInput
    connect?: ComentariosWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutComentariorealationsInput = {
    create?: XOR<ProductCreateWithoutComentariorealationsInput, ProductUncheckedCreateWithoutComentariorealationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutComentariorealationsInput
    connect?: ProductWhereUniqueInput
  }

  export type ComentariosUpdateOneRequiredWithoutComentariorealationsNestedInput = {
    create?: XOR<ComentariosCreateWithoutComentariorealationsInput, ComentariosUncheckedCreateWithoutComentariorealationsInput>
    connectOrCreate?: ComentariosCreateOrConnectWithoutComentariorealationsInput
    upsert?: ComentariosUpsertWithoutComentariorealationsInput
    connect?: ComentariosWhereUniqueInput
    update?: XOR<ComentariosUpdateWithoutComentariorealationsInput, ComentariosUncheckedUpdateWithoutComentariorealationsInput>
  }

  export type ProductUpdateOneRequiredWithoutComentariorealationsNestedInput = {
    create?: XOR<ProductCreateWithoutComentariorealationsInput, ProductUncheckedCreateWithoutComentariorealationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutComentariorealationsInput
    upsert?: ProductUpsertWithoutComentariorealationsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutComentariorealationsInput, ProductUncheckedUpdateWithoutComentariorealationsInput>
  }

  export type FavoritoCreatebar_codeInput = {
    set: Enumerable<string>
  }

  export type FavoritoCreateimageInput = {
    set: Enumerable<string>
  }

  export type FavoritoCreatesizeInput = {
    set: Enumerable<string>
  }

  export type FavoritoCreatecolorInput = {
    set: Enumerable<string>
  }

  export type FavoritoCreateslugInput = {
    set: Enumerable<string>
  }

  export type FavoritoUpdatebar_codeInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type FavoritoUpdateimageInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type FavoritoUpdatesizeInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type FavoritoUpdatecolorInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type FavoritoUpdateslugInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type RelationsAdressCreateWithoutUserInput = {
    id?: string
    adress2: AdressCreateNestedOneWithoutRelationsAdressInput
  }

  export type RelationsAdressUncheckedCreateWithoutUserInput = {
    id?: string
    id_adress: string
  }

  export type RelationsAdressCreateOrConnectWithoutUserInput = {
    where: RelationsAdressWhereUniqueInput
    create: XOR<RelationsAdressCreateWithoutUserInput, RelationsAdressUncheckedCreateWithoutUserInput>
  }

  export type RelationsAdressCreateManyUserInputEnvelope = {
    data: Enumerable<RelationsAdressCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RelationsAdressUpsertWithWhereUniqueWithoutUserInput = {
    where: RelationsAdressWhereUniqueInput
    update: XOR<RelationsAdressUpdateWithoutUserInput, RelationsAdressUncheckedUpdateWithoutUserInput>
    create: XOR<RelationsAdressCreateWithoutUserInput, RelationsAdressUncheckedCreateWithoutUserInput>
  }

  export type RelationsAdressUpdateWithWhereUniqueWithoutUserInput = {
    where: RelationsAdressWhereUniqueInput
    data: XOR<RelationsAdressUpdateWithoutUserInput, RelationsAdressUncheckedUpdateWithoutUserInput>
  }

  export type RelationsAdressUpdateManyWithWhereWithoutUserInput = {
    where: RelationsAdressScalarWhereInput
    data: XOR<RelationsAdressUpdateManyMutationInput, RelationsAdressUncheckedUpdateManyWithoutRelationsAdressInput>
  }

  export type RelationsAdressScalarWhereInput = {
    AND?: Enumerable<RelationsAdressScalarWhereInput>
    OR?: Enumerable<RelationsAdressScalarWhereInput>
    NOT?: Enumerable<RelationsAdressScalarWhereInput>
    id?: StringFilter | string
    id_user?: StringFilter | string
    id_adress?: StringFilter | string
  }

  export type RelationsAdressCreateWithoutAdress2Input = {
    id?: string
    user: UserCreateNestedOneWithoutRelationsAdressInput
  }

  export type RelationsAdressUncheckedCreateWithoutAdress2Input = {
    id?: string
    id_user: string
  }

  export type RelationsAdressCreateOrConnectWithoutAdress2Input = {
    where: RelationsAdressWhereUniqueInput
    create: XOR<RelationsAdressCreateWithoutAdress2Input, RelationsAdressUncheckedCreateWithoutAdress2Input>
  }

  export type RelationsAdressCreateManyAdress2InputEnvelope = {
    data: Enumerable<RelationsAdressCreateManyAdress2Input>
    skipDuplicates?: boolean
  }

  export type RelationsAdressUpsertWithWhereUniqueWithoutAdress2Input = {
    where: RelationsAdressWhereUniqueInput
    update: XOR<RelationsAdressUpdateWithoutAdress2Input, RelationsAdressUncheckedUpdateWithoutAdress2Input>
    create: XOR<RelationsAdressCreateWithoutAdress2Input, RelationsAdressUncheckedCreateWithoutAdress2Input>
  }

  export type RelationsAdressUpdateWithWhereUniqueWithoutAdress2Input = {
    where: RelationsAdressWhereUniqueInput
    data: XOR<RelationsAdressUpdateWithoutAdress2Input, RelationsAdressUncheckedUpdateWithoutAdress2Input>
  }

  export type RelationsAdressUpdateManyWithWhereWithoutAdress2Input = {
    where: RelationsAdressScalarWhereInput
    data: XOR<RelationsAdressUpdateManyMutationInput, RelationsAdressUncheckedUpdateManyWithoutRelationsAdressInput>
  }

  export type AdressCreateWithoutRelationsAdressInput = {
    id?: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type AdressUncheckedCreateWithoutRelationsAdressInput = {
    id?: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type AdressCreateOrConnectWithoutRelationsAdressInput = {
    where: AdressWhereUniqueInput
    create: XOR<AdressCreateWithoutRelationsAdressInput, AdressUncheckedCreateWithoutRelationsAdressInput>
  }

  export type UserCreateWithoutRelationsAdressInput = {
    id?: string
    name: string
    phone: string
    email: string
    password: string
    image?: string | null
    age: string
    access: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type UserUncheckedCreateWithoutRelationsAdressInput = {
    id?: string
    name: string
    phone: string
    email: string
    password: string
    image?: string | null
    age: string
    access: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type UserCreateOrConnectWithoutRelationsAdressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRelationsAdressInput, UserUncheckedCreateWithoutRelationsAdressInput>
  }

  export type AdressUpsertWithoutRelationsAdressInput = {
    update: XOR<AdressUpdateWithoutRelationsAdressInput, AdressUncheckedUpdateWithoutRelationsAdressInput>
    create: XOR<AdressCreateWithoutRelationsAdressInput, AdressUncheckedCreateWithoutRelationsAdressInput>
  }

  export type AdressUpdateWithoutRelationsAdressInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdressUncheckedUpdateWithoutRelationsAdressInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutRelationsAdressInput = {
    update: XOR<UserUpdateWithoutRelationsAdressInput, UserUncheckedUpdateWithoutRelationsAdressInput>
    create: XOR<UserCreateWithoutRelationsAdressInput, UserUncheckedCreateWithoutRelationsAdressInput>
  }

  export type UserUpdateWithoutRelationsAdressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    age?: StringFieldUpdateOperationsInput | string
    access?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutRelationsAdressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    age?: StringFieldUpdateOperationsInput | string
    access?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_CategoryCreateWithoutCategoriesInput = {
    id?: string
    products: ProductCreateNestedOneWithoutProducts_categoriesInput
  }

  export type Product_CategoryUncheckedCreateWithoutCategoriesInput = {
    id?: string
    id_product: string
  }

  export type Product_CategoryCreateOrConnectWithoutCategoriesInput = {
    where: Product_CategoryWhereUniqueInput
    create: XOR<Product_CategoryCreateWithoutCategoriesInput, Product_CategoryUncheckedCreateWithoutCategoriesInput>
  }

  export type Product_CategoryCreateManyCategoriesInputEnvelope = {
    data: Enumerable<Product_CategoryCreateManyCategoriesInput>
    skipDuplicates?: boolean
  }

  export type Product_CategoryUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: Product_CategoryWhereUniqueInput
    update: XOR<Product_CategoryUpdateWithoutCategoriesInput, Product_CategoryUncheckedUpdateWithoutCategoriesInput>
    create: XOR<Product_CategoryCreateWithoutCategoriesInput, Product_CategoryUncheckedCreateWithoutCategoriesInput>
  }

  export type Product_CategoryUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: Product_CategoryWhereUniqueInput
    data: XOR<Product_CategoryUpdateWithoutCategoriesInput, Product_CategoryUncheckedUpdateWithoutCategoriesInput>
  }

  export type Product_CategoryUpdateManyWithWhereWithoutCategoriesInput = {
    where: Product_CategoryScalarWhereInput
    data: XOR<Product_CategoryUpdateManyMutationInput, Product_CategoryUncheckedUpdateManyWithoutProducts_categoriesInput>
  }

  export type Product_CategoryScalarWhereInput = {
    AND?: Enumerable<Product_CategoryScalarWhereInput>
    OR?: Enumerable<Product_CategoryScalarWhereInput>
    NOT?: Enumerable<Product_CategoryScalarWhereInput>
    id?: StringFilter | string
    id_product?: StringFilter | string
    id_category?: StringFilter | string
  }

  export type CompraRealationsCreateWithoutProductInput = {
    id?: string
    compra: CompraCreateNestedOneWithoutComprarealationsInput
  }

  export type CompraRealationsUncheckedCreateWithoutProductInput = {
    id?: string
    id_compra: string
  }

  export type CompraRealationsCreateOrConnectWithoutProductInput = {
    where: CompraRealationsWhereUniqueInput
    create: XOR<CompraRealationsCreateWithoutProductInput, CompraRealationsUncheckedCreateWithoutProductInput>
  }

  export type CompraRealationsCreateManyProductInputEnvelope = {
    data: Enumerable<CompraRealationsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type Product_CategoryCreateWithoutProductsInput = {
    id?: string
    categories: CategoryCreateNestedOneWithoutProducts_categoriesInput
  }

  export type Product_CategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    id_category: string
  }

  export type Product_CategoryCreateOrConnectWithoutProductsInput = {
    where: Product_CategoryWhereUniqueInput
    create: XOR<Product_CategoryCreateWithoutProductsInput, Product_CategoryUncheckedCreateWithoutProductsInput>
  }

  export type Product_CategoryCreateManyProductsInputEnvelope = {
    data: Enumerable<Product_CategoryCreateManyProductsInput>
    skipDuplicates?: boolean
  }

  export type ComentarioRealationsCreateWithoutProductInput = {
    id?: string
    comentarios: ComentariosCreateNestedOneWithoutComentariorealationsInput
  }

  export type ComentarioRealationsUncheckedCreateWithoutProductInput = {
    id?: string
    id_comentario: string
  }

  export type ComentarioRealationsCreateOrConnectWithoutProductInput = {
    where: ComentarioRealationsWhereUniqueInput
    create: XOR<ComentarioRealationsCreateWithoutProductInput, ComentarioRealationsUncheckedCreateWithoutProductInput>
  }

  export type ComentarioRealationsCreateManyProductInputEnvelope = {
    data: Enumerable<ComentarioRealationsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type CompraRealationsUpsertWithWhereUniqueWithoutProductInput = {
    where: CompraRealationsWhereUniqueInput
    update: XOR<CompraRealationsUpdateWithoutProductInput, CompraRealationsUncheckedUpdateWithoutProductInput>
    create: XOR<CompraRealationsCreateWithoutProductInput, CompraRealationsUncheckedCreateWithoutProductInput>
  }

  export type CompraRealationsUpdateWithWhereUniqueWithoutProductInput = {
    where: CompraRealationsWhereUniqueInput
    data: XOR<CompraRealationsUpdateWithoutProductInput, CompraRealationsUncheckedUpdateWithoutProductInput>
  }

  export type CompraRealationsUpdateManyWithWhereWithoutProductInput = {
    where: CompraRealationsScalarWhereInput
    data: XOR<CompraRealationsUpdateManyMutationInput, CompraRealationsUncheckedUpdateManyWithoutComprarealationsInput>
  }

  export type CompraRealationsScalarWhereInput = {
    AND?: Enumerable<CompraRealationsScalarWhereInput>
    OR?: Enumerable<CompraRealationsScalarWhereInput>
    NOT?: Enumerable<CompraRealationsScalarWhereInput>
    id?: StringFilter | string
    id_products?: StringFilter | string
    id_compra?: StringFilter | string
  }

  export type Product_CategoryUpsertWithWhereUniqueWithoutProductsInput = {
    where: Product_CategoryWhereUniqueInput
    update: XOR<Product_CategoryUpdateWithoutProductsInput, Product_CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<Product_CategoryCreateWithoutProductsInput, Product_CategoryUncheckedCreateWithoutProductsInput>
  }

  export type Product_CategoryUpdateWithWhereUniqueWithoutProductsInput = {
    where: Product_CategoryWhereUniqueInput
    data: XOR<Product_CategoryUpdateWithoutProductsInput, Product_CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type Product_CategoryUpdateManyWithWhereWithoutProductsInput = {
    where: Product_CategoryScalarWhereInput
    data: XOR<Product_CategoryUpdateManyMutationInput, Product_CategoryUncheckedUpdateManyWithoutProducts_categoriesInput>
  }

  export type ComentarioRealationsUpsertWithWhereUniqueWithoutProductInput = {
    where: ComentarioRealationsWhereUniqueInput
    update: XOR<ComentarioRealationsUpdateWithoutProductInput, ComentarioRealationsUncheckedUpdateWithoutProductInput>
    create: XOR<ComentarioRealationsCreateWithoutProductInput, ComentarioRealationsUncheckedCreateWithoutProductInput>
  }

  export type ComentarioRealationsUpdateWithWhereUniqueWithoutProductInput = {
    where: ComentarioRealationsWhereUniqueInput
    data: XOR<ComentarioRealationsUpdateWithoutProductInput, ComentarioRealationsUncheckedUpdateWithoutProductInput>
  }

  export type ComentarioRealationsUpdateManyWithWhereWithoutProductInput = {
    where: ComentarioRealationsScalarWhereInput
    data: XOR<ComentarioRealationsUpdateManyMutationInput, ComentarioRealationsUncheckedUpdateManyWithoutComentariorealationsInput>
  }

  export type ComentarioRealationsScalarWhereInput = {
    AND?: Enumerable<ComentarioRealationsScalarWhereInput>
    OR?: Enumerable<ComentarioRealationsScalarWhereInput>
    NOT?: Enumerable<ComentarioRealationsScalarWhereInput>
    id?: StringFilter | string
    id_product?: StringFilter | string
    id_comentario?: StringFilter | string
  }

  export type CategoryCreateWithoutProducts_categoriesInput = {
    id?: string
    image: string
    name: string
  }

  export type CategoryUncheckedCreateWithoutProducts_categoriesInput = {
    id?: string
    image: string
    name: string
  }

  export type CategoryCreateOrConnectWithoutProducts_categoriesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProducts_categoriesInput, CategoryUncheckedCreateWithoutProducts_categoriesInput>
  }

  export type ProductCreateWithoutProducts_categoriesInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    comprarealations?: CompraRealationsCreateNestedManyWithoutProductInput
    comentariorealations?: ComentarioRealationsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProducts_categoriesInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    comprarealations?: CompraRealationsUncheckedCreateNestedManyWithoutProductInput
    comentariorealations?: ComentarioRealationsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProducts_categoriesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProducts_categoriesInput, ProductUncheckedCreateWithoutProducts_categoriesInput>
  }

  export type CategoryUpsertWithoutProducts_categoriesInput = {
    update: XOR<CategoryUpdateWithoutProducts_categoriesInput, CategoryUncheckedUpdateWithoutProducts_categoriesInput>
    create: XOR<CategoryCreateWithoutProducts_categoriesInput, CategoryUncheckedCreateWithoutProducts_categoriesInput>
  }

  export type CategoryUpdateWithoutProducts_categoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutProducts_categoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpsertWithoutProducts_categoriesInput = {
    update: XOR<ProductUpdateWithoutProducts_categoriesInput, ProductUncheckedUpdateWithoutProducts_categoriesInput>
    create: XOR<ProductCreateWithoutProducts_categoriesInput, ProductUncheckedCreateWithoutProducts_categoriesInput>
  }

  export type ProductUpdateWithoutProducts_categoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comprarealations?: CompraRealationsUpdateManyWithoutProductNestedInput
    comentariorealations?: ComentarioRealationsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProducts_categoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comprarealations?: CompraRealationsUncheckedUpdateManyWithoutProductNestedInput
    comentariorealations?: ComentarioRealationsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type CompraRealationsCreateWithoutCompraInput = {
    id?: string
    product: ProductCreateNestedOneWithoutComprarealationsInput
  }

  export type CompraRealationsUncheckedCreateWithoutCompraInput = {
    id?: string
    id_products: string
  }

  export type CompraRealationsCreateOrConnectWithoutCompraInput = {
    where: CompraRealationsWhereUniqueInput
    create: XOR<CompraRealationsCreateWithoutCompraInput, CompraRealationsUncheckedCreateWithoutCompraInput>
  }

  export type CompraRealationsCreateManyCompraInputEnvelope = {
    data: Enumerable<CompraRealationsCreateManyCompraInput>
    skipDuplicates?: boolean
  }

  export type CompraRealationsUpsertWithWhereUniqueWithoutCompraInput = {
    where: CompraRealationsWhereUniqueInput
    update: XOR<CompraRealationsUpdateWithoutCompraInput, CompraRealationsUncheckedUpdateWithoutCompraInput>
    create: XOR<CompraRealationsCreateWithoutCompraInput, CompraRealationsUncheckedCreateWithoutCompraInput>
  }

  export type CompraRealationsUpdateWithWhereUniqueWithoutCompraInput = {
    where: CompraRealationsWhereUniqueInput
    data: XOR<CompraRealationsUpdateWithoutCompraInput, CompraRealationsUncheckedUpdateWithoutCompraInput>
  }

  export type CompraRealationsUpdateManyWithWhereWithoutCompraInput = {
    where: CompraRealationsScalarWhereInput
    data: XOR<CompraRealationsUpdateManyMutationInput, CompraRealationsUncheckedUpdateManyWithoutComprarealationsInput>
  }

  export type CompraCreateWithoutComprarealationsInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type CompraUncheckedCreateWithoutComprarealationsInput = {
    id?: string
    name: string
    phone: string
    email: string
    street: string
    city: string
    state: string
    cep: string
    number: string
    district: string
    apartment_or_house: string
    created_at?: Date | string
    update_at?: Date | string
    code_compra: string
    productName: string
    productPrice: string
    productImage: string
    productSize: string
    productClolor: string
    productQuantity: string
    productUrl: string
  }

  export type CompraCreateOrConnectWithoutComprarealationsInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutComprarealationsInput, CompraUncheckedCreateWithoutComprarealationsInput>
  }

  export type ProductCreateWithoutComprarealationsInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    products_categories?: Product_CategoryCreateNestedManyWithoutProductsInput
    comentariorealations?: ComentarioRealationsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutComprarealationsInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    products_categories?: Product_CategoryUncheckedCreateNestedManyWithoutProductsInput
    comentariorealations?: ComentarioRealationsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutComprarealationsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutComprarealationsInput, ProductUncheckedCreateWithoutComprarealationsInput>
  }

  export type CompraUpsertWithoutComprarealationsInput = {
    update: XOR<CompraUpdateWithoutComprarealationsInput, CompraUncheckedUpdateWithoutComprarealationsInput>
    create: XOR<CompraCreateWithoutComprarealationsInput, CompraUncheckedCreateWithoutComprarealationsInput>
  }

  export type CompraUpdateWithoutComprarealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type CompraUncheckedUpdateWithoutComprarealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    apartment_or_house?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    code_compra?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    productPrice?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    productSize?: StringFieldUpdateOperationsInput | string
    productClolor?: StringFieldUpdateOperationsInput | string
    productQuantity?: StringFieldUpdateOperationsInput | string
    productUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpsertWithoutComprarealationsInput = {
    update: XOR<ProductUpdateWithoutComprarealationsInput, ProductUncheckedUpdateWithoutComprarealationsInput>
    create: XOR<ProductCreateWithoutComprarealationsInput, ProductUncheckedCreateWithoutComprarealationsInput>
  }

  export type ProductUpdateWithoutComprarealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products_categories?: Product_CategoryUpdateManyWithoutProductsNestedInput
    comentariorealations?: ComentarioRealationsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutComprarealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products_categories?: Product_CategoryUncheckedUpdateManyWithoutProductsNestedInput
    comentariorealations?: ComentarioRealationsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ComentarioRealationsCreateWithoutComentariosInput = {
    id?: string
    product: ProductCreateNestedOneWithoutComentariorealationsInput
  }

  export type ComentarioRealationsUncheckedCreateWithoutComentariosInput = {
    id?: string
    id_product: string
  }

  export type ComentarioRealationsCreateOrConnectWithoutComentariosInput = {
    where: ComentarioRealationsWhereUniqueInput
    create: XOR<ComentarioRealationsCreateWithoutComentariosInput, ComentarioRealationsUncheckedCreateWithoutComentariosInput>
  }

  export type ComentarioRealationsCreateManyComentariosInputEnvelope = {
    data: Enumerable<ComentarioRealationsCreateManyComentariosInput>
    skipDuplicates?: boolean
  }

  export type ComentarioRealationsUpsertWithWhereUniqueWithoutComentariosInput = {
    where: ComentarioRealationsWhereUniqueInput
    update: XOR<ComentarioRealationsUpdateWithoutComentariosInput, ComentarioRealationsUncheckedUpdateWithoutComentariosInput>
    create: XOR<ComentarioRealationsCreateWithoutComentariosInput, ComentarioRealationsUncheckedCreateWithoutComentariosInput>
  }

  export type ComentarioRealationsUpdateWithWhereUniqueWithoutComentariosInput = {
    where: ComentarioRealationsWhereUniqueInput
    data: XOR<ComentarioRealationsUpdateWithoutComentariosInput, ComentarioRealationsUncheckedUpdateWithoutComentariosInput>
  }

  export type ComentarioRealationsUpdateManyWithWhereWithoutComentariosInput = {
    where: ComentarioRealationsScalarWhereInput
    data: XOR<ComentarioRealationsUpdateManyMutationInput, ComentarioRealationsUncheckedUpdateManyWithoutComentariorealationsInput>
  }

  export type ComentariosCreateWithoutComentariorealationsInput = {
    id?: string
    imgName: string
    image?: ComentariosCreateimageInput | Enumerable<string>
    name: string
    message: string
    estrela: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type ComentariosUncheckedCreateWithoutComentariorealationsInput = {
    id?: string
    imgName: string
    image?: ComentariosCreateimageInput | Enumerable<string>
    name: string
    message: string
    estrela: string
    created_at?: Date | string
    update_at?: Date | string
  }

  export type ComentariosCreateOrConnectWithoutComentariorealationsInput = {
    where: ComentariosWhereUniqueInput
    create: XOR<ComentariosCreateWithoutComentariorealationsInput, ComentariosUncheckedCreateWithoutComentariorealationsInput>
  }

  export type ProductCreateWithoutComentariorealationsInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    comprarealations?: CompraRealationsCreateNestedManyWithoutProductInput
    products_categories?: Product_CategoryCreateNestedManyWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutComentariorealationsInput = {
    id?: string
    name: string
    bar_code?: ProductCreatebar_codeInput | Enumerable<string>
    price: string
    image?: ProductCreateimageInput | Enumerable<string>
    size?: ProductCreatesizeInput | Enumerable<string>
    color?: ProductCreatecolorInput | Enumerable<string>
    slug?: ProductCreateslugInput | Enumerable<string>
    description: string
    quantity: string
    url_product: string
    created_at?: Date | string
    comprarealations?: CompraRealationsUncheckedCreateNestedManyWithoutProductInput
    products_categories?: Product_CategoryUncheckedCreateNestedManyWithoutProductsInput
  }

  export type ProductCreateOrConnectWithoutComentariorealationsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutComentariorealationsInput, ProductUncheckedCreateWithoutComentariorealationsInput>
  }

  export type ComentariosUpsertWithoutComentariorealationsInput = {
    update: XOR<ComentariosUpdateWithoutComentariorealationsInput, ComentariosUncheckedUpdateWithoutComentariorealationsInput>
    create: XOR<ComentariosCreateWithoutComentariorealationsInput, ComentariosUncheckedCreateWithoutComentariorealationsInput>
  }

  export type ComentariosUpdateWithoutComentariorealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    imgName?: StringFieldUpdateOperationsInput | string
    image?: ComentariosUpdateimageInput | Enumerable<string>
    name?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    estrela?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComentariosUncheckedUpdateWithoutComentariorealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    imgName?: StringFieldUpdateOperationsInput | string
    image?: ComentariosUpdateimageInput | Enumerable<string>
    name?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    estrela?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutComentariorealationsInput = {
    update: XOR<ProductUpdateWithoutComentariorealationsInput, ProductUncheckedUpdateWithoutComentariorealationsInput>
    create: XOR<ProductCreateWithoutComentariorealationsInput, ProductUncheckedCreateWithoutComentariorealationsInput>
  }

  export type ProductUpdateWithoutComentariorealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comprarealations?: CompraRealationsUpdateManyWithoutProductNestedInput
    products_categories?: Product_CategoryUpdateManyWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutComentariorealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    bar_code?: ProductUpdatebar_codeInput | Enumerable<string>
    price?: StringFieldUpdateOperationsInput | string
    image?: ProductUpdateimageInput | Enumerable<string>
    size?: ProductUpdatesizeInput | Enumerable<string>
    color?: ProductUpdatecolorInput | Enumerable<string>
    slug?: ProductUpdateslugInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    url_product?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comprarealations?: CompraRealationsUncheckedUpdateManyWithoutProductNestedInput
    products_categories?: Product_CategoryUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type RelationsAdressCreateManyUserInput = {
    id?: string
    id_adress: string
  }

  export type RelationsAdressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    adress2?: AdressUpdateOneRequiredWithoutRelationsAdressNestedInput
  }

  export type RelationsAdressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_adress?: StringFieldUpdateOperationsInput | string
  }

  export type RelationsAdressUncheckedUpdateManyWithoutRelationsAdressInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_adress?: StringFieldUpdateOperationsInput | string
  }

  export type RelationsAdressCreateManyAdress2Input = {
    id?: string
    id_user: string
  }

  export type RelationsAdressUpdateWithoutAdress2Input = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutRelationsAdressNestedInput
  }

  export type RelationsAdressUncheckedUpdateWithoutAdress2Input = {
    id?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
  }

  export type Product_CategoryCreateManyCategoriesInput = {
    id?: string
    id_product: string
  }

  export type Product_CategoryUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    products?: ProductUpdateOneRequiredWithoutProducts_categoriesNestedInput
  }

  export type Product_CategoryUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
  }

  export type Product_CategoryUncheckedUpdateManyWithoutProducts_categoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
  }

  export type CompraRealationsCreateManyProductInput = {
    id?: string
    id_compra: string
  }

  export type Product_CategoryCreateManyProductsInput = {
    id?: string
    id_category: string
  }

  export type ComentarioRealationsCreateManyProductInput = {
    id?: string
    id_comentario: string
  }

  export type CompraRealationsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    compra?: CompraUpdateOneRequiredWithoutComprarealationsNestedInput
  }

  export type CompraRealationsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_compra?: StringFieldUpdateOperationsInput | string
  }

  export type CompraRealationsUncheckedUpdateManyWithoutComprarealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_compra?: StringFieldUpdateOperationsInput | string
  }

  export type Product_CategoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateOneRequiredWithoutProducts_categoriesNestedInput
  }

  export type Product_CategoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_category?: StringFieldUpdateOperationsInput | string
  }

  export type ComentarioRealationsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    comentarios?: ComentariosUpdateOneRequiredWithoutComentariorealationsNestedInput
  }

  export type ComentarioRealationsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_comentario?: StringFieldUpdateOperationsInput | string
  }

  export type ComentarioRealationsUncheckedUpdateManyWithoutComentariorealationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_comentario?: StringFieldUpdateOperationsInput | string
  }

  export type CompraRealationsCreateManyCompraInput = {
    id?: string
    id_products: string
  }

  export type CompraRealationsUpdateWithoutCompraInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutComprarealationsNestedInput
  }

  export type CompraRealationsUncheckedUpdateWithoutCompraInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_products?: StringFieldUpdateOperationsInput | string
  }

  export type ComentarioRealationsCreateManyComentariosInput = {
    id?: string
    id_product: string
  }

  export type ComentarioRealationsUpdateWithoutComentariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutComentariorealationsNestedInput
  }

  export type ComentarioRealationsUncheckedUpdateWithoutComentariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_product?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}